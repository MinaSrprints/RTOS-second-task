
RTOSuserstory2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00006642  000066d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000065a  008000ae  008000ae  00006724  2**0
                  ALLOC
  3 .stab         00009720  00000000  00000000  00006724  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004b16  00000000  00000000  0000fe44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0001495a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00014a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00014c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00016853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0001773e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000184ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0001864c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000188d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000190a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f6 e6       	ldi	r31, 0x66	; 102
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 12 	call	0x24be	; 0x24be <main>
      8a:	0c 94 1f 33 	jmp	0x663e	; 0x663e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 32 	jmp	0x6526	; 0x6526 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 32 	jmp	0x655e	; 0x655e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 32 	jmp	0x6526	; 0x6526 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 32 	jmp	0x655e	; 0x655e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a3 32 	jmp	0x6546	; 0x6546 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bf 32 	jmp	0x657e	; 0x657e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_WritePin>:
 */

#include "DIO_operations.h"
#include "Memory_map.h"
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_WritePin+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
if(PinValue==1)
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <DIO_WritePin+0x16>
     b5a:	70 c0       	rjmp	.+224    	; 0xc3c <DIO_WritePin+0xf6>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	88 30       	cpi	r24, 0x08	; 8
     b60:	a0 f4       	brcc	.+40     	; 0xb8a <DIO_WritePin+0x44>
	{
		Set_Bit(PORTA,PinNum);
     b62:	ab e3       	ldi	r26, 0x3B	; 59
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	eb e3       	ldi	r30, 0x3B	; 59
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	48 2f       	mov	r20, r24
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	02 2e       	mov	r0, r18
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_WritePin+0x3a>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_WritePin+0x36>
     b84:	84 2b       	or	r24, r20
     b86:	8c 93       	st	X, r24
     b88:	ce c0       	rjmp	.+412    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	d0 f0       	brcs	.+52     	; 0xbc4 <DIO_WritePin+0x7e>
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	80 31       	cpi	r24, 0x10	; 16
     b94:	b8 f4       	brcc	.+46     	; 0xbc4 <DIO_WritePin+0x7e>
	{
		Set_Bit(PORTB,(PinNum-8));
     b96:	a8 e3       	ldi	r26, 0x38	; 56
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e8 e3       	ldi	r30, 0x38	; 56
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	9c 01       	movw	r18, r24
     baa:	28 50       	subi	r18, 0x08	; 8
     bac:	30 40       	sbci	r19, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 2e       	mov	r0, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_WritePin+0x74>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_WritePin+0x70>
     bbe:	84 2b       	or	r24, r20
     bc0:	8c 93       	st	X, r24
     bc2:	b1 c0       	rjmp	.+354    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	80 31       	cpi	r24, 0x10	; 16
     bc8:	d0 f0       	brcs	.+52     	; 0xbfe <DIO_WritePin+0xb8>
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	88 31       	cpi	r24, 0x18	; 24
     bce:	b8 f4       	brcc	.+46     	; 0xbfe <DIO_WritePin+0xb8>
	{
		Set_Bit(PORTC,(PinNum-16));
     bd0:	a5 e3       	ldi	r26, 0x35	; 53
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e5 e3       	ldi	r30, 0x35	; 53
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9c 01       	movw	r18, r24
     be4:	20 51       	subi	r18, 0x10	; 16
     be6:	30 40       	sbci	r19, 0x00	; 0
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 2e       	mov	r0, r18
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_WritePin+0xae>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_WritePin+0xaa>
     bf8:	84 2b       	or	r24, r20
     bfa:	8c 93       	st	X, r24
     bfc:	94 c0       	rjmp	.+296    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	88 31       	cpi	r24, 0x18	; 24
     c02:	08 f4       	brcc	.+2      	; 0xc06 <DIO_WritePin+0xc0>
     c04:	90 c0       	rjmp	.+288    	; 0xd26 <DIO_WritePin+0x1e0>
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	80 32       	cpi	r24, 0x20	; 32
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <DIO_WritePin+0xc8>
     c0c:	8c c0       	rjmp	.+280    	; 0xd26 <DIO_WritePin+0x1e0>
	{
		Set_Bit(PORTD,(PinNum-24));
     c0e:	a2 e3       	ldi	r26, 0x32	; 50
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e2 e3       	ldi	r30, 0x32	; 50
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9c 01       	movw	r18, r24
     c22:	28 51       	subi	r18, 0x18	; 24
     c24:	30 40       	sbci	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_WritePin+0xec>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_WritePin+0xe8>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	75 c0       	rjmp	.+234    	; 0xd26 <DIO_WritePin+0x1e0>
	}
}
else if(PinValue==0)
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <DIO_WritePin+0xfe>
     c42:	71 c0       	rjmp	.+226    	; 0xd26 <DIO_WritePin+0x1e0>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	88 30       	cpi	r24, 0x08	; 8
     c48:	a8 f4       	brcc	.+42     	; 0xc74 <DIO_WritePin+0x12e>
	{
		Clear_Bit(PORTA,PinNum);
     c4a:	ab e3       	ldi	r26, 0x3B	; 59
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e3       	ldi	r30, 0x3B	; 59
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_WritePin+0x122>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_WritePin+0x11e>
     c6c:	80 95       	com	r24
     c6e:	84 23       	and	r24, r20
     c70:	8c 93       	st	X, r24
     c72:	59 c0       	rjmp	.+178    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	d8 f0       	brcs	.+54     	; 0xcb0 <DIO_WritePin+0x16a>
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	80 31       	cpi	r24, 0x10	; 16
     c7e:	c0 f4       	brcc	.+48     	; 0xcb0 <DIO_WritePin+0x16a>
	{
		Clear_Bit(PORTB,(PinNum-8));
     c80:	a8 e3       	ldi	r26, 0x38	; 56
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e8 e3       	ldi	r30, 0x38	; 56
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	48 2f       	mov	r20, r24
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9c 01       	movw	r18, r24
     c94:	28 50       	subi	r18, 0x08	; 8
     c96:	30 40       	sbci	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_WritePin+0x15e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_WritePin+0x15a>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	3b c0       	rjmp	.+118    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	80 31       	cpi	r24, 0x10	; 16
     cb4:	d8 f0       	brcs	.+54     	; 0xcec <DIO_WritePin+0x1a6>
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	88 31       	cpi	r24, 0x18	; 24
     cba:	c0 f4       	brcc	.+48     	; 0xcec <DIO_WritePin+0x1a6>
	{
		Clear_Bit(PORTC,(PinNum-16));
     cbc:	a5 e3       	ldi	r26, 0x35	; 53
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e5 e3       	ldi	r30, 0x35	; 53
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9c 01       	movw	r18, r24
     cd0:	20 51       	subi	r18, 0x10	; 16
     cd2:	30 40       	sbci	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_WritePin+0x19a>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_WritePin+0x196>
     ce4:	80 95       	com	r24
     ce6:	84 23       	and	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	1d c0       	rjmp	.+58     	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	88 31       	cpi	r24, 0x18	; 24
     cf0:	d0 f0       	brcs	.+52     	; 0xd26 <DIO_WritePin+0x1e0>
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	80 32       	cpi	r24, 0x20	; 32
     cf6:	b8 f4       	brcc	.+46     	; 0xd26 <DIO_WritePin+0x1e0>
	{
		Clear_Bit(PORTD,(PinNum-24));
     cf8:	a2 e3       	ldi	r26, 0x32	; 50
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e2 e3       	ldi	r30, 0x32	; 50
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9c 01       	movw	r18, r24
     d0c:	28 51       	subi	r18, 0x18	; 24
     d0e:	30 40       	sbci	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_WritePin+0x1d6>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_WritePin+0x1d2>
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8c 93       	st	X, r24
	}
}
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <DIO_ReadPin+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin_Value;
	if(PinNum>=PinA0&&PinNum<=PinA7)
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	88 30       	cpi	r24, 0x08	; 8
     d40:	90 f4       	brcc	.+36     	; 0xd66 <DIO_ReadPin+0x36>
	{
		Pin_Value=Get_Bit(PINA,PinNum);
     d42:	e9 e3       	ldi	r30, 0x39	; 57
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_ReadPin+0x2c>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_ReadPin+0x28>
     d60:	84 23       	and	r24, r20
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	50 c0       	rjmp	.+160    	; 0xe06 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	88 30       	cpi	r24, 0x08	; 8
     d6a:	c0 f0       	brcs	.+48     	; 0xd9c <DIO_ReadPin+0x6c>
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	80 31       	cpi	r24, 0x10	; 16
     d70:	a8 f4       	brcc	.+42     	; 0xd9c <DIO_ReadPin+0x6c>
	{
		Pin_Value=Get_Bit(PINB,(PinNum-8));
     d72:	e6 e3       	ldi	r30, 0x36	; 54
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	9c 01       	movw	r18, r24
     d82:	28 50       	subi	r18, 0x08	; 8
     d84:	30 40       	sbci	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_ReadPin+0x62>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_ReadPin+0x5e>
     d96:	84 23       	and	r24, r20
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	35 c0       	rjmp	.+106    	; 0xe06 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	80 31       	cpi	r24, 0x10	; 16
     da0:	c0 f0       	brcs	.+48     	; 0xdd2 <DIO_ReadPin+0xa2>
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	88 31       	cpi	r24, 0x18	; 24
     da6:	a8 f4       	brcc	.+42     	; 0xdd2 <DIO_ReadPin+0xa2>
	{
		Pin_Value=Get_Bit(PINC,(PinNum-16));
     da8:	e3 e3       	ldi	r30, 0x33	; 51
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9c 01       	movw	r18, r24
     db8:	20 51       	subi	r18, 0x10	; 16
     dba:	30 40       	sbci	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_ReadPin+0x98>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_ReadPin+0x94>
     dcc:	84 23       	and	r24, r20
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	1a c0       	rjmp	.+52     	; 0xe06 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	88 31       	cpi	r24, 0x18	; 24
     dd6:	b8 f0       	brcs	.+46     	; 0xe06 <DIO_ReadPin+0xd6>
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	80 32       	cpi	r24, 0x20	; 32
     ddc:	a0 f4       	brcc	.+40     	; 0xe06 <DIO_ReadPin+0xd6>
	{
		Pin_Value=Get_Bit(PIND,(PinNum-24));
     dde:	e0 e3       	ldi	r30, 0x30	; 48
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9c 01       	movw	r18, r24
     dee:	28 51       	subi	r18, 0x18	; 24
     df0:	30 40       	sbci	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_ReadPin+0xce>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_ReadPin+0xca>
     e02:	84 23       	and	r24, r20
     e04:	89 83       	std	Y+1, r24	; 0x01
	}
	return Pin_Value;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <DIO_SetPinDirection+0x6>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==1)
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <DIO_SetPinDirection+0x16>
     e26:	70 c0       	rjmp	.+224    	; 0xf08 <DIO_SetPinDirection+0xf6>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	88 30       	cpi	r24, 0x08	; 8
     e2c:	a0 f4       	brcc	.+40     	; 0xe56 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     e2e:	aa e3       	ldi	r26, 0x3A	; 58
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ea e3       	ldi	r30, 0x3A	; 58
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_SetPinDirection+0x3a>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_SetPinDirection+0x36>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	ce c0       	rjmp	.+412    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 30       	cpi	r24, 0x08	; 8
     e5a:	d0 f0       	brcs	.+52     	; 0xe90 <DIO_SetPinDirection+0x7e>
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	80 31       	cpi	r24, 0x10	; 16
     e60:	b8 f4       	brcc	.+46     	; 0xe90 <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
     e62:	a7 e3       	ldi	r26, 0x37	; 55
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e3       	ldi	r30, 0x37	; 55
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9c 01       	movw	r18, r24
     e76:	28 50       	subi	r18, 0x08	; 8
     e78:	30 40       	sbci	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_SetPinDirection+0x74>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_SetPinDirection+0x70>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	b1 c0       	rjmp	.+354    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	80 31       	cpi	r24, 0x10	; 16
     e94:	d0 f0       	brcs	.+52     	; 0xeca <DIO_SetPinDirection+0xb8>
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	88 31       	cpi	r24, 0x18	; 24
     e9a:	b8 f4       	brcc	.+46     	; 0xeca <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
     e9c:	a4 e3       	ldi	r26, 0x34	; 52
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e4 e3       	ldi	r30, 0x34	; 52
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9c 01       	movw	r18, r24
     eb0:	20 51       	subi	r18, 0x10	; 16
     eb2:	30 40       	sbci	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_SetPinDirection+0xae>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_SetPinDirection+0xaa>
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	94 c0       	rjmp	.+296    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	88 31       	cpi	r24, 0x18	; 24
     ece:	08 f4       	brcc	.+2      	; 0xed2 <DIO_SetPinDirection+0xc0>
     ed0:	90 c0       	rjmp	.+288    	; 0xff2 <DIO_SetPinDirection+0x1e0>
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	80 32       	cpi	r24, 0x20	; 32
     ed6:	08 f0       	brcs	.+2      	; 0xeda <DIO_SetPinDirection+0xc8>
     ed8:	8c c0       	rjmp	.+280    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRC,(PinNum-24));
     eda:	a4 e3       	ldi	r26, 0x34	; 52
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e4 e3       	ldi	r30, 0x34	; 52
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9c 01       	movw	r18, r24
     eee:	28 51       	subi	r18, 0x18	; 24
     ef0:	30 40       	sbci	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_SetPinDirection+0xec>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_SetPinDirection+0xe8>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	75 c0       	rjmp	.+234    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==0)
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <DIO_SetPinDirection+0xfe>
     f0e:	71 c0       	rjmp	.+226    	; 0xff2 <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	88 30       	cpi	r24, 0x08	; 8
     f14:	a8 f4       	brcc	.+42     	; 0xf40 <DIO_SetPinDirection+0x12e>
		{
			Clear_Bit(PORTA,PinNum);
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_SetPinDirection+0x122>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_SetPinDirection+0x11e>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	59 c0       	rjmp	.+178    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	88 30       	cpi	r24, 0x08	; 8
     f44:	d8 f0       	brcs	.+54     	; 0xf7c <DIO_SetPinDirection+0x16a>
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	80 31       	cpi	r24, 0x10	; 16
     f4a:	c0 f4       	brcc	.+48     	; 0xf7c <DIO_SetPinDirection+0x16a>
		{
			Clear_Bit(DDRB,(PinNum-8));
     f4c:	a7 e3       	ldi	r26, 0x37	; 55
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e3       	ldi	r30, 0x37	; 55
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9c 01       	movw	r18, r24
     f60:	28 50       	subi	r18, 0x08	; 8
     f62:	30 40       	sbci	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_SetPinDirection+0x15e>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_SetPinDirection+0x15a>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	3b c0       	rjmp	.+118    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	80 31       	cpi	r24, 0x10	; 16
     f80:	d8 f0       	brcs	.+54     	; 0xfb8 <DIO_SetPinDirection+0x1a6>
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	88 31       	cpi	r24, 0x18	; 24
     f86:	c0 f4       	brcc	.+48     	; 0xfb8 <DIO_SetPinDirection+0x1a6>
		{
			Clear_Bit(DDRC,(PinNum-16));
     f88:	a4 e3       	ldi	r26, 0x34	; 52
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c 01       	movw	r18, r24
     f9c:	20 51       	subi	r18, 0x10	; 16
     f9e:	30 40       	sbci	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_SetPinDirection+0x19a>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_SetPinDirection+0x196>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	1d c0       	rjmp	.+58     	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	88 31       	cpi	r24, 0x18	; 24
     fbc:	d0 f0       	brcs	.+52     	; 0xff2 <DIO_SetPinDirection+0x1e0>
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	b8 f4       	brcc	.+46     	; 0xff2 <DIO_SetPinDirection+0x1e0>
		{
			Clear_Bit(DDRD,(PinNum-24));
     fc4:	a1 e3       	ldi	r26, 0x31	; 49
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e1 e3       	ldi	r30, 0x31	; 49
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9c 01       	movw	r18, r24
     fd8:	28 51       	subi	r18, 0x18	; 24
     fda:	30 40       	sbci	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_SetPinDirection+0x1d6>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_SetPinDirection+0x1d2>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
		}
	}
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <LCD_INIT>:
#include "LCD.h"



void LCD_INIT(void)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_4_BIT_2_LINES_COMMAND);
	LCD_sendCommand(CURSOR_OFF);
	LCD_Clear();

#elif defined HIGHER_BITS
	DATA_DDR = 0xF0;
    1004:	ea e3       	ldi	r30, 0x3A	; 58
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 ef       	ldi	r24, 0xF0	; 240
    100a:	80 83       	st	Z, r24
	Set_Bit(CONTROL_DDR,RS);
    100c:	aa e3       	ldi	r26, 0x3A	; 58
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea e3       	ldi	r30, 0x3A	; 58
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	8c 93       	st	X, r24
	Set_Bit(CONTROL_DDR,RW);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	8c 93       	st	X, r24
	Set_Bit(CONTROL_DDR,E);
    1028:	aa e3       	ldi	r26, 0x3A	; 58
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e3       	ldi	r30, 0x3A	; 58
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 60       	ori	r24, 0x08	; 8
    1034:	8c 93       	st	X, r24
	LCD_sendCommand(LCD_4_BIT_MODE);
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
	LCD_sendCommand(LCD_4_BIT_2_LINES_COMMAND);
    103c:	88 e2       	ldi	r24, 0x28	; 40
    103e:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF);
    1042:	8c e0       	ldi	r24, 0x0C	; 12
    1044:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
	LCD_Clear();
    1048:	0e 94 24 09 	call	0x1248	; 0x1248 <LCD_Clear>

#endif

#endif
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <LCD_sendCommand>:


void LCD_sendCommand(const uint8 Command)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	89 83       	std	Y+1, r24	; 0x01
	Clear_Bit(CONTROL_PORT,E);
	vTaskDelay(1);;


#elif defined FOUR_BIT_MODE
	Clear_Bit(CONTROL_PORT,RS);
    105e:	ab e3       	ldi	r26, 0x3B	; 59
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	eb e3       	ldi	r30, 0x3B	; 59
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8d 7f       	andi	r24, 0xFD	; 253
    106a:	8c 93       	st	X, r24
	Clear_Bit(CONTROL_PORT,RW);
    106c:	ab e3       	ldi	r26, 0x3B	; 59
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	eb e3       	ldi	r30, 0x3B	; 59
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8b 7f       	andi	r24, 0xFB	; 251
    1078:	8c 93       	st	X, r24
	vTaskDelay(2);
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	Set_Bit(CONTROL_PORT,E);
    1082:	ab e3       	ldi	r26, 0x3B	; 59
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e3       	ldi	r30, 0x3B	; 59
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 60       	ori	r24, 0x08	; 8
    108e:	8c 93       	st	X, r24
	vTaskDelay(2);
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | ((0xF0 & Command)>>4);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | (0xF0 & Command);
    1098:	ab e3       	ldi	r26, 0x3B	; 59
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	98 2f       	mov	r25, r24
    10a4:	9f 70       	andi	r25, 0x0F	; 15
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	80 7f       	andi	r24, 0xF0	; 240
    10aa:	89 2b       	or	r24, r25
    10ac:	8c 93       	st	X, r24
#endif
	vTaskDelay(2);
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	Clear_Bit(CONTROL_PORT,E);
    10b6:	ab e3       	ldi	r26, 0x3B	; 59
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	eb e3       	ldi	r30, 0x3B	; 59
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	87 7f       	andi	r24, 0xF7	; 247
    10c2:	8c 93       	st	X, r24
	vTaskDelay(2);
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	Set_Bit(CONTROL_PORT,E);
    10cc:	ab e3       	ldi	r26, 0x3B	; 59
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 60       	ori	r24, 0x08	; 8
    10d8:	8c 93       	st	X, r24
	vTaskDelay(2);
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | (0x0F & Command);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | ((0x0F & Command)<<4);
    10e2:	ab e3       	ldi	r26, 0x3B	; 59
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	eb e3       	ldi	r30, 0x3B	; 59
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	28 2f       	mov	r18, r24
    10ee:	2f 70       	andi	r18, 0x0F	; 15
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	82 95       	swap	r24
    10f8:	92 95       	swap	r25
    10fa:	90 7f       	andi	r25, 0xF0	; 240
    10fc:	98 27       	eor	r25, r24
    10fe:	80 7f       	andi	r24, 0xF0	; 240
    1100:	98 27       	eor	r25, r24
    1102:	82 2b       	or	r24, r18
    1104:	8c 93       	st	X, r24
#endif
	Clear_Bit(CONTROL_PORT,E);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	87 7f       	andi	r24, 0xF7	; 247
    1112:	8c 93       	st	X, r24
	vTaskDelay(2);
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>

#endif
}
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <LCD_sendChar>:


void LCD_sendChar(const char Char)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	89 83       	std	Y+1, r24	; 0x01
	Clear_Bit(CONTROL_PORT,E);
	vTaskDelay(1);;


#elif defined FOUR_BIT_MODE
	Set_Bit(CONTROL_PORT,RS);
    1130:	ab e3       	ldi	r26, 0x3B	; 59
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e3       	ldi	r30, 0x3B	; 59
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	82 60       	ori	r24, 0x02	; 2
    113c:	8c 93       	st	X, r24
	Clear_Bit(CONTROL_PORT,RW);
    113e:	ab e3       	ldi	r26, 0x3B	; 59
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8b 7f       	andi	r24, 0xFB	; 251
    114a:	8c 93       	st	X, r24
	vTaskDelay(2);
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	Set_Bit(CONTROL_PORT,E);
    1154:	ab e3       	ldi	r26, 0x3B	; 59
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	eb e3       	ldi	r30, 0x3B	; 59
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 60       	ori	r24, 0x08	; 8
    1160:	8c 93       	st	X, r24
	vTaskDelay(2);
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | ((0xF0 & Char) >> 4);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | (0xF0 & Char);
    116a:	ab e3       	ldi	r26, 0x3B	; 59
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	98 2f       	mov	r25, r24
    1176:	9f 70       	andi	r25, 0x0F	; 15
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	80 7f       	andi	r24, 0xF0	; 240
    117c:	89 2b       	or	r24, r25
    117e:	8c 93       	st	X, r24
#endif
	vTaskDelay(2);
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	Clear_Bit(CONTROL_PORT,E);
    1188:	ab e3       	ldi	r26, 0x3B	; 59
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	eb e3       	ldi	r30, 0x3B	; 59
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	87 7f       	andi	r24, 0xF7	; 247
    1194:	8c 93       	st	X, r24
	vTaskDelay(2);
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	Set_Bit(CONTROL_PORT,E);
    119e:	ab e3       	ldi	r26, 0x3B	; 59
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	eb e3       	ldi	r30, 0x3B	; 59
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	88 60       	ori	r24, 0x08	; 8
    11aa:	8c 93       	st	X, r24
	vTaskDelay(2);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | (0x0F & Char);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | ((0x0F & Char) << 4);
    11b4:	ab e3       	ldi	r26, 0x3B	; 59
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	eb e3       	ldi	r30, 0x3B	; 59
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	2f 70       	andi	r18, 0x0F	; 15
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	82 95       	swap	r24
    11ca:	92 95       	swap	r25
    11cc:	90 7f       	andi	r25, 0xF0	; 240
    11ce:	98 27       	eor	r25, r24
    11d0:	80 7f       	andi	r24, 0xF0	; 240
    11d2:	98 27       	eor	r25, r24
    11d4:	82 2b       	or	r24, r18
    11d6:	8c 93       	st	X, r24
#endif
	Clear_Bit(CONTROL_PORT,E);
    11d8:	ab e3       	ldi	r26, 0x3B	; 59
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	eb e3       	ldi	r30, 0x3B	; 59
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	87 7f       	andi	r24, 0xF7	; 247
    11e4:	8c 93       	st	X, r24
	vTaskDelay(2);
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>

#endif

}
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <LCD_sendString>:


void LCD_sendString(const char *str)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <LCD_sendString+0x6>
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9b 83       	std	Y+3, r25	; 0x03
    1204:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	0e c0       	rjmp	.+28     	; 0x1226 <LCD_sendString+0x30>
	while(str[i]!= '\0')
	{
		LCD_sendChar(str[i]);
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	fc 01       	movw	r30, r24
    1216:	e2 0f       	add	r30, r18
    1218:	f3 1f       	adc	r31, r19
    121a:	80 81       	ld	r24, Z
    121c:	0e 94 92 08 	call	0x1124	; 0x1124 <LCD_sendChar>
		i++;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	89 83       	std	Y+1, r24	; 0x01


void LCD_sendString(const char *str)
{
	uint8 i =0;
	while(str[i]!= '\0')
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	9b 81       	ldd	r25, Y+3	; 0x03
    1230:	fc 01       	movw	r30, r24
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	80 81       	ld	r24, Z
    1238:	88 23       	and	r24, r24
    123a:	39 f7       	brne	.-50     	; 0x120a <LCD_sendString+0x14>
	{
		LCD_sendChar(str[i]);
		i++;
	}
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <LCD_Clear>:


void LCD_Clear(void)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR); 
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <LCD_IntToStr>:


void LCD_IntToStr(const uint16 data)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	62 97       	sbiw	r28, 0x12	; 18
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	9a 8b       	std	Y+18, r25	; 0x12
    1272:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* 10 for decimal */
    1274:	89 89       	ldd	r24, Y+17	; 0x11
    1276:	9a 89       	ldd	r25, Y+18	; 0x12
    1278:	9e 01       	movw	r18, r28
    127a:	2f 5f       	subi	r18, 0xFF	; 255
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	b9 01       	movw	r22, r18
    1280:	4a e0       	ldi	r20, 0x0A	; 10
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	0e 94 da 32 	call	0x65b4	; 0x65b4 <itoa>
	LCD_sendString(buff);
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD_sendString>
}
    1290:	62 96       	adiw	r28, 0x12	; 18
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <LCD_goToRowColumn>:


void LCD_goToRowColumn(uint8 row,uint8 col)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <LCD_goToRowColumn+0x6>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <LCD_goToRowColumn+0x8>
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	8a 83       	std	Y+2, r24	; 0x02
    12b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	3d 83       	std	Y+5, r19	; 0x05
    12bc:	2c 83       	std	Y+4, r18	; 0x04
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	91 05       	cpc	r25, r1
    12c6:	c1 f0       	breq	.+48     	; 0x12f8 <LCD_goToRowColumn+0x56>
    12c8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ca:	3d 81       	ldd	r19, Y+5	; 0x05
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	2c f4       	brge	.+10     	; 0x12dc <LCD_goToRowColumn+0x3a>
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <LCD_goToRowColumn+0x50>
    12da:	19 c0       	rjmp	.+50     	; 0x130e <LCD_goToRowColumn+0x6c>
    12dc:	2c 81       	ldd	r18, Y+4	; 0x04
    12de:	3d 81       	ldd	r19, Y+5	; 0x05
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	69 f0       	breq	.+26     	; 0x1300 <LCD_goToRowColumn+0x5e>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	91 05       	cpc	r25, r1
    12ee:	61 f0       	breq	.+24     	; 0x1308 <LCD_goToRowColumn+0x66>
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	0b c0       	rjmp	.+22     	; 0x130e <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	80 5c       	subi	r24, 0xC0	; 192
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	80 5f       	subi	r24, 0xF0	; 240
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	03 c0       	rjmp	.+6      	; 0x130e <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	80 5b       	subi	r24, 0xB0	; 176
    130c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	80 68       	ori	r24, 0x80	; 128
    1312:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *Str)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <LCD_displayStringRowColumn+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <LCD_displayStringRowColumn+0x8>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	6a 83       	std	Y+2, r22	; 0x02
    1336:	5c 83       	std	Y+4, r21	; 0x04
    1338:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	6a 81       	ldd	r22, Y+2	; 0x02
    133e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <LCD_goToRowColumn>
	LCD_sendString(Str); /* display the string */
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD_sendString>
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <BUTTON_Init>:
 */
#include "FreeRTOS.h"
#include "task.h"
#include "button.h"
void BUTTON_Init(uint8 button_num)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
	if(button_num==1)
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	49 f4       	brne	.+18     	; 0x137c <BUTTON_Init+0x24>
	{
	DIO_SetPinDirection(PinA0,INPUT);
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_SetPinDirection>
	DIO_WritePin(PinA0,HIGH);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
    137a:	0b c0       	rjmp	.+22     	; 0x1392 <BUTTON_Init+0x3a>
	}
	else if(button_num==2)
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	41 f4       	brne	.+16     	; 0x1392 <BUTTON_Init+0x3a>
	{
	DIO_SetPinDirection(PinA1,INPUT);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_SetPinDirection>
	DIO_WritePin(PinA1,HIGH);
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
	}
}
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <BUTTON_GitButtonState>:
uint8 BUTTON_GitButtonState(uint8 button_num)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <BUTTON_GitButtonState+0x6>
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01
	if(button_num==1)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	29 f4       	brne	.+10     	; 0x13b8 <BUTTON_GitButtonState+0x1e>
	{
	return DIO_ReadPin(PinA0);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 98 06 	call	0xd30	; 0xd30 <DIO_ReadPin>
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <BUTTON_GitButtonState+0x30>
	}
	else if(button_num==2)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <BUTTON_GitButtonState+0x2e>
	{
	return DIO_ReadPin(PinA1);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 98 06 	call	0xd30	; 0xd30 <DIO_ReadPin>
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <BUTTON_GitButtonState+0x30>
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <BUTTON_GitButtonState+0x34>
	}
}
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <xEventGroupCreate+0x6>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    13e6:	8b e0       	ldi	r24, 0x0B	; 11
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	49 f0       	breq	.+18     	; 0x140c <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    13fa:	e9 81       	ldd	r30, Y+1	; 0x01
    13fc:	fa 81       	ldd	r31, Y+2	; 0x02
    13fe:	11 82       	std	Z+1, r1	; 0x01
    1400:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	02 96       	adiw	r24, 0x02	; 2
    1408:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	60 97       	sbiw	r28, 0x10	; 16
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	9a 87       	std	Y+10, r25	; 0x0a
    1430:	89 87       	std	Y+9, r24	; 0x09
    1432:	7c 87       	std	Y+12, r23	; 0x0c
    1434:	6b 87       	std	Y+11, r22	; 0x0b
    1436:	5e 87       	std	Y+14, r21	; 0x0e
    1438:	4d 87       	std	Y+13, r20	; 0x0d
    143a:	38 8b       	std	Y+16, r19	; 0x10
    143c:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    1446:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1448:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    144c:	eb 81       	ldd	r30, Y+3	; 0x03
    144e:	fc 81       	ldd	r31, Y+4	; 0x04
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	98 87       	std	Y+8, r25	; 0x08
    1456:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	2b 85       	ldd	r18, Y+11	; 0x0b
    145e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1466:	2f 81       	ldd	r18, Y+7	; 0x07
    1468:	38 85       	ldd	r19, Y+8	; 0x08
    146a:	8b 85       	ldd	r24, Y+11	; 0x0b
    146c:	9c 85       	ldd	r25, Y+12	; 0x0c
    146e:	28 2b       	or	r18, r24
    1470:	39 2b       	or	r19, r25
    1472:	8d 85       	ldd	r24, Y+13	; 0x0d
    1474:	9e 85       	ldd	r25, Y+14	; 0x0e
    1476:	28 23       	and	r18, r24
    1478:	39 23       	and	r19, r25
    147a:	8d 85       	ldd	r24, Y+13	; 0x0d
    147c:	9e 85       	ldd	r25, Y+14	; 0x0e
    147e:	28 17       	cp	r18, r24
    1480:	39 07       	cpc	r19, r25
    1482:	c9 f4       	brne	.+50     	; 0x14b6 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    1484:	2f 81       	ldd	r18, Y+7	; 0x07
    1486:	38 85       	ldd	r19, Y+8	; 0x08
    1488:	8b 85       	ldd	r24, Y+11	; 0x0b
    148a:	9c 85       	ldd	r25, Y+12	; 0x0c
    148c:	82 2b       	or	r24, r18
    148e:	93 2b       	or	r25, r19
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	20 81       	ld	r18, Z
    149a:	31 81       	ldd	r19, Z+1	; 0x01
    149c:	8d 85       	ldd	r24, Y+13	; 0x0d
    149e:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a0:	80 95       	com	r24
    14a2:	90 95       	com	r25
    14a4:	82 23       	and	r24, r18
    14a6:	93 23       	and	r25, r19
    14a8:	eb 81       	ldd	r30, Y+3	; 0x03
    14aa:	fc 81       	ldd	r31, Y+4	; 0x04
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	80 83       	st	Z, r24

			xTicksToWait = 0;
    14b0:	18 8a       	std	Y+16, r1	; 0x10
    14b2:	1f 86       	std	Y+15, r1	; 0x0f
    14b4:	1e c0       	rjmp	.+60     	; 0x14f2 <xEventGroupSync+0xd8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    14b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b8:	98 89       	ldd	r25, Y+16	; 0x10
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	91 f0       	breq	.+36     	; 0x14e2 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	bc 01       	movw	r22, r24
    14c4:	6e 5f       	subi	r22, 0xFE	; 254
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    14cc:	9c 01       	movw	r18, r24
    14ce:	35 60       	ori	r19, 0x05	; 5
    14d0:	4f 85       	ldd	r20, Y+15	; 0x0f
    14d2:	58 89       	ldd	r21, Y+16	; 0x10
    14d4:	cb 01       	movw	r24, r22
    14d6:	b9 01       	movw	r22, r18
    14d8:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    14dc:	1e 82       	std	Y+6, r1	; 0x06
    14de:	1d 82       	std	Y+5, r1	; 0x05
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <xEventGroupSync+0xd8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
				xTimeoutOccurred = pdTRUE;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    14f2:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    14f6:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    14f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fa:	98 89       	ldd	r25, Y+16	; 0x10
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	09 f4       	brne	.+2      	; 0x1502 <xEventGroupSync+0xe8>
    1500:	3a c0       	rjmp	.+116    	; 0x1576 <xEventGroupSync+0x15c>
	{
		if( xAlreadyYielded == pdFALSE )
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	88 23       	and	r24, r24
    1506:	11 f4       	brne	.+4      	; 0x150c <xEventGroupSync+0xf2>
		{
			portYIELD_WITHIN_API();
    1508:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    150c:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <uxTaskResetEventItemValue>
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	80 70       	andi	r24, 0x00	; 0
    151a:	92 70       	andi	r25, 0x02	; 2
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	31 f5       	brne	.+76     	; 0x156c <xEventGroupSync+0x152>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    1526:	eb 81       	ldd	r30, Y+3	; 0x03
    1528:	fc 81       	ldd	r31, Y+4	; 0x04
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1532:	2d 81       	ldd	r18, Y+5	; 0x05
    1534:	3e 81       	ldd	r19, Y+6	; 0x06
    1536:	8d 85       	ldd	r24, Y+13	; 0x0d
    1538:	9e 85       	ldd	r25, Y+14	; 0x0e
    153a:	28 23       	and	r18, r24
    153c:	39 23       	and	r19, r25
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	9e 85       	ldd	r25, Y+14	; 0x0e
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	71 f4       	brne	.+28     	; 0x1564 <xEventGroupSync+0x14a>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1548:	eb 81       	ldd	r30, Y+3	; 0x03
    154a:	fc 81       	ldd	r31, Y+4	; 0x04
    154c:	20 81       	ld	r18, Z
    154e:	31 81       	ldd	r19, Z+1	; 0x01
    1550:	8d 85       	ldd	r24, Y+13	; 0x0d
    1552:	9e 85       	ldd	r25, Y+14	; 0x0e
    1554:	80 95       	com	r24
    1556:	90 95       	com	r25
    1558:	82 23       	and	r24, r18
    155a:	93 23       	and	r25, r19
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	90 70       	andi	r25, 0x00	; 0
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
}
    157a:	60 96       	adiw	r28, 0x10	; 16
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	63 97       	sbiw	r28, 0x13	; 19
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	9d 87       	std	Y+13, r25	; 0x0d
    15a6:	8c 87       	std	Y+12, r24	; 0x0c
    15a8:	7f 87       	std	Y+15, r23	; 0x0f
    15aa:	6e 87       	std	Y+14, r22	; 0x0e
    15ac:	48 8b       	std	Y+16, r20	; 0x10
    15ae:	29 8b       	std	Y+17, r18	; 0x11
    15b0:	1b 8b       	std	Y+19, r17	; 0x13
    15b2:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = xEventGroup;
    15b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b8:	9b 87       	std	Y+11, r25	; 0x0b
    15ba:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    15bc:	1f 82       	std	Y+7, r1	; 0x07
    15be:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    15c0:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    15c2:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    15c6:	ea 85       	ldd	r30, Y+10	; 0x0a
    15c8:	fb 85       	ldd	r31, Y+11	; 0x0b
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	2e 85       	ldd	r18, Y+14	; 0x0e
    15d8:	3f 85       	ldd	r19, Y+15	; 0x0f
    15da:	b9 01       	movw	r22, r18
    15dc:	49 89       	ldd	r20, Y+17	; 0x11
    15de:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <prvTestWaitCondition>
    15e2:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	88 23       	and	r24, r24
    15e8:	c1 f0       	breq	.+48     	; 0x161a <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	99 87       	std	Y+9, r25	; 0x09
    15f0:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    15f2:	1b 8a       	std	Y+19, r1	; 0x13
    15f4:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    15f6:	88 89       	ldd	r24, Y+16	; 0x10
    15f8:	88 23       	and	r24, r24
    15fa:	e9 f1       	breq	.+122    	; 0x1676 <xEventGroupWaitBits+0xea>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    15fc:	ea 85       	ldd	r30, Y+10	; 0x0a
    15fe:	fb 85       	ldd	r31, Y+11	; 0x0b
    1600:	20 81       	ld	r18, Z
    1602:	31 81       	ldd	r19, Z+1	; 0x01
    1604:	8e 85       	ldd	r24, Y+14	; 0x0e
    1606:	9f 85       	ldd	r25, Y+15	; 0x0f
    1608:	80 95       	com	r24
    160a:	90 95       	com	r25
    160c:	82 23       	and	r24, r18
    160e:	93 23       	and	r25, r19
    1610:	ea 85       	ldd	r30, Y+10	; 0x0a
    1612:	fb 85       	ldd	r31, Y+11	; 0x0b
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
    1618:	2e c0       	rjmp	.+92     	; 0x1676 <xEventGroupWaitBits+0xea>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    161a:	8a 89       	ldd	r24, Y+18	; 0x12
    161c:	9b 89       	ldd	r25, Y+19	; 0x13
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	39 f4       	brne	.+14     	; 0x1630 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	99 87       	std	Y+9, r25	; 0x09
    1628:	88 87       	std	Y+8, r24	; 0x08
			xTimeoutOccurred = pdTRUE;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	23 c0       	rjmp	.+70     	; 0x1676 <xEventGroupWaitBits+0xea>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    1630:	88 89       	ldd	r24, Y+16	; 0x10
    1632:	88 23       	and	r24, r24
    1634:	29 f0       	breq	.+10     	; 0x1640 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    1636:	8e 81       	ldd	r24, Y+6	; 0x06
    1638:	9f 81       	ldd	r25, Y+7	; 0x07
    163a:	91 60       	ori	r25, 0x01	; 1
    163c:	9f 83       	std	Y+7, r25	; 0x07
    163e:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    1640:	89 89       	ldd	r24, Y+17	; 0x11
    1642:	88 23       	and	r24, r24
    1644:	29 f0       	breq	.+10     	; 0x1650 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	9f 81       	ldd	r25, Y+7	; 0x07
    164a:	94 60       	ori	r25, 0x04	; 4
    164c:	9f 83       	std	Y+7, r25	; 0x07
    164e:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1650:	8a 85       	ldd	r24, Y+10	; 0x0a
    1652:	9b 85       	ldd	r25, Y+11	; 0x0b
    1654:	bc 01       	movw	r22, r24
    1656:	6e 5f       	subi	r22, 0xFE	; 254
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	2e 85       	ldd	r18, Y+14	; 0x0e
    165c:	3f 85       	ldd	r19, Y+15	; 0x0f
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	28 2b       	or	r18, r24
    1664:	39 2b       	or	r19, r25
    1666:	4a 89       	ldd	r20, Y+18	; 0x12
    1668:	5b 89       	ldd	r21, Y+19	; 0x13
    166a:	cb 01       	movw	r24, r22
    166c:	b9 01       	movw	r22, r18
    166e:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    1672:	19 86       	std	Y+9, r1	; 0x09
    1674:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    1676:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    167a:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    167c:	8a 89       	ldd	r24, Y+18	; 0x12
    167e:	9b 89       	ldd	r25, Y+19	; 0x13
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	09 f4       	brne	.+2      	; 0x1686 <xEventGroupWaitBits+0xfa>
    1684:	3c c0       	rjmp	.+120    	; 0x16fe <xEventGroupWaitBits+0x172>
	{
		if( xAlreadyYielded == pdFALSE )
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	88 23       	and	r24, r24
    168a:	11 f4       	brne	.+4      	; 0x1690 <xEventGroupWaitBits+0x104>
		{
			portYIELD_WITHIN_API();
    168c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1690:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <uxTaskResetEventItemValue>
    1694:	99 87       	std	Y+9, r25	; 0x09
    1696:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1698:	88 85       	ldd	r24, Y+8	; 0x08
    169a:	99 85       	ldd	r25, Y+9	; 0x09
    169c:	80 70       	andi	r24, 0x00	; 0
    169e:	92 70       	andi	r25, 0x02	; 2
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	41 f5       	brne	.+80     	; 0x16f4 <xEventGroupWaitBits+0x168>
		{
			taskENTER_CRITICAL();
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    16aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    16ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	99 87       	std	Y+9, r25	; 0x09
    16b4:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    16b6:	88 85       	ldd	r24, Y+8	; 0x08
    16b8:	99 85       	ldd	r25, Y+9	; 0x09
    16ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    16bc:	3f 85       	ldd	r19, Y+15	; 0x0f
    16be:	b9 01       	movw	r22, r18
    16c0:	49 89       	ldd	r20, Y+17	; 0x11
    16c2:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <prvTestWaitCondition>
    16c6:	88 23       	and	r24, r24
    16c8:	89 f0       	breq	.+34     	; 0x16ec <xEventGroupWaitBits+0x160>
				{
					if( xClearOnExit != pdFALSE )
    16ca:	88 89       	ldd	r24, Y+16	; 0x10
    16cc:	88 23       	and	r24, r24
    16ce:	71 f0       	breq	.+28     	; 0x16ec <xEventGroupWaitBits+0x160>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    16d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    16d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    16d4:	20 81       	ld	r18, Z
    16d6:	31 81       	ldd	r19, Z+1	; 0x01
    16d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16da:	9f 85       	ldd	r25, Y+15	; 0x0f
    16dc:	80 95       	com	r24
    16de:	90 95       	com	r25
    16e0:	82 23       	and	r24, r18
    16e2:	93 23       	and	r25, r19
    16e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    16e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	8b 83       	std	Y+3, r24	; 0x03
			}
			taskEXIT_CRITICAL();
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    16f4:	88 85       	ldd	r24, Y+8	; 0x08
    16f6:	99 85       	ldd	r25, Y+9	; 0x09
    16f8:	90 70       	andi	r25, 0x00	; 0
    16fa:	99 87       	std	Y+9, r25	; 0x09
    16fc:	88 87       	std	Y+8, r24	; 0x08
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    16fe:	88 85       	ldd	r24, Y+8	; 0x08
    1700:	99 85       	ldd	r25, Y+9	; 0x09
}
    1702:	63 96       	adiw	r28, 0x13	; 19
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	28 97       	sbiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	78 87       	std	Y+8, r23	; 0x08
    1732:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = xEventGroup;
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1742:	eb 81       	ldd	r30, Y+3	; 0x03
    1744:	fc 81       	ldd	r31, Y+4	; 0x04
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    174e:	eb 81       	ldd	r30, Y+3	; 0x03
    1750:	fc 81       	ldd	r31, Y+4	; 0x04
    1752:	20 81       	ld	r18, Z
    1754:	31 81       	ldd	r19, Z+1	; 0x01
    1756:	8f 81       	ldd	r24, Y+7	; 0x07
    1758:	98 85       	ldd	r25, Y+8	; 0x08
    175a:	80 95       	com	r24
    175c:	90 95       	com	r25
    175e:	82 23       	and	r24, r18
    1760:	93 23       	and	r25, r19
    1762:	eb 81       	ldd	r30, Y+3	; 0x03
    1764:	fc 81       	ldd	r31, Y+4	; 0x04
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1772:	28 96       	adiw	r28, 0x08	; 8
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	27 97       	sbiw	r28, 0x07	; 7
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	9f 83       	std	Y+7, r25	; 0x07
    179a:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
    179c:	8e 81       	ldd	r24, Y+6	; 0x06
    179e:	9f 81       	ldd	r25, Y+7	; 0x07
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    17a4:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    17a6:	eb 81       	ldd	r30, Y+3	; 0x03
    17a8:	fc 81       	ldd	r31, Y+4	; 0x04
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    17b6:	27 96       	adiw	r28, 0x07	; 7
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	65 97       	sbiw	r28, 0x15	; 21
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	9b 8b       	std	Y+19, r25	; 0x13
    17de:	8a 8b       	std	Y+18, r24	; 0x12
    17e0:	7d 8b       	std	Y+21, r23	; 0x15
    17e2:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    17e4:	19 86       	std	Y+9, r1	; 0x09
    17e6:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = xEventGroup;
    17e8:	8a 89       	ldd	r24, Y+18	; 0x12
    17ea:	9b 89       	ldd	r25, Y+19	; 0x13
    17ec:	9b 83       	std	Y+3, r25	; 0x03
    17ee:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    17f0:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
    17f6:	02 96       	adiw	r24, 0x02	; 2
    17f8:	9b 87       	std	Y+11, r25	; 0x0b
    17fa:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1800:	03 96       	adiw	r24, 0x03	; 3
    1802:	9d 87       	std	Y+13, r25	; 0x0d
    1804:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    1806:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    180a:	ea 85       	ldd	r30, Y+10	; 0x0a
    180c:	fb 85       	ldd	r31, Y+11	; 0x0b
    180e:	85 81       	ldd	r24, Z+5	; 0x05
    1810:	96 81       	ldd	r25, Z+6	; 0x06
    1812:	99 8b       	std	Y+17, r25	; 0x11
    1814:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    1816:	ea 81       	ldd	r30, Y+2	; 0x02
    1818:	fb 81       	ldd	r31, Y+3	; 0x03
    181a:	20 81       	ld	r18, Z
    181c:	31 81       	ldd	r19, Z+1	; 0x01
    181e:	8c 89       	ldd	r24, Y+20	; 0x14
    1820:	9d 89       	ldd	r25, Y+21	; 0x15
    1822:	82 2b       	or	r24, r18
    1824:	93 2b       	or	r25, r19
    1826:	ea 81       	ldd	r30, Y+2	; 0x02
    1828:	fb 81       	ldd	r31, Y+3	; 0x03
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	59 c0       	rjmp	.+178    	; 0x18e2 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    1830:	e8 89       	ldd	r30, Y+16	; 0x10
    1832:	f9 89       	ldd	r31, Y+17	; 0x11
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	9f 87       	std	Y+15, r25	; 0x0f
    183a:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    183c:	e8 89       	ldd	r30, Y+16	; 0x10
    183e:	f9 89       	ldd	r31, Y+17	; 0x11
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	9f 83       	std	Y+7, r25	; 0x07
    1846:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    1848:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    184a:	8e 81       	ldd	r24, Y+6	; 0x06
    184c:	9f 81       	ldd	r25, Y+7	; 0x07
    184e:	80 70       	andi	r24, 0x00	; 0
    1850:	9d 83       	std	Y+5, r25	; 0x05
    1852:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	90 70       	andi	r25, 0x00	; 0
    185a:	9f 83       	std	Y+7, r25	; 0x07
    185c:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	80 70       	andi	r24, 0x00	; 0
    1864:	94 70       	andi	r25, 0x04	; 4
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	69 f4       	brne	.+26     	; 0x1884 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    186a:	ea 81       	ldd	r30, Y+2	; 0x02
    186c:	fb 81       	ldd	r31, Y+3	; 0x03
    186e:	20 81       	ld	r18, Z
    1870:	31 81       	ldd	r19, Z+1	; 0x01
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	82 23       	and	r24, r18
    1878:	93 23       	and	r25, r19
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	91 f0       	breq	.+36     	; 0x18a2 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1884:	ea 81       	ldd	r30, Y+2	; 0x02
    1886:	fb 81       	ldd	r31, Y+3	; 0x03
    1888:	20 81       	ld	r18, Z
    188a:	31 81       	ldd	r19, Z+1	; 0x01
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	9f 81       	ldd	r25, Y+7	; 0x07
    1890:	28 23       	and	r18, r24
    1892:	39 23       	and	r19, r25
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	9f 81       	ldd	r25, Y+7	; 0x07
    1898:	28 17       	cp	r18, r24
    189a:	39 07       	cpc	r19, r25
    189c:	11 f4       	brne	.+4      	; 0x18a2 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	88 23       	and	r24, r24
    18a6:	c9 f0       	breq	.+50     	; 0x18da <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	80 70       	andi	r24, 0x00	; 0
    18ae:	91 70       	andi	r25, 0x01	; 1
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	41 f0       	breq	.+16     	; 0x18c4 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    18b4:	88 85       	ldd	r24, Y+8	; 0x08
    18b6:	99 85       	ldd	r25, Y+9	; 0x09
    18b8:	2e 81       	ldd	r18, Y+6	; 0x06
    18ba:	3f 81       	ldd	r19, Y+7	; 0x07
    18bc:	82 2b       	or	r24, r18
    18be:	93 2b       	or	r25, r19
    18c0:	99 87       	std	Y+9, r25	; 0x09
    18c2:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    18c4:	ea 81       	ldd	r30, Y+2	; 0x02
    18c6:	fb 81       	ldd	r31, Y+3	; 0x03
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	9c 01       	movw	r18, r24
    18ce:	32 60       	ori	r19, 0x02	; 2
    18d0:	88 89       	ldd	r24, Y+16	; 0x10
    18d2:	99 89       	ldd	r25, Y+17	; 0x11
    18d4:	b9 01       	movw	r22, r18
    18d6:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    18da:	8e 85       	ldd	r24, Y+14	; 0x0e
    18dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    18de:	99 8b       	std	Y+17, r25	; 0x11
    18e0:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    18e2:	28 89       	ldd	r18, Y+16	; 0x10
    18e4:	39 89       	ldd	r19, Y+17	; 0x11
    18e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    18e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    18ea:	28 17       	cp	r18, r24
    18ec:	39 07       	cpc	r19, r25
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <xEventGroupSetBits+0x12a>
    18f0:	9f cf       	rjmp	.-194    	; 0x1830 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    18f2:	ea 81       	ldd	r30, Y+2	; 0x02
    18f4:	fb 81       	ldd	r31, Y+3	; 0x03
    18f6:	20 81       	ld	r18, Z
    18f8:	31 81       	ldd	r19, Z+1	; 0x01
    18fa:	88 85       	ldd	r24, Y+8	; 0x08
    18fc:	99 85       	ldd	r25, Y+9	; 0x09
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	82 23       	and	r24, r18
    1904:	93 23       	and	r25, r19
    1906:	ea 81       	ldd	r30, Y+2	; 0x02
    1908:	fb 81       	ldd	r31, Y+3	; 0x03
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    190e:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    1912:	ea 81       	ldd	r30, Y+2	; 0x02
    1914:	fb 81       	ldd	r31, Y+3	; 0x03
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
}
    191a:	65 96       	adiw	r28, 0x15	; 21
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <vEventGroupDelete+0x6>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <vEventGroupDelete+0x8>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <vEventGroupDelete+0xa>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = xEventGroup;
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	02 96       	adiw	r24, 0x02	; 2
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1950:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
    1954:	08 c0       	rjmp	.+16     	; 0x1966 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1956:	e9 81       	ldd	r30, Y+1	; 0x01
    1958:	fa 81       	ldd	r31, Y+2	; 0x02
    195a:	85 81       	ldd	r24, Z+5	; 0x05
    195c:	96 81       	ldd	r25, Z+6	; 0x06
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	72 e0       	ldi	r23, 0x02	; 2
    1962:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	80 81       	ld	r24, Z
    196c:	88 23       	and	r24, r24
    196e:	99 f7       	brne	.-26     	; 0x1956 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    1978:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
}
    197c:	26 96       	adiw	r28, 0x06	; 6
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <vEventGroupSetBitsCallback+0x6>
    1994:	00 d0       	rcall	.+0      	; 0x1996 <vEventGroupSetBitsCallback+0x8>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <vEventGroupSetBitsCallback+0xa>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	4b 83       	std	Y+3, r20	; 0x03
    19a2:	5c 83       	std	Y+4, r21	; 0x04
    19a4:	6d 83       	std	Y+5, r22	; 0x05
    19a6:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	2b 81       	ldd	r18, Y+3	; 0x03
    19ae:	3c 81       	ldd	r19, Y+4	; 0x04
    19b0:	b9 01       	movw	r22, r18
    19b2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xEventGroupSetBits>
}
    19b6:	26 96       	adiw	r28, 0x06	; 6
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <vEventGroupClearBitsCallback+0x6>
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <vEventGroupClearBitsCallback+0x8>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <vEventGroupClearBitsCallback+0xa>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	4b 83       	std	Y+3, r20	; 0x03
    19dc:	5c 83       	std	Y+4, r21	; 0x04
    19de:	6d 83       	std	Y+5, r22	; 0x05
    19e0:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	2b 81       	ldd	r18, Y+3	; 0x03
    19e8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ea:	b9 01       	movw	r22, r18
    19ec:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xEventGroupClearBits>
}
    19f0:	26 96       	adiw	r28, 0x06	; 6
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <prvTestWaitCondition+0x6>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <prvTestWaitCondition+0x8>
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <prvTestWaitCondition+0xa>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9b 83       	std	Y+3, r25	; 0x03
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    1a14:	7d 83       	std	Y+5, r23	; 0x05
    1a16:	6c 83       	std	Y+4, r22	; 0x04
    1a18:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    1a1a:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    1a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1e:	88 23       	and	r24, r24
    1a20:	59 f4       	brne	.+22     	; 0x1a38 <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	2c 81       	ldd	r18, Y+4	; 0x04
    1a28:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2a:	82 23       	and	r24, r18
    1a2c:	93 23       	and	r25, r19
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	0d c0       	rjmp	.+26     	; 0x1a52 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1a38:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a40:	28 23       	and	r18, r24
    1a42:	39 23       	and	r19, r25
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	9d 81       	ldd	r25, Y+5	; 0x05
    1a48:	28 17       	cp	r18, r24
    1a4a:	39 07       	cpc	r19, r25
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a54:	26 96       	adiw	r28, 0x06	; 6
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <pvPortMalloc+0x6>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <pvPortMalloc+0x8>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1a76:	1a 82       	std	Y+2, r1	; 0x02
    1a78:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1a7a:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1a7e:	80 91 b0 00 	lds	r24, 0x00B0
    1a82:	90 91 b1 00 	lds	r25, 0x00B1
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	31 f4       	brne	.+12     	; 0x1a96 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1a8a:	83 eb       	ldi	r24, 0xB3	; 179
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	90 93 b1 00 	sts	0x00B1, r25
    1a92:	80 93 b0 00 	sts	0x00B0, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1a96:	80 91 ae 00 	lds	r24, 0x00AE
    1a9a:	90 91 af 00 	lds	r25, 0x00AF
    1a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa2:	82 0f       	add	r24, r18
    1aa4:	93 1f       	adc	r25, r19
    1aa6:	25 e0       	ldi	r18, 0x05	; 5
    1aa8:	8b 3d       	cpi	r24, 0xDB	; 219
    1aaa:	92 07       	cpc	r25, r18
    1aac:	38 f5       	brcc	.+78     	; 0x1afc <pvPortMalloc+0x96>
    1aae:	20 91 ae 00 	lds	r18, 0x00AE
    1ab2:	30 91 af 00 	lds	r19, 0x00AF
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	28 0f       	add	r18, r24
    1abc:	39 1f       	adc	r19, r25
    1abe:	80 91 ae 00 	lds	r24, 0x00AE
    1ac2:	90 91 af 00 	lds	r25, 0x00AF
    1ac6:	82 17       	cp	r24, r18
    1ac8:	93 07       	cpc	r25, r19
    1aca:	c0 f4       	brcc	.+48     	; 0x1afc <pvPortMalloc+0x96>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1acc:	20 91 b0 00 	lds	r18, 0x00B0
    1ad0:	30 91 b1 00 	lds	r19, 0x00B1
    1ad4:	80 91 ae 00 	lds	r24, 0x00AE
    1ad8:	90 91 af 00 	lds	r25, 0x00AF
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1ae4:	20 91 ae 00 	lds	r18, 0x00AE
    1ae8:	30 91 af 00 	lds	r19, 0x00AF
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	90 93 af 00 	sts	0x00AF, r25
    1af8:	80 93 ae 00 	sts	0x00AE, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1afc:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <vPortFree+0x6>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    1b32:	10 92 af 00 	sts	0x00AF, r1
    1b36:	10 92 ae 00 	sts	0x00AE, r1
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    1b48:	20 91 ae 00 	lds	r18, 0x00AE
    1b4c:	30 91 af 00 	lds	r19, 0x00AF
    1b50:	8b ed       	ldi	r24, 0xDB	; 219
    1b52:	95 e0       	ldi	r25, 0x05	; 5
    1b54:	82 1b       	sub	r24, r18
    1b56:	93 0b       	sbc	r25, r19
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <KeyPad_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_PORT_DIR = (0b11100000u);
    1b66:	e4 e3       	ldi	r30, 0x34	; 52
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 ee       	ldi	r24, 0xE0	; 224
    1b6c:	80 83       	st	Z, r24
	KEYPAD_PORT_OUT = (~(0b11100000u));
    1b6e:	e5 e3       	ldi	r30, 0x35	; 53
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	8f e1       	ldi	r24, 0x1F	; 31
    1b74:	80 83       	st	Z, r24
}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <KeyPad_getPressedKey>:



uint8 KeyPad_getPressedKey(void)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	0f 92       	push	r0
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
	for(col=0;col<N_col;col++) /* loop for columns */
    1b86:	10 92 00 07 	sts	0x0700, r1
    1b8a:	56 c0       	rjmp	.+172    	; 0x1c38 <KeyPad_getPressedKey+0xbc>
	{
		/*
		 * each time only one of the column pins will be output and
		 * the rest will be input pins include the row pins
		 */
		KEYPAD_PORT_DIR = (0b00100000<<col);
    1b8c:	e4 e3       	ldi	r30, 0x34	; 52
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 91 00 07 	lds	r24, 0x0700
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	80 e2       	ldi	r24, 0x20	; 32
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <KeyPad_getPressedKey+0x26>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	2a 95       	dec	r18
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <KeyPad_getPressedKey+0x22>
    1ba6:	80 83       	st	Z, r24

		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(0b00100000<<col));
    1ba8:	e5 e3       	ldi	r30, 0x35	; 53
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 91 00 07 	lds	r24, 0x0700
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	80 e2       	ldi	r24, 0x20	; 32
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <KeyPad_getPressedKey+0x44>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <KeyPad_getPressedKey+0x40>
    1bc4:	80 95       	com	r24
    1bc6:	80 83       	st	Z, r24
		for(row=2;row<5;row++) /* loop for rows */
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	80 93 01 07 	sts	0x0701, r24
    1bce:	2b c0       	rjmp	.+86     	; 0x1c26 <KeyPad_getPressedKey+0xaa>
		{
			if(Get_Bit(KEYPAD_PORT_IN,row)==0) /* if the switch is press in this row */
    1bd0:	e3 e3       	ldi	r30, 0x33	; 51
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	80 91 01 07 	lds	r24, 0x0701
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a9 01       	movw	r20, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <KeyPad_getPressedKey+0x6e>
    1be6:	55 95       	asr	r21
    1be8:	47 95       	ror	r20
    1bea:	8a 95       	dec	r24
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <KeyPad_getPressedKey+0x6a>
    1bee:	ca 01       	movw	r24, r20
    1bf0:	81 70       	andi	r24, 0x01	; 1
    1bf2:	90 70       	andi	r25, 0x00	; 0
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	91 f4       	brne	.+36     	; 0x1c1c <KeyPad_getPressedKey+0xa0>
				return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 4 && N_row == 4)
				return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 3 && N_row == 3)
				//while(Get_Bit(KEYPAD_PORT_IN,row)==0);
				return KeyPad_3x3_adjustKeyNumber(3*(row-2)+col+1);
    1bf8:	80 91 01 07 	lds	r24, 0x0701
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	c9 01       	movw	r24, r18
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	82 0f       	add	r24, r18
    1c08:	93 1f       	adc	r25, r19
    1c0a:	98 2f       	mov	r25, r24
    1c0c:	80 91 00 07 	lds	r24, 0x0700
    1c10:	89 0f       	add	r24, r25
    1c12:	85 50       	subi	r24, 0x05	; 5
    1c14:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <KeyPad_3x3_adjustKeyNumber>
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	15 c0       	rjmp	.+42     	; 0x1c46 <KeyPad_getPressedKey+0xca>
		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(0b00100000<<col));
		for(row=2;row<5;row++) /* loop for rows */
    1c1c:	80 91 01 07 	lds	r24, 0x0701
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 01 07 	sts	0x0701, r24
    1c26:	80 91 01 07 	lds	r24, 0x0701
    1c2a:	85 30       	cpi	r24, 0x05	; 5
    1c2c:	88 f2       	brcs	.-94     	; 0x1bd0 <KeyPad_getPressedKey+0x54>



uint8 KeyPad_getPressedKey(void)
{
	for(col=0;col<N_col;col++) /* loop for columns */
    1c2e:	80 91 00 07 	lds	r24, 0x0700
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	80 93 00 07 	sts	0x0700, r24
    1c38:	80 91 00 07 	lds	r24, 0x0700
    1c3c:	83 30       	cpi	r24, 0x03	; 3
    1c3e:	08 f4       	brcc	.+2      	; 0x1c42 <KeyPad_getPressedKey+0xc6>
    1c40:	a5 cf       	rjmp	.-182    	; 0x1b8c <KeyPad_getPressedKey+0x10>
				return KeyPad_3x3_adjustKeyNumber(3*(row-2)+col+1);
#endif
			}
		}
	}
	return 'a';
    1c42:	51 e6       	ldi	r21, 0x61	; 97
    1c44:	59 83       	std	Y+1, r21	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <KeyPad_3x3_adjustKeyNumber>:
	}
}
#elif (N_row == 3 && N_col == 3)

static uint8 KeyPad_3x3_adjustKeyNumber(uint8 button_number)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <KeyPad_3x3_adjustKeyNumber+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <KeyPad_3x3_adjustKeyNumber+0x8>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	3c 83       	std	Y+4, r19	; 0x04
    1c66:	2b 83       	std	Y+3, r18	; 0x03
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	85 30       	cpi	r24, 0x05	; 5
    1c6e:	91 05       	cpc	r25, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <KeyPad_3x3_adjustKeyNumber+0x24>
    1c72:	41 c0       	rjmp	.+130    	; 0x1cf6 <KeyPad_3x3_adjustKeyNumber+0xa6>
    1c74:	2b 81       	ldd	r18, Y+3	; 0x03
    1c76:	3c 81       	ldd	r19, Y+4	; 0x04
    1c78:	26 30       	cpi	r18, 0x06	; 6
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	dc f4       	brge	.+54     	; 0x1cb4 <KeyPad_3x3_adjustKeyNumber+0x64>
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	91 05       	cpc	r25, r1
    1c86:	71 f1       	breq	.+92     	; 0x1ce4 <KeyPad_3x3_adjustKeyNumber+0x94>
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	23 30       	cpi	r18, 0x03	; 3
    1c8e:	31 05       	cpc	r19, r1
    1c90:	34 f4       	brge	.+12     	; 0x1c9e <KeyPad_3x3_adjustKeyNumber+0x4e>
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	09 f1       	breq	.+66     	; 0x1cde <KeyPad_3x3_adjustKeyNumber+0x8e>
    1c9c:	3b c0       	rjmp	.+118    	; 0x1d14 <KeyPad_3x3_adjustKeyNumber+0xc4>
    1c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca2:	23 30       	cpi	r18, 0x03	; 3
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	09 f1       	breq	.+66     	; 0x1cea <KeyPad_3x3_adjustKeyNumber+0x9a>
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	91 05       	cpc	r25, r1
    1cb0:	f9 f0       	breq	.+62     	; 0x1cf0 <KeyPad_3x3_adjustKeyNumber+0xa0>
    1cb2:	30 c0       	rjmp	.+96     	; 0x1d14 <KeyPad_3x3_adjustKeyNumber+0xc4>
    1cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb8:	27 30       	cpi	r18, 0x07	; 7
    1cba:	31 05       	cpc	r19, r1
    1cbc:	11 f1       	breq	.+68     	; 0x1d02 <KeyPad_3x3_adjustKeyNumber+0xb2>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	87 30       	cpi	r24, 0x07	; 7
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	d4 f0       	brlt	.+52     	; 0x1cfc <KeyPad_3x3_adjustKeyNumber+0xac>
    1cc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ccc:	28 30       	cpi	r18, 0x08	; 8
    1cce:	31 05       	cpc	r19, r1
    1cd0:	d9 f0       	breq	.+54     	; 0x1d08 <KeyPad_3x3_adjustKeyNumber+0xb8>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	89 30       	cpi	r24, 0x09	; 9
    1cd8:	91 05       	cpc	r25, r1
    1cda:	c9 f0       	breq	.+50     	; 0x1d0e <KeyPad_3x3_adjustKeyNumber+0xbe>
    1cdc:	1b c0       	rjmp	.+54     	; 0x1d14 <KeyPad_3x3_adjustKeyNumber+0xc4>
	{
	case 1: return 1;
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	1a c0       	rjmp	.+52     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 2: return 2;
    1ce4:	22 e0       	ldi	r18, 0x02	; 2
    1ce6:	2a 83       	std	Y+2, r18	; 0x02
    1ce8:	17 c0       	rjmp	.+46     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 3: return 3;
    1cea:	33 e0       	ldi	r19, 0x03	; 3
    1cec:	3a 83       	std	Y+2, r19	; 0x02
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 4: return 4; // ASCII Code of %
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
    1cf4:	11 c0       	rjmp	.+34     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 5: return 5;
    1cf6:	95 e0       	ldi	r25, 0x05	; 5
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	0e c0       	rjmp	.+28     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 6: return 6;
    1cfc:	26 e0       	ldi	r18, 0x06	; 6
    1cfe:	2a 83       	std	Y+2, r18	; 0x02
    1d00:	0b c0       	rjmp	.+22     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 7: return 7;
    1d02:	37 e0       	ldi	r19, 0x07	; 7
    1d04:	3a 83       	std	Y+2, r19	; 0x02
    1d06:	08 c0       	rjmp	.+16     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 8: return 8; /* ASCII Code of '*' */
    1d08:	88 e0       	ldi	r24, 0x08	; 8
    1d0a:	8a 83       	std	Y+2, r24	; 0x02
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 9: return 9;
    1d0e:	99 e0       	ldi	r25, 0x09	; 9
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	default: return button_number;
    1d14:	29 81       	ldd	r18, Y+1	; 0x01
    1d16:	2a 83       	std	Y+2, r18	; 0x02
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <enableTrigger>:
/////////////////////////////////////////////////////////////////////
//	lcd enable triggering function to make lcd aware about command or
//   data changes.
////////////////////////////////////////////////////////////////////
void enableTrigger(void)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	6c 97       	sbiw	r28, 0x1c	; 28
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61

	CLR_BIT(PORTB,2);
    1d3c:	a8 e3       	ldi	r26, 0x38	; 56
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e8 e3       	ldi	r30, 0x38	; 56
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8b 7f       	andi	r24, 0xFB	; 251
    1d48:	8c 93       	st	X, r24
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 e8       	ldi	r26, 0x80	; 128
    1d50:	bf e3       	ldi	r27, 0x3F	; 63
    1d52:	89 8f       	std	Y+25, r24	; 0x19
    1d54:	9a 8f       	std	Y+26, r25	; 0x1a
    1d56:	ab 8f       	std	Y+27, r26	; 0x1b
    1d58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a ef       	ldi	r20, 0xFA	; 250
    1d68:	54 e4       	ldi	r21, 0x44	; 68
    1d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8d 8b       	std	Y+21, r24	; 0x15
    1d74:	9e 8b       	std	Y+22, r25	; 0x16
    1d76:	af 8b       	std	Y+23, r26	; 0x17
    1d78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d80:	98 8d       	ldd	r25, Y+24	; 0x18
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <enableTrigger+0x74>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <enableTrigger+0xf2>
	else if (__tmp > 65535)
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <enableTrigger+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	69 8d       	ldd	r22, Y+25	; 0x19
    1db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9c 8b       	std	Y+20, r25	; 0x14
    1dda:	8b 8b       	std	Y+19, r24	; 0x13
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <enableTrigger+0xd4>
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9a 8b       	std	Y+18, r25	; 0x12
    1de4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de6:	89 89       	ldd	r24, Y+17	; 0x11
    1de8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <enableTrigger+0xc2>
    1dee:	9a 8b       	std	Y+18, r25	; 0x12
    1df0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <enableTrigger+0xb6>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <enableTrigger+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9c 8b       	std	Y+20, r25	; 0x14
    1e18:	8b 8b       	std	Y+19, r24	; 0x13
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	98 8b       	std	Y+16, r25	; 0x10
    1e20:	8f 87       	std	Y+15, r24	; 0x0f
    1e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e24:	98 89       	ldd	r25, Y+16	; 0x10
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <enableTrigger+0xfe>
    1e2a:	98 8b       	std	Y+16, r25	; 0x10
    1e2c:	8f 87       	std	Y+15, r24	; 0x0f
	
	_delay_ms(1);

	SET_BIT(PORTB,2);
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	84 60       	ori	r24, 0x04	; 4
    1e3a:	8c 93       	st	X, r24
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 ec       	ldi	r26, 0xC0	; 192
    1e42:	b0 e4       	ldi	r27, 0x40	; 64
    1e44:	8b 87       	std	Y+11, r24	; 0x0b
    1e46:	9c 87       	std	Y+12, r25	; 0x0c
    1e48:	ad 87       	std	Y+13, r26	; 0x0d
    1e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8f 83       	std	Y+7, r24	; 0x07
    1e66:	98 87       	std	Y+8, r25	; 0x08
    1e68:	a9 87       	std	Y+9, r26	; 0x09
    1e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <enableTrigger+0x166>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <enableTrigger+0x1e4>
	else if (__tmp > 65535)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <enableTrigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <enableTrigger+0x1c6>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <enableTrigger+0x1b4>
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <enableTrigger+0x1a8>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <enableTrigger+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <enableTrigger+0x1f0>
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(6);


}
    1f20:	6c 96       	adiw	r28, 0x1c	; 28
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <lcd_init>:
///////////////////////////////////////////////////////////////////////////////////////
// LCD initialization API : set portB from pinB.4 to pinB.7 as o/p for data and commands 
//							 and pinB.0 to pinB.2 o/p for control pins 
//////////////////////////////////////////////////////////////////////////////////////
void lcd_init(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62

	DDRB=0xff; // init port B as O/P port 
    1f3a:	e7 e3       	ldi	r30, 0x37	; 55
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	80 83       	st	Z, r24
	PORTB=0x04; // activate LCD enable 
    1f42:	e8 e3       	ldi	r30, 0x38	; 56
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	84 e0       	ldi	r24, 0x04	; 4
    1f48:	80 83       	st	Z, r24

	lcd_sendCommand(0x33); // 4-bit mode 
    1f4a:	83 e3       	ldi	r24, 0x33	; 51
    1f4c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>
	lcd_sendCommand (0x32);
    1f50:	82 e3       	ldi	r24, 0x32	; 50
    1f52:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>
	lcd_sendCommand (0x28);
    1f56:	88 e2       	ldi	r24, 0x28	; 40
    1f58:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>



	lcd_sendCommand(0x0c); // turn on lcd 
    1f5c:	8c e0       	ldi	r24, 0x0C	; 12
    1f5e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>

		
}
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <lcd_sendCommand>:


void lcd_sendCommand(unsigned char cmd)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <lcd_sendCommand+0x6>
    1f6e:	0f 92       	push	r0
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char high_nibble , low_nibble ; 		
	
	HIGH_NIBBLE(high_nibble,cmd);
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	80 7f       	andi	r24, 0xF0	; 240
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
	LOW_NIBBLE(low_nibble,cmd);
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	82 95       	swap	r24
    1f80:	80 7f       	andi	r24, 0xF0	; 240
    1f82:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(PORTB,0); // to enable command mode 
    1f84:	a8 e3       	ldi	r26, 0x38	; 56
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e8 e3       	ldi	r30, 0x38	; 56
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8e 7f       	andi	r24, 0xFE	; 254
    1f90:	8c 93       	st	X, r24
	CLR_BIT(PORTB,1); // write signal to lcd 
    1f92:	a8 e3       	ldi	r26, 0x38	; 56
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e8 e3       	ldi	r30, 0x38	; 56
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8d 7f       	andi	r24, 0xFD	; 253
    1f9e:	8c 93       	st	X, r24

	PORTB &=0x0f;
    1fa0:	a8 e3       	ldi	r26, 0x38	; 56
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e8 e3       	ldi	r30, 0x38	; 56
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8f 70       	andi	r24, 0x0F	; 15
    1fac:	8c 93       	st	X, r24
	PORTB |=high_nibble;// to send high nibble command  
    1fae:	a8 e3       	ldi	r26, 0x38	; 56
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e8 e3       	ldi	r30, 0x38	; 56
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	90 81       	ld	r25, Z
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	89 2b       	or	r24, r25
    1fbc:	8c 93       	st	X, r24
	enableTrigger(); // triggre lcd enable 
    1fbe:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <enableTrigger>

	PORTB &=0x0f;
    1fc2:	a8 e3       	ldi	r26, 0x38	; 56
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e8 e3       	ldi	r30, 0x38	; 56
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8f 70       	andi	r24, 0x0F	; 15
    1fce:	8c 93       	st	X, r24
	PORTB |=low_nibble; // to send low nibble command 
    1fd0:	a8 e3       	ldi	r26, 0x38	; 56
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e8 e3       	ldi	r30, 0x38	; 56
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	90 81       	ld	r25, Z
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	89 2b       	or	r24, r25
    1fde:	8c 93       	st	X, r24
	enableTrigger();
    1fe0:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <enableTrigger>

}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <lcd_displayChar>:

void lcd_displayChar (unsigned char data)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <lcd_displayChar+0x6>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char high_nibble , low_nibble ;

	SET_BIT(PORTB,0); //  enable data mode 
    1ffe:	a8 e3       	ldi	r26, 0x38	; 56
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e8 e3       	ldi	r30, 0x38	; 56
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	81 60       	ori	r24, 0x01	; 1
    200a:	8c 93       	st	X, r24
	CLR_BIT(PORTB,1); // activate lcd write 
    200c:	a8 e3       	ldi	r26, 0x38	; 56
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e8 e3       	ldi	r30, 0x38	; 56
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8d 7f       	andi	r24, 0xFD	; 253
    2018:	8c 93       	st	X, r24

	HIGH_NIBBLE(high_nibble,data); // get high nibble data 
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	80 7f       	andi	r24, 0xF0	; 240
    201e:	8a 83       	std	Y+2, r24	; 0x02
	LOW_NIBBLE(low_nibble,data); // get low nibble data 
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	82 95       	swap	r24
    2024:	80 7f       	andi	r24, 0xF0	; 240
    2026:	89 83       	std	Y+1, r24	; 0x01
	
	PORTB &= 0x0f;
    2028:	a8 e3       	ldi	r26, 0x38	; 56
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e8 e3       	ldi	r30, 0x38	; 56
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 70       	andi	r24, 0x0F	; 15
    2034:	8c 93       	st	X, r24
	PORTB |=high_nibble;// to send high nibble data  
    2036:	a8 e3       	ldi	r26, 0x38	; 56
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e8 e3       	ldi	r30, 0x38	; 56
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	90 81       	ld	r25, Z
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	89 2b       	or	r24, r25
    2044:	8c 93       	st	X, r24
	enableTrigger(); // triggre lcd enable 
    2046:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <enableTrigger>
	
	PORTB &=0x0f;
    204a:	a8 e3       	ldi	r26, 0x38	; 56
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e8 e3       	ldi	r30, 0x38	; 56
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8f 70       	andi	r24, 0x0F	; 15
    2056:	8c 93       	st	X, r24
	PORTB |=low_nibble; // to send low nibble data 
    2058:	a8 e3       	ldi	r26, 0x38	; 56
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e8 e3       	ldi	r30, 0x38	; 56
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	90 81       	ld	r25, Z
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	89 2b       	or	r24, r25
    2066:	8c 93       	st	X, r24
	enableTrigger();
    2068:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <enableTrigger>
	

}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <lcd_gotoxy>:


void lcd_gotoxy(unsigned char y , unsigned char x )
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <lcd_gotoxy+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <lcd_gotoxy+0x8>
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	8a 83       	std	Y+2, r24	; 0x02
    2088:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char position = 0x80;
    208a:	80 e8       	ldi	r24, 0x80	; 128
    208c:	89 83       	std	Y+1, r24	; 0x01
	 
	switch(y)
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	3d 83       	std	Y+5, r19	; 0x05
    2096:	2c 83       	std	Y+4, r18	; 0x04
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	91 05       	cpc	r25, r1
    20a0:	d1 f0       	breq	.+52     	; 0x20d6 <lcd_gotoxy+0x5e>
    20a2:	2c 81       	ldd	r18, Y+4	; 0x04
    20a4:	3d 81       	ldd	r19, Y+5	; 0x05
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <lcd_gotoxy+0x3e>
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	61 f0       	breq	.+24     	; 0x20cc <lcd_gotoxy+0x54>
    20b4:	20 c0       	rjmp	.+64     	; 0x20f6 <lcd_gotoxy+0x7e>
    20b6:	2c 81       	ldd	r18, Y+4	; 0x04
    20b8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ba:	22 30       	cpi	r18, 0x02	; 2
    20bc:	31 05       	cpc	r19, r1
    20be:	91 f0       	breq	.+36     	; 0x20e4 <lcd_gotoxy+0x6c>
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	9d 81       	ldd	r25, Y+5	; 0x05
    20c4:	83 30       	cpi	r24, 0x03	; 3
    20c6:	91 05       	cpc	r25, r1
    20c8:	91 f0       	breq	.+36     	; 0x20ee <lcd_gotoxy+0x76>
    20ca:	15 c0       	rjmp	.+42     	; 0x20f6 <lcd_gotoxy+0x7e>
	{
		case 0:

			position=position+x;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9b 81       	ldd	r25, Y+3	; 0x03
    20d0:	89 0f       	add	r24, r25
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	10 c0       	rjmp	.+32     	; 0x20f6 <lcd_gotoxy+0x7e>
					
		break;

		case 1:

			position=0xc0;
    20d6:	80 ec       	ldi	r24, 0xC0	; 192
    20d8:	89 83       	std	Y+1, r24	; 0x01
			position=position+x;
    20da:	99 81       	ldd	r25, Y+1	; 0x01
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	89 0f       	add	r24, r25
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	09 c0       	rjmp	.+18     	; 0x20f6 <lcd_gotoxy+0x7e>

		break;

		case 2:

			position=position+x;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	89 0f       	add	r24, r25
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <lcd_gotoxy+0x7e>

		break;

		case 3:
			position=position+x;
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	89 0f       	add	r24, r25
    20f4:	89 83       	std	Y+1, r24	; 0x01
		break;
	
	
	}
	
	lcd_sendCommand(position); 	
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>


}
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <lcd_clrScreen>:


void lcd_clrScreen(void)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62

	lcd_sendCommand(0x01);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>


}
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <lcd_dispString>:


void lcd_dispString(char * ptr)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <lcd_dispString+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	0a c0       	rjmp	.+20     	; 0x2144 <lcd_dispString+0x24>

	while(* ptr!= '\0')
	{
		lcd_displayChar(* ptr);
    2130:	e9 81       	ldd	r30, Y+1	; 0x01
    2132:	fa 81       	ldd	r31, Y+2	; 0x02
    2134:	80 81       	ld	r24, Z
    2136:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <lcd_displayChar>
		ptr++;
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01


void lcd_dispString(char * ptr)
{

	while(* ptr!= '\0')
    2144:	e9 81       	ldd	r30, Y+1	; 0x01
    2146:	fa 81       	ldd	r31, Y+2	; 0x02
    2148:	80 81       	ld	r24, Z
    214a:	88 23       	and	r24, r24
    214c:	89 f7       	brne	.-30     	; 0x2130 <lcd_dispString+0x10>
		lcd_displayChar(* ptr);
		ptr++;
	
	}

}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <lcd_disp_string_xy>:

void lcd_disp_string_xy(char * ptr , int y , int x)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <lcd_disp_string_xy+0x6>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <lcd_disp_string_xy+0x8>
    2160:	00 d0       	rcall	.+0      	; 0x2162 <lcd_disp_string_xy+0xa>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	7c 83       	std	Y+4, r23	; 0x04
    216c:	6b 83       	std	Y+3, r22	; 0x03
    216e:	5e 83       	std	Y+6, r21	; 0x06
    2170:	4d 83       	std	Y+5, r20	; 0x05

	lcd_gotoxy(y,x);
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9d 81       	ldd	r25, Y+5	; 0x05
    2176:	69 2f       	mov	r22, r25
    2178:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_gotoxy>
	lcd_dispString(ptr);
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	0e 94 90 10 	call	0x2120	; 0x2120 <lcd_dispString>

	


}
    2184:	26 96       	adiw	r28, 0x06	; 6
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LED_Init>:
 */

#include "led.h"

void LED_Init(void)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PinA2,OUTPUT);
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_SetPinDirection>
	DIO_WritePin(PinA2,LOW);
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
	DIO_SetPinDirection(PinA3,OUTPUT);
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_SetPinDirection>
	DIO_WritePin(PinA3,LOW);
    21b6:	83 e0       	ldi	r24, 0x03	; 3
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
}
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <LED_Toggle>:

void LED_Toggle(void)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	PORTA^=(1<<2);
    21cc:	ab e3       	ldi	r26, 0x3B	; 59
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	eb e3       	ldi	r30, 0x3B	; 59
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	90 81       	ld	r25, Z
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	89 27       	eor	r24, r25
    21da:	8c 93       	st	X, r24
}
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LED_Write>:
void LED_Write(uint8 led_num,uint8 state)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <LED_Write+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LED_Write+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	6a 83       	std	Y+2, r22	; 0x02
	switch (led_num)
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	3c 83       	std	Y+4, r19	; 0x04
    21fa:	2b 83       	std	Y+3, r18	; 0x03
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	91 05       	cpc	r25, r1
    2204:	31 f0       	breq	.+12     	; 0x2212 <LED_Write+0x30>
    2206:	2b 81       	ldd	r18, Y+3	; 0x03
    2208:	3c 81       	ldd	r19, Y+4	; 0x04
    220a:	22 30       	cpi	r18, 0x02	; 2
    220c:	31 05       	cpc	r19, r1
    220e:	71 f0       	breq	.+28     	; 0x222c <LED_Write+0x4a>
    2210:	19 c0       	rjmp	.+50     	; 0x2244 <LED_Write+0x62>
	{
	case 1:
		if(state==1)
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	29 f4       	brne	.+10     	; 0x2222 <LED_Write+0x40>
		{
		DIO_WritePin(PinA2,HIGH);
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	61 e0       	ldi	r22, 0x01	; 1
    221c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
    2220:	11 c0       	rjmp	.+34     	; 0x2244 <LED_Write+0x62>
		}
		else
		{
			DIO_WritePin(PinA2,LOW);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
    222a:	0c c0       	rjmp	.+24     	; 0x2244 <LED_Write+0x62>
		}
		break;
	case 2:
		if(state==1)
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	29 f4       	brne	.+10     	; 0x223c <LED_Write+0x5a>
		{
			DIO_WritePin(PinA3,HIGH);
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
    223a:	04 c0       	rjmp	.+8      	; 0x2244 <LED_Write+0x62>
		}
		else
		{
			DIO_WritePin(PinA3,HIGH);
    223c:	83 e0       	ldi	r24, 0x03	; 3
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
		}
		break;
	}
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <vListInitialise+0x6>
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	03 96       	adiw	r24, 0x03	; 3
    2266:	e9 81       	ldd	r30, Y+1	; 0x01
    2268:	fa 81       	ldd	r31, Y+2	; 0x02
    226a:	92 83       	std	Z+2, r25	; 0x02
    226c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    226e:	e9 81       	ldd	r30, Y+1	; 0x01
    2270:	fa 81       	ldd	r31, Y+2	; 0x02
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	9f ef       	ldi	r25, 0xFF	; 255
    2276:	94 83       	std	Z+4, r25	; 0x04
    2278:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	03 96       	adiw	r24, 0x03	; 3
    2280:	e9 81       	ldd	r30, Y+1	; 0x01
    2282:	fa 81       	ldd	r31, Y+2	; 0x02
    2284:	96 83       	std	Z+6, r25	; 0x06
    2286:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	03 96       	adiw	r24, 0x03	; 3
    228e:	e9 81       	ldd	r30, Y+1	; 0x01
    2290:	fa 81       	ldd	r31, Y+2	; 0x02
    2292:	90 87       	std	Z+8, r25	; 0x08
    2294:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <vListInitialiseItem+0x6>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    22b4:	e9 81       	ldd	r30, Y+1	; 0x01
    22b6:	fa 81       	ldd	r31, Y+2	; 0x02
    22b8:	11 86       	std	Z+9, r1	; 0x09
    22ba:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <vListInsertEnd+0x6>
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <vListInsertEnd+0x8>
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <vListInsertEnd+0xa>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03
    22d8:	7e 83       	std	Y+6, r23	; 0x06
    22da:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    22dc:	eb 81       	ldd	r30, Y+3	; 0x03
    22de:	fc 81       	ldd	r31, Y+4	; 0x04
    22e0:	81 81       	ldd	r24, Z+1	; 0x01
    22e2:	92 81       	ldd	r25, Z+2	; 0x02
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    22e8:	ed 81       	ldd	r30, Y+5	; 0x05
    22ea:	fe 81       	ldd	r31, Y+6	; 0x06
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	93 83       	std	Z+3, r25	; 0x03
    22f2:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    22f4:	e9 81       	ldd	r30, Y+1	; 0x01
    22f6:	fa 81       	ldd	r31, Y+2	; 0x02
    22f8:	84 81       	ldd	r24, Z+4	; 0x04
    22fa:	95 81       	ldd	r25, Z+5	; 0x05
    22fc:	ed 81       	ldd	r30, Y+5	; 0x05
    22fe:	fe 81       	ldd	r31, Y+6	; 0x06
    2300:	95 83       	std	Z+5, r25	; 0x05
    2302:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2304:	e9 81       	ldd	r30, Y+1	; 0x01
    2306:	fa 81       	ldd	r31, Y+2	; 0x02
    2308:	04 80       	ldd	r0, Z+4	; 0x04
    230a:	f5 81       	ldd	r31, Z+5	; 0x05
    230c:	e0 2d       	mov	r30, r0
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	93 83       	std	Z+3, r25	; 0x03
    2314:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    2316:	e9 81       	ldd	r30, Y+1	; 0x01
    2318:	fa 81       	ldd	r31, Y+2	; 0x02
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	95 83       	std	Z+5, r25	; 0x05
    2320:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    2322:	ed 81       	ldd	r30, Y+5	; 0x05
    2324:	fe 81       	ldd	r31, Y+6	; 0x06
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	91 87       	std	Z+9, r25	; 0x09
    232c:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    232e:	eb 81       	ldd	r30, Y+3	; 0x03
    2330:	fc 81       	ldd	r31, Y+4	; 0x04
    2332:	80 81       	ld	r24, Z
    2334:	8f 5f       	subi	r24, 0xFF	; 255
    2336:	eb 81       	ldd	r30, Y+3	; 0x03
    2338:	fc 81       	ldd	r31, Y+4	; 0x04
    233a:	80 83       	st	Z, r24
}
    233c:	26 96       	adiw	r28, 0x06	; 6
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	28 97       	sbiw	r28, 0x08	; 8
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	78 87       	std	Y+8, r23	; 0x08
    2368:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    236a:	ef 81       	ldd	r30, Y+7	; 0x07
    236c:	f8 85       	ldd	r31, Y+8	; 0x08
    236e:	80 81       	ld	r24, Z
    2370:	91 81       	ldd	r25, Z+1	; 0x01
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	2f ef       	ldi	r18, 0xFF	; 255
    237c:	8f 3f       	cpi	r24, 0xFF	; 255
    237e:	92 07       	cpc	r25, r18
    2380:	39 f4       	brne	.+14     	; 0x2390 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2382:	ed 81       	ldd	r30, Y+5	; 0x05
    2384:	fe 81       	ldd	r31, Y+6	; 0x06
    2386:	87 81       	ldd	r24, Z+7	; 0x07
    2388:	90 85       	ldd	r25, Z+8	; 0x08
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
    238e:	18 c0       	rjmp	.+48     	; 0x23c0 <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	03 96       	adiw	r24, 0x03	; 3
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	8b 83       	std	Y+3, r24	; 0x03
    239a:	06 c0       	rjmp	.+12     	; 0x23a8 <vListInsert+0x5a>
    239c:	eb 81       	ldd	r30, Y+3	; 0x03
    239e:	fc 81       	ldd	r31, Y+4	; 0x04
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
    23a8:	eb 81       	ldd	r30, Y+3	; 0x03
    23aa:	fc 81       	ldd	r31, Y+4	; 0x04
    23ac:	02 80       	ldd	r0, Z+2	; 0x02
    23ae:	f3 81       	ldd	r31, Z+3	; 0x03
    23b0:	e0 2d       	mov	r30, r0
    23b2:	20 81       	ld	r18, Z
    23b4:	31 81       	ldd	r19, Z+1	; 0x01
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	82 17       	cp	r24, r18
    23bc:	93 07       	cpc	r25, r19
    23be:	70 f7       	brcc	.-36     	; 0x239c <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    23c0:	eb 81       	ldd	r30, Y+3	; 0x03
    23c2:	fc 81       	ldd	r31, Y+4	; 0x04
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	ef 81       	ldd	r30, Y+7	; 0x07
    23ca:	f8 85       	ldd	r31, Y+8	; 0x08
    23cc:	93 83       	std	Z+3, r25	; 0x03
    23ce:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    23d0:	ef 81       	ldd	r30, Y+7	; 0x07
    23d2:	f8 85       	ldd	r31, Y+8	; 0x08
    23d4:	02 80       	ldd	r0, Z+2	; 0x02
    23d6:	f3 81       	ldd	r31, Z+3	; 0x03
    23d8:	e0 2d       	mov	r30, r0
    23da:	8f 81       	ldd	r24, Y+7	; 0x07
    23dc:	98 85       	ldd	r25, Y+8	; 0x08
    23de:	95 83       	std	Z+5, r25	; 0x05
    23e0:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    23e2:	ef 81       	ldd	r30, Y+7	; 0x07
    23e4:	f8 85       	ldd	r31, Y+8	; 0x08
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	95 83       	std	Z+5, r25	; 0x05
    23ec:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    23ee:	eb 81       	ldd	r30, Y+3	; 0x03
    23f0:	fc 81       	ldd	r31, Y+4	; 0x04
    23f2:	8f 81       	ldd	r24, Y+7	; 0x07
    23f4:	98 85       	ldd	r25, Y+8	; 0x08
    23f6:	93 83       	std	Z+3, r25	; 0x03
    23f8:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    23fa:	ef 81       	ldd	r30, Y+7	; 0x07
    23fc:	f8 85       	ldd	r31, Y+8	; 0x08
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	91 87       	std	Z+9, r25	; 0x09
    2404:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2406:	ed 81       	ldd	r30, Y+5	; 0x05
    2408:	fe 81       	ldd	r31, Y+6	; 0x06
    240a:	80 81       	ld	r24, Z
    240c:	8f 5f       	subi	r24, 0xFF	; 255
    240e:	ed 81       	ldd	r30, Y+5	; 0x05
    2410:	fe 81       	ldd	r31, Y+6	; 0x06
    2412:	80 83       	st	Z, r24
}
    2414:	28 96       	adiw	r28, 0x08	; 8
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <uxListRemove+0x6>
    242c:	00 d0       	rcall	.+0      	; 0x242e <uxListRemove+0x8>
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	9c 83       	std	Y+4, r25	; 0x04
    2434:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2436:	eb 81       	ldd	r30, Y+3	; 0x03
    2438:	fc 81       	ldd	r31, Y+4	; 0x04
    243a:	80 85       	ldd	r24, Z+8	; 0x08
    243c:	91 85       	ldd	r25, Z+9	; 0x09
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2442:	eb 81       	ldd	r30, Y+3	; 0x03
    2444:	fc 81       	ldd	r31, Y+4	; 0x04
    2446:	a2 81       	ldd	r26, Z+2	; 0x02
    2448:	b3 81       	ldd	r27, Z+3	; 0x03
    244a:	eb 81       	ldd	r30, Y+3	; 0x03
    244c:	fc 81       	ldd	r31, Y+4	; 0x04
    244e:	84 81       	ldd	r24, Z+4	; 0x04
    2450:	95 81       	ldd	r25, Z+5	; 0x05
    2452:	15 96       	adiw	r26, 0x05	; 5
    2454:	9c 93       	st	X, r25
    2456:	8e 93       	st	-X, r24
    2458:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    245a:	eb 81       	ldd	r30, Y+3	; 0x03
    245c:	fc 81       	ldd	r31, Y+4	; 0x04
    245e:	a4 81       	ldd	r26, Z+4	; 0x04
    2460:	b5 81       	ldd	r27, Z+5	; 0x05
    2462:	eb 81       	ldd	r30, Y+3	; 0x03
    2464:	fc 81       	ldd	r31, Y+4	; 0x04
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	13 96       	adiw	r26, 0x03	; 3
    246c:	9c 93       	st	X, r25
    246e:	8e 93       	st	-X, r24
    2470:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2472:	e9 81       	ldd	r30, Y+1	; 0x01
    2474:	fa 81       	ldd	r31, Y+2	; 0x02
    2476:	21 81       	ldd	r18, Z+1	; 0x01
    2478:	32 81       	ldd	r19, Z+2	; 0x02
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	28 17       	cp	r18, r24
    2480:	39 07       	cpc	r19, r25
    2482:	41 f4       	brne	.+16     	; 0x2494 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2484:	eb 81       	ldd	r30, Y+3	; 0x03
    2486:	fc 81       	ldd	r31, Y+4	; 0x04
    2488:	84 81       	ldd	r24, Z+4	; 0x04
    248a:	95 81       	ldd	r25, Z+5	; 0x05
    248c:	e9 81       	ldd	r30, Y+1	; 0x01
    248e:	fa 81       	ldd	r31, Y+2	; 0x02
    2490:	92 83       	std	Z+2, r25	; 0x02
    2492:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    2494:	eb 81       	ldd	r30, Y+3	; 0x03
    2496:	fc 81       	ldd	r31, Y+4	; 0x04
    2498:	11 86       	std	Z+9, r1	; 0x09
    249a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    249c:	e9 81       	ldd	r30, Y+1	; 0x01
    249e:	fa 81       	ldd	r31, Y+2	; 0x02
    24a0:	80 81       	ld	r24, Z
    24a2:	81 50       	subi	r24, 0x01	; 1
    24a4:	e9 81       	ldd	r30, Y+1	; 0x01
    24a6:	fa 81       	ldd	r31, Y+2	; 0x02
    24a8:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    24aa:	e9 81       	ldd	r30, Y+1	; 0x01
    24ac:	fa 81       	ldd	r31, Y+2	; 0x02
    24ae:	80 81       	ld	r24, Z
}
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <main>:
void A(void);
void C(void);
void D(void);

int main(void)
{
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate((TaskFunction_t)InitTask,"init",200,NULL,5,&init_handel);
    24cc:	84 eb       	ldi	r24, 0xB4	; 180
    24ce:	92 e1       	ldi	r25, 0x12	; 18
    24d0:	20 e6       	ldi	r18, 0x60	; 96
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	ef e8       	ldi	r30, 0x8F	; 143
    24d6:	f6 e0       	ldi	r31, 0x06	; 6
    24d8:	b9 01       	movw	r22, r18
    24da:	48 ec       	ldi	r20, 0xC8	; 200
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	05 e0       	ldi	r16, 0x05	; 5
    24e4:	7f 01       	movw	r14, r30
    24e6:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <xTaskCreate>
	xTaskCreate((TaskFunction_t)B,"A",100,NULL,5,&B_handel);
    24ea:	84 e2       	ldi	r24, 0x24	; 36
    24ec:	93 e1       	ldi	r25, 0x13	; 19
    24ee:	25 e6       	ldi	r18, 0x65	; 101
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	e3 e9       	ldi	r30, 0x93	; 147
    24f4:	f6 e0       	ldi	r31, 0x06	; 6
    24f6:	b9 01       	movw	r22, r18
    24f8:	44 e6       	ldi	r20, 0x64	; 100
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	05 e0       	ldi	r16, 0x05	; 5
    2502:	7f 01       	movw	r14, r30
    2504:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <xTaskCreate>
	xTaskCreate((TaskFunction_t)A,"B",100,NULL,4,&A_handel);
    2508:	83 ef       	ldi	r24, 0xF3	; 243
    250a:	92 e1       	ldi	r25, 0x12	; 18
    250c:	27 e6       	ldi	r18, 0x67	; 103
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	e1 e9       	ldi	r30, 0x91	; 145
    2512:	f6 e0       	ldi	r31, 0x06	; 6
    2514:	b9 01       	movw	r22, r18
    2516:	44 e6       	ldi	r20, 0x64	; 100
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	04 e0       	ldi	r16, 0x04	; 4
    2520:	7f 01       	movw	r14, r30
    2522:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <xTaskCreate>
	xTaskCreate((TaskFunction_t)C,"C",100,NULL,5,&C_handel);
    2526:	85 e5       	ldi	r24, 0x55	; 85
    2528:	93 e1       	ldi	r25, 0x13	; 19
    252a:	29 e6       	ldi	r18, 0x69	; 105
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	e5 e9       	ldi	r30, 0x95	; 149
    2530:	f6 e0       	ldi	r31, 0x06	; 6
    2532:	b9 01       	movw	r22, r18
    2534:	44 e6       	ldi	r20, 0x64	; 100
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	05 e0       	ldi	r16, 0x05	; 5
    253e:	7f 01       	movw	r14, r30
    2540:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <xTaskCreate>
	xTaskCreate((TaskFunction_t)D,"D",100,NULL,4,&D_handel);
    2544:	8d e7       	ldi	r24, 0x7D	; 125
    2546:	93 e1       	ldi	r25, 0x13	; 19
    2548:	2b e6       	ldi	r18, 0x6B	; 107
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	e7 e9       	ldi	r30, 0x97	; 151
    254e:	f6 e0       	ldi	r31, 0x06	; 6
    2550:	b9 01       	movw	r22, r18
    2552:	44 e6       	ldi	r20, 0x64	; 100
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	04 e0       	ldi	r16, 0x04	; 4
    255c:	7f 01       	movw	r14, r30
    255e:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <xTaskCreate>
	//	LED_Write(1,HIGH);
	/* Start Scheduler */
	vTaskStartScheduler();
    2562:	0e 94 27 29 	call	0x524e	; 0x524e <vTaskStartScheduler>
    2566:	ff cf       	rjmp	.-2      	; 0x2566 <main+0xa8>

00002568 <InitTask>:

	}
	return 0;
}
void InitTask(void)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
	for(;;)
	{
		LED_Init();
    2570:	0e 94 cb 10 	call	0x2196	; 0x2196 <LED_Init>
		BUTTON_Init(2);
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	0e 94 ac 09 	call	0x1358	; 0x1358 <BUTTON_Init>
		vTaskDelay(10);
    257a:	8a e0       	ldi	r24, 0x0A	; 10
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
		BUTTON_Init(1);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	0e 94 ac 09 	call	0x1358	; 0x1358 <BUTTON_Init>
		vTaskDelay(10);
    2588:	8a e0       	ldi	r24, 0x0A	; 10
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
		lcd_init();
    2590:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <lcd_init>
		vTaskDelay(10);
    2594:	8a e0       	ldi	r24, 0x0A	; 10
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
		/* Attempt to create a semaphore. */
		xSemaphore2 = xSemaphoreCreateBinary();
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	43 e0       	ldi	r20, 0x03	; 3
    25a2:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xQueueGenericCreate>
    25a6:	90 93 05 07 	sts	0x0705, r25
    25aa:	80 93 04 07 	sts	0x0704, r24
		xSemaphore1 = xSemaphoreCreateBinary();
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	43 e0       	ldi	r20, 0x03	; 3
    25b4:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xQueueGenericCreate>
    25b8:	90 93 03 07 	sts	0x0703, r25
    25bc:	80 93 02 07 	sts	0x0702, r24
		xSemaphoreCount = xSemaphoreCreateCounting((UBaseType_t)2,(UBaseType_t)0);
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <xQueueCreateCountingSemaphore>
    25c8:	90 93 07 07 	sts	0x0707, r25
    25cc:	80 93 06 07 	sts	0x0706, r24
		vTaskDelay(10);
    25d0:	8a e0       	ldi	r24, 0x0A	; 10
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
		vTaskSuspend(init_handel);
    25d8:	80 91 8f 06 	lds	r24, 0x068F
    25dc:	90 91 90 06 	lds	r25, 0x0690
    25e0:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <vTaskSuspend>
    25e4:	c5 cf       	rjmp	.-118    	; 0x2570 <InitTask+0x8>

000025e6 <A>:
	}
}
void A(void)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(50);
    25ee:	82 e3       	ldi	r24, 0x32	; 50
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	for(;;)
	{
		if(!BUTTON_GitButtonState(1))
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	0e 94 cd 09 	call	0x139a	; 0x139a <BUTTON_GitButtonState>
    25fc:	88 23       	and	r24, r24
    25fe:	f9 f4       	brne	.+62     	; 0x263e <A+0x58>
		{
			vTaskDelay(10);
    2600:	8a e0       	ldi	r24, 0x0A	; 10
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
			if(!BUTTON_GitButtonState(1))
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	0e 94 cd 09 	call	0x139a	; 0x139a <BUTTON_GitButtonState>
    260e:	88 23       	and	r24, r24
    2610:	b1 f4       	brne	.+44     	; 0x263e <A+0x58>
			{
				xSemaphoreGive( xSemaphore1 );
    2612:	80 91 02 07 	lds	r24, 0x0702
    2616:	90 91 03 07 	lds	r25, 0x0703
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	70 e0       	ldi	r23, 0x00	; 0
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	0e 94 d6 17 	call	0x2fac	; 0x2fac <xQueueGenericSend>
				xSemaphoreGive (xSemaphoreCount);
    2628:	80 91 06 07 	lds	r24, 0x0706
    262c:	90 91 07 07 	lds	r25, 0x0707
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	0e 94 d6 17 	call	0x2fac	; 0x2fac <xQueueGenericSend>
				//				vTaskDelay(1);
			}
		}
		vTaskDelay(10);
    263e:	8a e0       	ldi	r24, 0x0A	; 10
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
    2646:	d7 cf       	rjmp	.-82     	; 0x25f6 <A+0x10>

00002648 <B>:
	}
}
void B(void)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(50);
    2650:	82 e3       	ldi	r24, 0x32	; 50
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	for(;;)
	{
		if(!BUTTON_GitButtonState(2))
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	0e 94 cd 09 	call	0x139a	; 0x139a <BUTTON_GitButtonState>
    265e:	88 23       	and	r24, r24
    2660:	f9 f4       	brne	.+62     	; 0x26a0 <B+0x58>
		{
			vTaskDelay(10);
    2662:	8a e0       	ldi	r24, 0x0A	; 10
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
			if(!BUTTON_GitButtonState(2))
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	0e 94 cd 09 	call	0x139a	; 0x139a <BUTTON_GitButtonState>
    2670:	88 23       	and	r24, r24
    2672:	b1 f4       	brne	.+44     	; 0x26a0 <B+0x58>
			{
				xSemaphoreGive( xSemaphore2 );
    2674:	80 91 04 07 	lds	r24, 0x0704
    2678:	90 91 05 07 	lds	r25, 0x0705
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	0e 94 d6 17 	call	0x2fac	; 0x2fac <xQueueGenericSend>
				xSemaphoreGive (xSemaphoreCount);
    268a:	80 91 06 07 	lds	r24, 0x0706
    268e:	90 91 07 07 	lds	r25, 0x0707
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <xQueueGenericSend>
				//				vTaskDelay(1);
			}
		}
		vTaskDelay(10);
    26a0:	8a e0       	ldi	r24, 0x0A	; 10
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
    26a8:	d7 cf       	rjmp	.-82     	; 0x2658 <B+0x10>

000026aa <C>:
	}
}
void C(void)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(50);
    26b2:	82 e3       	ldi	r24, 0x32	; 50
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	for(;;)
	{
		if (xSemaphoreTake(xSemaphoreCount,0) == pdTRUE)
    26ba:	80 91 06 07 	lds	r24, 0x0706
    26be:	90 91 07 07 	lds	r25, 0x0707
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	0e 94 d6 19 	call	0x33ac	; 0x33ac <xQueueSemaphoreTake>
    26ca:	81 30       	cpi	r24, 0x01	; 1
    26cc:	69 f4       	brne	.+26     	; 0x26e8 <C+0x3e>
		{
			LED_Write(1, HIGH);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LED_Write>
			xSemaphoreTake(xSemaphoreCount,0);
    26d6:	80 91 06 07 	lds	r24, 0x0706
    26da:	90 91 07 07 	lds	r25, 0x0707
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	0e 94 d6 19 	call	0x33ac	; 0x33ac <xQueueSemaphoreTake>
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <C+0x46>
		}
		else
		{
			LED_Write(1, LOW);
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LED_Write>
		}
		vTaskDelay(20);
    26f0:	84 e1       	ldi	r24, 0x14	; 20
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
    26f8:	e0 cf       	rjmp	.-64     	; 0x26ba <C+0x10>

000026fa <D>:
	}
}
void D(void)
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(50);
    2702:	82 e3       	ldi	r24, 0x32	; 50
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
	for(;;)
	{
		if (xSemaphoreTake(xSemaphore1,0) == pdTRUE)
    270a:	80 91 02 07 	lds	r24, 0x0702
    270e:	90 91 03 07 	lds	r25, 0x0703
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	0e 94 d6 19 	call	0x33ac	; 0x33ac <xQueueSemaphoreTake>
    271a:	81 30       	cpi	r24, 0x01	; 1
    271c:	89 f4       	brne	.+34     	; 0x2740 <D+0x46>
		{
			lcd_disp_string_xy("LED ON ",0,0);
    271e:	8d e6       	ldi	r24, 0x6D	; 109
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	0e 94 ac 10 	call	0x2158	; 0x2158 <lcd_disp_string_xy>
			lcd_disp_string_xy("Button one",1,0);
    272e:	85 e7       	ldi	r24, 0x75	; 117
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	70 e0       	ldi	r23, 0x00	; 0
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	0e 94 ac 10 	call	0x2158	; 0x2158 <lcd_disp_string_xy>
    273e:	2b c0       	rjmp	.+86     	; 0x2796 <D+0x9c>
		}
		else if (xSemaphoreTake(xSemaphore2,0) == pdTRUE)
    2740:	80 91 04 07 	lds	r24, 0x0704
    2744:	90 91 05 07 	lds	r25, 0x0705
    2748:	60 e0       	ldi	r22, 0x00	; 0
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	0e 94 d6 19 	call	0x33ac	; 0x33ac <xQueueSemaphoreTake>
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	89 f4       	brne	.+34     	; 0x2776 <D+0x7c>
		{
			lcd_disp_string_xy("LED ON ",0,0);
    2754:	8d e6       	ldi	r24, 0x6D	; 109
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	0e 94 ac 10 	call	0x2158	; 0x2158 <lcd_disp_string_xy>
			lcd_disp_string_xy("Button two",1,0);
    2764:	80 e8       	ldi	r24, 0x80	; 128
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	0e 94 ac 10 	call	0x2158	; 0x2158 <lcd_disp_string_xy>
    2774:	10 c0       	rjmp	.+32     	; 0x2796 <D+0x9c>
		}
		else
		{
			lcd_disp_string_xy("LED OFF",0,0);
    2776:	8b e8       	ldi	r24, 0x8B	; 139
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	0e 94 ac 10 	call	0x2158	; 0x2158 <lcd_disp_string_xy>
			lcd_disp_string_xy("		          ",1,0);
    2786:	83 e9       	ldi	r24, 0x93	; 147
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	61 e0       	ldi	r22, 0x01	; 1
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	0e 94 ac 10 	call	0x2158	; 0x2158 <lcd_disp_string_xy>
		}
		vTaskDelay(100);
    2796:	84 e6       	ldi	r24, 0x64	; 100
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 98 27 	call	0x4f30	; 0x4f30 <vTaskDelay>
    279e:	b5 cf       	rjmp	.-150    	; 0x270a <D+0x10>

000027a0 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	28 97       	sbiw	r28, 0x08	; 8
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	9c 83       	std	Y+4, r25	; 0x04
    27b6:	8b 83       	std	Y+3, r24	; 0x03
    27b8:	7e 83       	std	Y+6, r23	; 0x06
    27ba:	6d 83       	std	Y+5, r22	; 0x05
    27bc:	58 87       	std	Y+8, r21	; 0x08
    27be:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    27c0:	eb 81       	ldd	r30, Y+3	; 0x03
    27c2:	fc 81       	ldd	r31, Y+4	; 0x04
    27c4:	81 e1       	ldi	r24, 0x11	; 17
    27c6:	80 83       	st	Z, r24
	pxTopOfStack--;
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    27d2:	eb 81       	ldd	r30, Y+3	; 0x03
    27d4:	fc 81       	ldd	r31, Y+4	; 0x04
    27d6:	82 e2       	ldi	r24, 0x22	; 34
    27d8:	80 83       	st	Z, r24
	pxTopOfStack--;
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	9c 81       	ldd	r25, Y+4	; 0x04
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    27e4:	eb 81       	ldd	r30, Y+3	; 0x03
    27e6:	fc 81       	ldd	r31, Y+4	; 0x04
    27e8:	83 e3       	ldi	r24, 0x33	; 51
    27ea:	80 83       	st	Z, r24
	pxTopOfStack--;
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	9c 83       	std	Y+4, r25	; 0x04
    27f4:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	eb 81       	ldd	r30, Y+3	; 0x03
    2802:	fc 81       	ldd	r31, Y+4	; 0x04
    2804:	80 83       	st	Z, r24
	pxTopOfStack--;
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	9a 81       	ldd	r25, Y+2	; 0x02
    2814:	89 2f       	mov	r24, r25
    2816:	99 27       	eor	r25, r25
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	eb 81       	ldd	r30, Y+3	; 0x03
    2820:	fc 81       	ldd	r31, Y+4	; 0x04
    2822:	80 83       	st	Z, r24
	pxTopOfStack--;
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	9c 83       	std	Y+4, r25	; 0x04
    282c:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    282e:	eb 81       	ldd	r30, Y+3	; 0x03
    2830:	fc 81       	ldd	r31, Y+4	; 0x04
    2832:	10 82       	st	Z, r1
	pxTopOfStack--;
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	9c 81       	ldd	r25, Y+4	; 0x04
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    283e:	eb 81       	ldd	r30, Y+3	; 0x03
    2840:	fc 81       	ldd	r31, Y+4	; 0x04
    2842:	80 e8       	ldi	r24, 0x80	; 128
    2844:	80 83       	st	Z, r24
	pxTopOfStack--;
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	9c 83       	std	Y+4, r25	; 0x04
    284e:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    2850:	eb 81       	ldd	r30, Y+3	; 0x03
    2852:	fc 81       	ldd	r31, Y+4	; 0x04
    2854:	10 82       	st	Z, r1
	pxTopOfStack--;
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	9c 81       	ldd	r25, Y+4	; 0x04
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    2860:	eb 81       	ldd	r30, Y+3	; 0x03
    2862:	fc 81       	ldd	r31, Y+4	; 0x04
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	80 83       	st	Z, r24
	pxTopOfStack--;
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9c 83       	std	Y+4, r25	; 0x04
    2870:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    2872:	eb 81       	ldd	r30, Y+3	; 0x03
    2874:	fc 81       	ldd	r31, Y+4	; 0x04
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	80 83       	st	Z, r24
	pxTopOfStack--;
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	9c 81       	ldd	r25, Y+4	; 0x04
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	9c 83       	std	Y+4, r25	; 0x04
    2882:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    2884:	eb 81       	ldd	r30, Y+3	; 0x03
    2886:	fc 81       	ldd	r31, Y+4	; 0x04
    2888:	84 e0       	ldi	r24, 0x04	; 4
    288a:	80 83       	st	Z, r24
	pxTopOfStack--;
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	9c 83       	std	Y+4, r25	; 0x04
    2894:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    2896:	eb 81       	ldd	r30, Y+3	; 0x03
    2898:	fc 81       	ldd	r31, Y+4	; 0x04
    289a:	85 e0       	ldi	r24, 0x05	; 5
    289c:	80 83       	st	Z, r24
	pxTopOfStack--;
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	9c 83       	std	Y+4, r25	; 0x04
    28a6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    28a8:	eb 81       	ldd	r30, Y+3	; 0x03
    28aa:	fc 81       	ldd	r31, Y+4	; 0x04
    28ac:	86 e0       	ldi	r24, 0x06	; 6
    28ae:	80 83       	st	Z, r24
	pxTopOfStack--;
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	9c 83       	std	Y+4, r25	; 0x04
    28b8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    28ba:	eb 81       	ldd	r30, Y+3	; 0x03
    28bc:	fc 81       	ldd	r31, Y+4	; 0x04
    28be:	87 e0       	ldi	r24, 0x07	; 7
    28c0:	80 83       	st	Z, r24
	pxTopOfStack--;
    28c2:	8b 81       	ldd	r24, Y+3	; 0x03
    28c4:	9c 81       	ldd	r25, Y+4	; 0x04
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	9c 83       	std	Y+4, r25	; 0x04
    28ca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    28cc:	eb 81       	ldd	r30, Y+3	; 0x03
    28ce:	fc 81       	ldd	r31, Y+4	; 0x04
    28d0:	88 e0       	ldi	r24, 0x08	; 8
    28d2:	80 83       	st	Z, r24
	pxTopOfStack--;
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	9c 81       	ldd	r25, Y+4	; 0x04
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    28de:	eb 81       	ldd	r30, Y+3	; 0x03
    28e0:	fc 81       	ldd	r31, Y+4	; 0x04
    28e2:	89 e0       	ldi	r24, 0x09	; 9
    28e4:	80 83       	st	Z, r24
	pxTopOfStack--;
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    28f0:	eb 81       	ldd	r30, Y+3	; 0x03
    28f2:	fc 81       	ldd	r31, Y+4	; 0x04
    28f4:	80 e1       	ldi	r24, 0x10	; 16
    28f6:	80 83       	st	Z, r24
	pxTopOfStack--;
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	9c 83       	std	Y+4, r25	; 0x04
    2900:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    2902:	eb 81       	ldd	r30, Y+3	; 0x03
    2904:	fc 81       	ldd	r31, Y+4	; 0x04
    2906:	81 e1       	ldi	r24, 0x11	; 17
    2908:	80 83       	st	Z, r24
	pxTopOfStack--;
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	9c 81       	ldd	r25, Y+4	; 0x04
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2914:	eb 81       	ldd	r30, Y+3	; 0x03
    2916:	fc 81       	ldd	r31, Y+4	; 0x04
    2918:	82 e1       	ldi	r24, 0x12	; 18
    291a:	80 83       	st	Z, r24
	pxTopOfStack--;
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	9c 83       	std	Y+4, r25	; 0x04
    2924:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    2926:	eb 81       	ldd	r30, Y+3	; 0x03
    2928:	fc 81       	ldd	r31, Y+4	; 0x04
    292a:	83 e1       	ldi	r24, 0x13	; 19
    292c:	80 83       	st	Z, r24
	pxTopOfStack--;
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    2938:	eb 81       	ldd	r30, Y+3	; 0x03
    293a:	fc 81       	ldd	r31, Y+4	; 0x04
    293c:	84 e1       	ldi	r24, 0x14	; 20
    293e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	9c 83       	std	Y+4, r25	; 0x04
    2948:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    294a:	eb 81       	ldd	r30, Y+3	; 0x03
    294c:	fc 81       	ldd	r31, Y+4	; 0x04
    294e:	85 e1       	ldi	r24, 0x15	; 21
    2950:	80 83       	st	Z, r24
	pxTopOfStack--;
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9c 83       	std	Y+4, r25	; 0x04
    295a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    295c:	eb 81       	ldd	r30, Y+3	; 0x03
    295e:	fc 81       	ldd	r31, Y+4	; 0x04
    2960:	86 e1       	ldi	r24, 0x16	; 22
    2962:	80 83       	st	Z, r24
	pxTopOfStack--;
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    296e:	eb 81       	ldd	r30, Y+3	; 0x03
    2970:	fc 81       	ldd	r31, Y+4	; 0x04
    2972:	87 e1       	ldi	r24, 0x17	; 23
    2974:	80 83       	st	Z, r24
	pxTopOfStack--;
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9c 83       	std	Y+4, r25	; 0x04
    297e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    2980:	eb 81       	ldd	r30, Y+3	; 0x03
    2982:	fc 81       	ldd	r31, Y+4	; 0x04
    2984:	88 e1       	ldi	r24, 0x18	; 24
    2986:	80 83       	st	Z, r24
	pxTopOfStack--;
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2992:	eb 81       	ldd	r30, Y+3	; 0x03
    2994:	fc 81       	ldd	r31, Y+4	; 0x04
    2996:	89 e1       	ldi	r24, 0x19	; 25
    2998:	80 83       	st	Z, r24
	pxTopOfStack--;
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    29a4:	eb 81       	ldd	r30, Y+3	; 0x03
    29a6:	fc 81       	ldd	r31, Y+4	; 0x04
    29a8:	80 e2       	ldi	r24, 0x20	; 32
    29aa:	80 83       	st	Z, r24
	pxTopOfStack--;
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    29b6:	eb 81       	ldd	r30, Y+3	; 0x03
    29b8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ba:	81 e2       	ldi	r24, 0x21	; 33
    29bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	9c 81       	ldd	r25, Y+4	; 0x04
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	9c 83       	std	Y+4, r25	; 0x04
    29c6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    29c8:	eb 81       	ldd	r30, Y+3	; 0x03
    29ca:	fc 81       	ldd	r31, Y+4	; 0x04
    29cc:	82 e2       	ldi	r24, 0x22	; 34
    29ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    29da:	eb 81       	ldd	r30, Y+3	; 0x03
    29dc:	fc 81       	ldd	r31, Y+4	; 0x04
    29de:	83 e2       	ldi	r24, 0x23	; 35
    29e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    29ec:	8f 81       	ldd	r24, Y+7	; 0x07
    29ee:	98 85       	ldd	r25, Y+8	; 0x08
    29f0:	9a 83       	std	Y+2, r25	; 0x02
    29f2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	eb 81       	ldd	r30, Y+3	; 0x03
    29f8:	fc 81       	ldd	r31, Y+4	; 0x04
    29fa:	80 83       	st	Z, r24
	pxTopOfStack--;
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	9c 83       	std	Y+4, r25	; 0x04
    2a04:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	89 2f       	mov	r24, r25
    2a0c:	99 27       	eor	r25, r25
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	eb 81       	ldd	r30, Y+3	; 0x03
    2a16:	fc 81       	ldd	r31, Y+4	; 0x04
    2a18:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	9c 83       	std	Y+4, r25	; 0x04
    2a22:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2a24:	eb 81       	ldd	r30, Y+3	; 0x03
    2a26:	fc 81       	ldd	r31, Y+4	; 0x04
    2a28:	86 e2       	ldi	r24, 0x26	; 38
    2a2a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    2a36:	eb 81       	ldd	r30, Y+3	; 0x03
    2a38:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3a:	87 e2       	ldi	r24, 0x27	; 39
    2a3c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	9c 83       	std	Y+4, r25	; 0x04
    2a46:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    2a48:	eb 81       	ldd	r30, Y+3	; 0x03
    2a4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a4c:	88 e2       	ldi	r24, 0x28	; 40
    2a4e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    2a5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a5e:	89 e2       	ldi	r24, 0x29	; 41
    2a60:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	9c 81       	ldd	r25, Y+4	; 0x04
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	9c 83       	std	Y+4, r25	; 0x04
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    2a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a70:	80 e3       	ldi	r24, 0x30	; 48
    2a72:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	9c 81       	ldd	r25, Y+4	; 0x04
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9c 83       	std	Y+4, r25	; 0x04
    2a7c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    2a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a80:	fc 81       	ldd	r31, Y+4	; 0x04
    2a82:	81 e3       	ldi	r24, 0x31	; 49
    2a84:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	9c 83       	std	Y+4, r25	; 0x04
    2a8e:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2a94:	28 96       	adiw	r28, 0x08	; 8
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2aae:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2ab2:	a0 91 99 06 	lds	r26, 0x0699
    2ab6:	b0 91 9a 06 	lds	r27, 0x069A
    2aba:	cd 91       	ld	r28, X+
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	dd 91       	ld	r29, X+
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	ff 91       	pop	r31
    2ac4:	ef 91       	pop	r30
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	bf 91       	pop	r27
    2acc:	af 91       	pop	r26
    2ace:	9f 91       	pop	r25
    2ad0:	8f 91       	pop	r24
    2ad2:	7f 91       	pop	r23
    2ad4:	6f 91       	pop	r22
    2ad6:	5f 91       	pop	r21
    2ad8:	4f 91       	pop	r20
    2ada:	3f 91       	pop	r19
    2adc:	2f 91       	pop	r18
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
    2aea:	bf 90       	pop	r11
    2aec:	af 90       	pop	r10
    2aee:	9f 90       	pop	r9
    2af0:	8f 90       	pop	r8
    2af2:	7f 90       	pop	r7
    2af4:	6f 90       	pop	r6
    2af6:	5f 90       	pop	r5
    2af8:	4f 90       	pop	r4
    2afa:	3f 90       	pop	r3
    2afc:	2f 90       	pop	r2
    2afe:	1f 90       	pop	r1
    2b00:	0f 90       	pop	r0
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2b06:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
}
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	08 95       	ret

00002b1e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2b1e:	0f 92       	push	r0
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	0f 92       	push	r0
    2b26:	1f 92       	push	r1
    2b28:	11 24       	eor	r1, r1
    2b2a:	2f 92       	push	r2
    2b2c:	3f 92       	push	r3
    2b2e:	4f 92       	push	r4
    2b30:	5f 92       	push	r5
    2b32:	6f 92       	push	r6
    2b34:	7f 92       	push	r7
    2b36:	8f 92       	push	r8
    2b38:	9f 92       	push	r9
    2b3a:	af 92       	push	r10
    2b3c:	bf 92       	push	r11
    2b3e:	cf 92       	push	r12
    2b40:	df 92       	push	r13
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	2f 93       	push	r18
    2b4c:	3f 93       	push	r19
    2b4e:	4f 93       	push	r20
    2b50:	5f 93       	push	r21
    2b52:	6f 93       	push	r22
    2b54:	7f 93       	push	r23
    2b56:	8f 93       	push	r24
    2b58:	9f 93       	push	r25
    2b5a:	af 93       	push	r26
    2b5c:	bf 93       	push	r27
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	ef 93       	push	r30
    2b64:	ff 93       	push	r31
    2b66:	a0 91 99 06 	lds	r26, 0x0699
    2b6a:	b0 91 9a 06 	lds	r27, 0x069A
    2b6e:	0d b6       	in	r0, 0x3d	; 61
    2b70:	0d 92       	st	X+, r0
    2b72:	0e b6       	in	r0, 0x3e	; 62
    2b74:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2b76:	0e 94 46 2b 	call	0x568c	; 0x568c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2b7a:	a0 91 99 06 	lds	r26, 0x0699
    2b7e:	b0 91 9a 06 	lds	r27, 0x069A
    2b82:	cd 91       	ld	r28, X+
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	dd 91       	ld	r29, X+
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	ff 91       	pop	r31
    2b8c:	ef 91       	pop	r30
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	bf 91       	pop	r27
    2b94:	af 91       	pop	r26
    2b96:	9f 91       	pop	r25
    2b98:	8f 91       	pop	r24
    2b9a:	7f 91       	pop	r23
    2b9c:	6f 91       	pop	r22
    2b9e:	5f 91       	pop	r21
    2ba0:	4f 91       	pop	r20
    2ba2:	3f 91       	pop	r19
    2ba4:	2f 91       	pop	r18
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	df 90       	pop	r13
    2bb0:	cf 90       	pop	r12
    2bb2:	bf 90       	pop	r11
    2bb4:	af 90       	pop	r10
    2bb6:	9f 90       	pop	r9
    2bb8:	8f 90       	pop	r8
    2bba:	7f 90       	pop	r7
    2bbc:	6f 90       	pop	r6
    2bbe:	5f 90       	pop	r5
    2bc0:	4f 90       	pop	r4
    2bc2:	3f 90       	pop	r3
    2bc4:	2f 90       	pop	r2
    2bc6:	1f 90       	pop	r1
    2bc8:	0f 90       	pop	r0
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2bce:	08 95       	ret

00002bd0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2bd0:	0f 92       	push	r0
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	0f 92       	push	r0
    2bd8:	1f 92       	push	r1
    2bda:	11 24       	eor	r1, r1
    2bdc:	2f 92       	push	r2
    2bde:	3f 92       	push	r3
    2be0:	4f 92       	push	r4
    2be2:	5f 92       	push	r5
    2be4:	6f 92       	push	r6
    2be6:	7f 92       	push	r7
    2be8:	8f 92       	push	r8
    2bea:	9f 92       	push	r9
    2bec:	af 92       	push	r10
    2bee:	bf 92       	push	r11
    2bf0:	cf 92       	push	r12
    2bf2:	df 92       	push	r13
    2bf4:	ef 92       	push	r14
    2bf6:	ff 92       	push	r15
    2bf8:	0f 93       	push	r16
    2bfa:	1f 93       	push	r17
    2bfc:	2f 93       	push	r18
    2bfe:	3f 93       	push	r19
    2c00:	4f 93       	push	r20
    2c02:	5f 93       	push	r21
    2c04:	6f 93       	push	r22
    2c06:	7f 93       	push	r23
    2c08:	8f 93       	push	r24
    2c0a:	9f 93       	push	r25
    2c0c:	af 93       	push	r26
    2c0e:	bf 93       	push	r27
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	ef 93       	push	r30
    2c16:	ff 93       	push	r31
    2c18:	a0 91 99 06 	lds	r26, 0x0699
    2c1c:	b0 91 9a 06 	lds	r27, 0x069A
    2c20:	0d b6       	in	r0, 0x3d	; 61
    2c22:	0d 92       	st	X+, r0
    2c24:	0e b6       	in	r0, 0x3e	; 62
    2c26:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2c28:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <xTaskIncrementTick>
    2c2c:	88 23       	and	r24, r24
    2c2e:	11 f0       	breq	.+4      	; 0x2c34 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    2c30:	0e 94 46 2b 	call	0x568c	; 0x568c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    2c34:	a0 91 99 06 	lds	r26, 0x0699
    2c38:	b0 91 9a 06 	lds	r27, 0x069A
    2c3c:	cd 91       	ld	r28, X+
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	dd 91       	ld	r29, X+
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	ff 91       	pop	r31
    2c46:	ef 91       	pop	r30
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	bf 91       	pop	r27
    2c4e:	af 91       	pop	r26
    2c50:	9f 91       	pop	r25
    2c52:	8f 91       	pop	r24
    2c54:	7f 91       	pop	r23
    2c56:	6f 91       	pop	r22
    2c58:	5f 91       	pop	r21
    2c5a:	4f 91       	pop	r20
    2c5c:	3f 91       	pop	r19
    2c5e:	2f 91       	pop	r18
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	df 90       	pop	r13
    2c6a:	cf 90       	pop	r12
    2c6c:	bf 90       	pop	r11
    2c6e:	af 90       	pop	r10
    2c70:	9f 90       	pop	r9
    2c72:	8f 90       	pop	r8
    2c74:	7f 90       	pop	r7
    2c76:	6f 90       	pop	r6
    2c78:	5f 90       	pop	r5
    2c7a:	4f 90       	pop	r4
    2c7c:	3f 90       	pop	r3
    2c7e:	2f 90       	pop	r2
    2c80:	1f 90       	pop	r1
    2c82:	0f 90       	pop	r0
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2c88:	08 95       	ret

00002c8a <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <prvSetupTimerInterrupt+0x6>
    2c90:	00 d0       	rcall	.+0      	; 0x2c92 <prvSetupTimerInterrupt+0x8>
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <prvSetupTimerInterrupt+0xa>
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2c98:	80 e4       	ldi	r24, 0x40	; 64
    2c9a:	9f e1       	ldi	r25, 0x1F	; 31
    2c9c:	a0 e0       	ldi	r26, 0x00	; 0
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	9c 83       	std	Y+4, r25	; 0x04
    2ca4:	ad 83       	std	Y+5, r26	; 0x05
    2ca6:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cac:	ad 81       	ldd	r26, Y+5	; 0x05
    2cae:	be 81       	ldd	r27, Y+6	; 0x06
    2cb0:	68 94       	set
    2cb2:	15 f8       	bld	r1, 5
    2cb4:	b6 95       	lsr	r27
    2cb6:	a7 95       	ror	r26
    2cb8:	97 95       	ror	r25
    2cba:	87 95       	ror	r24
    2cbc:	16 94       	lsr	r1
    2cbe:	d1 f7       	brne	.-12     	; 0x2cb4 <prvSetupTimerInterrupt+0x2a>
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	ad 83       	std	Y+5, r26	; 0x05
    2cc6:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	ad 81       	ldd	r26, Y+5	; 0x05
    2cce:	be 81       	ldd	r27, Y+6	; 0x06
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	a1 09       	sbc	r26, r1
    2cd4:	b1 09       	sbc	r27, r1
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	ad 83       	std	Y+5, r26	; 0x05
    2cdc:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce6:	ad 81       	ldd	r26, Y+5	; 0x05
    2ce8:	be 81       	ldd	r27, Y+6	; 0x06
    2cea:	89 2f       	mov	r24, r25
    2cec:	9a 2f       	mov	r25, r26
    2cee:	ab 2f       	mov	r26, r27
    2cf0:	bb 27       	eor	r27, r27
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
    2cf4:	9c 83       	std	Y+4, r25	; 0x04
    2cf6:	ad 83       	std	Y+5, r26	; 0x05
    2cf8:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    2cfe:	eb e4       	ldi	r30, 0x4B	; 75
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2d06:	ea e4       	ldi	r30, 0x4A	; 74
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2d0e:	8b e0       	ldi	r24, 0x0B	; 11
    2d10:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    2d12:	ee e4       	ldi	r30, 0x4E	; 78
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2d1a:	e9 e5       	ldi	r30, 0x59	; 89
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	80 61       	ori	r24, 0x10	; 16
    2d26:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2d28:	e9 e5       	ldi	r30, 0x59	; 89
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	80 83       	st	Z, r24
}
    2d30:	26 96       	adiw	r28, 0x06	; 6
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    2d42:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2d46:	18 95       	reti

00002d48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <xQueueGenericReset+0x6>
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <xQueueGenericReset+0x8>
    2d50:	0f 92       	push	r0
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	9c 83       	std	Y+4, r25	; 0x04
    2d58:	8b 83       	std	Y+3, r24	; 0x03
    2d5a:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = xQueue;
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	0f 92       	push	r0
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6e:	40 81       	ld	r20, Z
    2d70:	51 81       	ldd	r21, Z+1	; 0x01
    2d72:	e9 81       	ldd	r30, Y+1	; 0x01
    2d74:	fa 81       	ldd	r31, Y+2	; 0x02
    2d76:	83 8d       	ldd	r24, Z+27	; 0x1b
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d80:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d82:	88 2f       	mov	r24, r24
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	bc 01       	movw	r22, r24
    2d88:	26 9f       	mul	r18, r22
    2d8a:	c0 01       	movw	r24, r0
    2d8c:	27 9f       	mul	r18, r23
    2d8e:	90 0d       	add	r25, r0
    2d90:	36 9f       	mul	r19, r22
    2d92:	90 0d       	add	r25, r0
    2d94:	11 24       	eor	r1, r1
    2d96:	84 0f       	add	r24, r20
    2d98:	95 1f       	adc	r25, r21
    2d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9e:	95 83       	std	Z+5, r25	; 0x05
    2da0:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2da2:	e9 81       	ldd	r30, Y+1	; 0x01
    2da4:	fa 81       	ldd	r31, Y+2	; 0x02
    2da6:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2da8:	e9 81       	ldd	r30, Y+1	; 0x01
    2daa:	fa 81       	ldd	r31, Y+2	; 0x02
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	e9 81       	ldd	r30, Y+1	; 0x01
    2db2:	fa 81       	ldd	r31, Y+2	; 0x02
    2db4:	93 83       	std	Z+3, r25	; 0x03
    2db6:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2db8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dba:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbc:	40 81       	ld	r20, Z
    2dbe:	51 81       	ldd	r21, Z+1	; 0x01
    2dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc4:	83 8d       	ldd	r24, Z+27	; 0x1b
    2dc6:	88 2f       	mov	r24, r24
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	9c 01       	movw	r18, r24
    2dcc:	21 50       	subi	r18, 0x01	; 1
    2dce:	30 40       	sbci	r19, 0x00	; 0
    2dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd4:	84 8d       	ldd	r24, Z+28	; 0x1c
    2dd6:	88 2f       	mov	r24, r24
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	bc 01       	movw	r22, r24
    2ddc:	26 9f       	mul	r18, r22
    2dde:	c0 01       	movw	r24, r0
    2de0:	27 9f       	mul	r18, r23
    2de2:	90 0d       	add	r25, r0
    2de4:	36 9f       	mul	r19, r22
    2de6:	90 0d       	add	r25, r0
    2de8:	11 24       	eor	r1, r1
    2dea:	84 0f       	add	r24, r20
    2dec:	95 1f       	adc	r25, r21
    2dee:	e9 81       	ldd	r30, Y+1	; 0x01
    2df0:	fa 81       	ldd	r31, Y+2	; 0x02
    2df2:	97 83       	std	Z+7, r25	; 0x07
    2df4:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    2df6:	e9 81       	ldd	r30, Y+1	; 0x01
    2df8:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfa:	8f ef       	ldi	r24, 0xFF	; 255
    2dfc:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    2dfe:	e9 81       	ldd	r30, Y+1	; 0x01
    2e00:	fa 81       	ldd	r31, Y+2	; 0x02
    2e02:	8f ef       	ldi	r24, 0xFF	; 255
    2e04:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	88 23       	and	r24, r24
    2e0a:	79 f4       	brne	.+30     	; 0x2e2a <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e10:	80 85       	ldd	r24, Z+8	; 0x08
    2e12:	88 23       	and	r24, r24
    2e14:	a1 f0       	breq	.+40     	; 0x2e3e <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	08 96       	adiw	r24, 0x08	; 8
    2e1c:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    2e20:	88 23       	and	r24, r24
    2e22:	69 f0       	breq	.+26     	; 0x2e3e <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    2e24:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
    2e28:	0a c0       	rjmp	.+20     	; 0x2e3e <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2e:	08 96       	adiw	r24, 0x08	; 8
    2e30:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	9a 81       	ldd	r25, Y+2	; 0x02
    2e38:	41 96       	adiw	r24, 0x11	; 17
    2e3a:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    2e3e:	0f 90       	pop	r0
    2e40:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    2e42:	81 e0       	ldi	r24, 0x01	; 1
}
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	29 97       	sbiw	r28, 0x09	; 9
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	8f 83       	std	Y+7, r24	; 0x07
    2e6e:	68 87       	std	Y+8, r22	; 0x08
    2e70:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    2e72:	88 85       	ldd	r24, Y+8	; 0x08
    2e74:	88 23       	and	r24, r24
    2e76:	19 f4       	brne	.+6      	; 0x2e7e <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    2e78:	1c 82       	std	Y+4, r1	; 0x04
    2e7a:	1b 82       	std	Y+3, r1	; 0x03
    2e7c:	10 c0       	rjmp	.+32     	; 0x2e9e <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e80:	28 2f       	mov	r18, r24
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	88 85       	ldd	r24, Y+8	; 0x08
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	ac 01       	movw	r20, r24
    2e8c:	24 9f       	mul	r18, r20
    2e8e:	c0 01       	movw	r24, r0
    2e90:	25 9f       	mul	r18, r21
    2e92:	90 0d       	add	r25, r0
    2e94:	34 9f       	mul	r19, r20
    2e96:	90 0d       	add	r25, r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	9c 83       	std	Y+4, r25	; 0x04
    2e9c:	8b 83       	std	Y+3, r24	; 0x03
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	4f 96       	adiw	r24, 0x1f	; 31
    2ea4:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	a1 f0       	breq	.+40     	; 0x2edc <xQueueGenericCreate+0x88>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	9a 83       	std	Y+2, r25	; 0x02
    2eba:	89 83       	std	Y+1, r24	; 0x01
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	4f 96       	adiw	r24, 0x1f	; 31
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    2ec6:	29 81       	ldd	r18, Y+1	; 0x01
    2ec8:	3a 81       	ldd	r19, Y+2	; 0x02
    2eca:	ed 81       	ldd	r30, Y+5	; 0x05
    2ecc:	fe 81       	ldd	r31, Y+6	; 0x06
    2ece:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed0:	68 85       	ldd	r22, Y+8	; 0x08
    2ed2:	a9 01       	movw	r20, r18
    2ed4:	29 85       	ldd	r18, Y+9	; 0x09
    2ed6:	8f 01       	movw	r16, r30
    2ed8:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    2ee0:	29 96       	adiw	r28, 0x09	; 9
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	08 95       	ret

00002ef6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	27 97       	sbiw	r28, 0x07	; 7
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	6a 83       	std	Y+2, r22	; 0x02
    2f12:	5c 83       	std	Y+4, r21	; 0x04
    2f14:	4b 83       	std	Y+3, r20	; 0x03
    2f16:	2d 83       	std	Y+5, r18	; 0x05
    2f18:	1f 83       	std	Y+7, r17	; 0x07
    2f1a:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	88 23       	and	r24, r24
    2f20:	39 f4       	brne	.+14     	; 0x2f30 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    2f22:	8e 81       	ldd	r24, Y+6	; 0x06
    2f24:	9f 81       	ldd	r25, Y+7	; 0x07
    2f26:	ee 81       	ldd	r30, Y+6	; 0x06
    2f28:	ff 81       	ldd	r31, Y+7	; 0x07
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
    2f2e:	06 c0       	rjmp	.+12     	; 0x2f3c <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	ee 81       	ldd	r30, Y+6	; 0x06
    2f36:	ff 81       	ldd	r31, Y+7	; 0x07
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    2f3c:	ee 81       	ldd	r30, Y+6	; 0x06
    2f3e:	ff 81       	ldd	r31, Y+7	; 0x07
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    2f44:	ee 81       	ldd	r30, Y+6	; 0x06
    2f46:	ff 81       	ldd	r31, Y+7	; 0x07
    2f48:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4a:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    2f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f50:	61 e0       	ldi	r22, 0x01	; 1
    2f52:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    2f56:	27 96       	adiw	r28, 0x07	; 7
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	08 95       	ret

00002f6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	00 d0       	rcall	.+0      	; 0x2f72 <xQueueCreateCountingSemaphore+0x6>
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <xQueueCreateCountingSemaphore+0x8>
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	8b 83       	std	Y+3, r24	; 0x03
    2f7a:	6c 83       	std	Y+4, r22	; 0x04
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	42 e0       	ldi	r20, 0x02	; 2
    2f82:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xQueueGenericCreate>
    2f86:	9a 83       	std	Y+2, r25	; 0x02
    2f88:	89 83       	std	Y+1, r24	; 0x01

		if( xHandle != NULL )
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	21 f0       	breq	.+8      	; 0x2f9a <xQueueCreateCountingSemaphore+0x2e>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    2f92:	e9 81       	ldd	r30, Y+1	; 0x01
    2f94:	fa 81       	ldd	r31, Y+2	; 0x02
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	82 8f       	std	Z+26, r24	; 0x1a
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	2f 97       	sbiw	r28, 0x0f	; 15
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	99 87       	std	Y+9, r25	; 0x09
    2fc2:	88 87       	std	Y+8, r24	; 0x08
    2fc4:	7b 87       	std	Y+11, r23	; 0x0b
    2fc6:	6a 87       	std	Y+10, r22	; 0x0a
    2fc8:	5d 87       	std	Y+13, r21	; 0x0d
    2fca:	4c 87       	std	Y+12, r20	; 0x0c
    2fcc:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2fce:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    2fd0:	88 85       	ldd	r24, Y+8	; 0x08
    2fd2:	99 85       	ldd	r25, Y+9	; 0x09
    2fd4:	9a 83       	std	Y+2, r25	; 0x02
    2fd6:	89 83       	std	Y+1, r24	; 0x01
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fe4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe8:	83 8d       	ldd	r24, Z+27	; 0x1b
    2fea:	98 17       	cp	r25, r24
    2fec:	18 f0       	brcs	.+6      	; 0x2ff4 <xQueueGenericSend+0x48>
    2fee:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ff0:	82 30       	cpi	r24, 0x02	; 2
    2ff2:	11 f5       	brne	.+68     	; 0x3038 <xQueueGenericSend+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ffa:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ffc:	b9 01       	movw	r22, r18
    2ffe:	4e 85       	ldd	r20, Y+14	; 0x0e
    3000:	0e 94 28 1c 	call	0x3850	; 0x3850 <prvCopyDataToQueue>
    3004:	8b 83       	std	Y+3, r24	; 0x03

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3006:	e9 81       	ldd	r30, Y+1	; 0x01
    3008:	fa 81       	ldd	r31, Y+2	; 0x02
    300a:	81 89       	ldd	r24, Z+17	; 0x11
    300c:	88 23       	and	r24, r24
    300e:	51 f0       	breq	.+20     	; 0x3024 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	41 96       	adiw	r24, 0x11	; 17
    3016:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    301a:	88 23       	and	r24, r24
    301c:	41 f0       	breq	.+16     	; 0x302e <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    301e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
    3022:	05 c0       	rjmp	.+10     	; 0x302e <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	88 23       	and	r24, r24
    3028:	11 f0       	breq	.+4      	; 0x302e <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    302a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    302e:	0f 90       	pop	r0
    3030:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	8f 87       	std	Y+15, r24	; 0x0f
    3036:	5c c0       	rjmp	.+184    	; 0x30f0 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3038:	8c 85       	ldd	r24, Y+12	; 0x0c
    303a:	9d 85       	ldd	r25, Y+13	; 0x0d
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	21 f4       	brne	.+8      	; 0x3048 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3040:	0f 90       	pop	r0
    3042:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3044:	1f 86       	std	Y+15, r1	; 0x0f
    3046:	54 c0       	rjmp	.+168    	; 0x30f0 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    3048:	8c 81       	ldd	r24, Y+4	; 0x04
    304a:	88 23       	and	r24, r24
    304c:	31 f4       	brne	.+12     	; 0x305a <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    304e:	ce 01       	movw	r24, r28
    3050:	05 96       	adiw	r24, 0x05	; 5
    3052:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    305a:	0f 90       	pop	r0
    305c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    305e:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	0f 92       	push	r0
    3068:	e9 81       	ldd	r30, Y+1	; 0x01
    306a:	fa 81       	ldd	r31, Y+2	; 0x02
    306c:	85 8d       	ldd	r24, Z+29	; 0x1d
    306e:	8f 3f       	cpi	r24, 0xFF	; 255
    3070:	19 f4       	brne	.+6      	; 0x3078 <xQueueGenericSend+0xcc>
    3072:	e9 81       	ldd	r30, Y+1	; 0x01
    3074:	fa 81       	ldd	r31, Y+2	; 0x02
    3076:	15 8e       	std	Z+29, r1	; 0x1d
    3078:	e9 81       	ldd	r30, Y+1	; 0x01
    307a:	fa 81       	ldd	r31, Y+2	; 0x02
    307c:	86 8d       	ldd	r24, Z+30	; 0x1e
    307e:	8f 3f       	cpi	r24, 0xFF	; 255
    3080:	19 f4       	brne	.+6      	; 0x3088 <xQueueGenericSend+0xdc>
    3082:	e9 81       	ldd	r30, Y+1	; 0x01
    3084:	fa 81       	ldd	r31, Y+2	; 0x02
    3086:	16 8e       	std	Z+30, r1	; 0x1e
    3088:	0f 90       	pop	r0
    308a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    308c:	ce 01       	movw	r24, r28
    308e:	05 96       	adiw	r24, 0x05	; 5
    3090:	9e 01       	movw	r18, r28
    3092:	24 5f       	subi	r18, 0xF4	; 244
    3094:	3f 4f       	sbci	r19, 0xFF	; 255
    3096:	b9 01       	movw	r22, r18
    3098:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <xTaskCheckForTimeOut>
    309c:	88 23       	and	r24, r24
    309e:	09 f5       	brne	.+66     	; 0x30e2 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	9a 81       	ldd	r25, Y+2	; 0x02
    30a4:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <prvIsQueueFull>
    30a8:	88 23       	and	r24, r24
    30aa:	a1 f0       	breq	.+40     	; 0x30d4 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	08 96       	adiw	r24, 0x08	; 8
    30b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    30b4:	3d 85       	ldd	r19, Y+13	; 0x0d
    30b6:	b9 01       	movw	r22, r18
    30b8:	0e 94 b3 2b 	call	0x5766	; 0x5766 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    30c4:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    30c8:	88 23       	and	r24, r24
    30ca:	09 f0       	breq	.+2      	; 0x30ce <xQueueGenericSend+0x122>
    30cc:	85 cf       	rjmp	.-246    	; 0x2fd8 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    30ce:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
    30d2:	82 cf       	rjmp	.-252    	; 0x2fd8 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	9a 81       	ldd	r25, Y+2	; 0x02
    30d8:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    30dc:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    30e0:	7b cf       	rjmp	.-266    	; 0x2fd8 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	9a 81       	ldd	r25, Y+2	; 0x02
    30e6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    30ea:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    30ee:	1f 86       	std	Y+15, r1	; 0x0f
    30f0:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	} /*lint -restore */
}
    30f2:	2f 96       	adiw	r28, 0x0f	; 15
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	2c 97       	sbiw	r28, 0x0c	; 12
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	9f 83       	std	Y+7, r25	; 0x07
    311a:	8e 83       	std	Y+6, r24	; 0x06
    311c:	79 87       	std	Y+9, r23	; 0x09
    311e:	68 87       	std	Y+8, r22	; 0x08
    3120:	5b 87       	std	Y+11, r21	; 0x0b
    3122:	4a 87       	std	Y+10, r20	; 0x0a
    3124:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    3126:	8e 81       	ldd	r24, Y+6	; 0x06
    3128:	9f 81       	ldd	r25, Y+7	; 0x07
    312a:	9b 83       	std	Y+3, r25	; 0x03
    312c:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    312e:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3130:	ea 81       	ldd	r30, Y+2	; 0x02
    3132:	fb 81       	ldd	r31, Y+3	; 0x03
    3134:	92 8d       	ldd	r25, Z+26	; 0x1a
    3136:	ea 81       	ldd	r30, Y+2	; 0x02
    3138:	fb 81       	ldd	r31, Y+3	; 0x03
    313a:	83 8d       	ldd	r24, Z+27	; 0x1b
    313c:	98 17       	cp	r25, r24
    313e:	18 f0       	brcs	.+6      	; 0x3146 <xQueueGenericSendFromISR+0x42>
    3140:	8c 85       	ldd	r24, Y+12	; 0x0c
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	61 f5       	brne	.+88     	; 0x319e <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    3146:	ea 81       	ldd	r30, Y+2	; 0x02
    3148:	fb 81       	ldd	r31, Y+3	; 0x03
    314a:	86 8d       	ldd	r24, Z+30	; 0x1e
    314c:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    314e:	8a 81       	ldd	r24, Y+2	; 0x02
    3150:	9b 81       	ldd	r25, Y+3	; 0x03
    3152:	28 85       	ldd	r18, Y+8	; 0x08
    3154:	39 85       	ldd	r19, Y+9	; 0x09
    3156:	b9 01       	movw	r22, r18
    3158:	4c 85       	ldd	r20, Y+12	; 0x0c
    315a:	0e 94 28 1c 	call	0x3850	; 0x3850 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	8f 3f       	cpi	r24, 0xFF	; 255
    3162:	a9 f4       	brne	.+42     	; 0x318e <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3164:	ea 81       	ldd	r30, Y+2	; 0x02
    3166:	fb 81       	ldd	r31, Y+3	; 0x03
    3168:	81 89       	ldd	r24, Z+17	; 0x11
    316a:	88 23       	and	r24, r24
    316c:	a9 f0       	breq	.+42     	; 0x3198 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    316e:	8a 81       	ldd	r24, Y+2	; 0x02
    3170:	9b 81       	ldd	r25, Y+3	; 0x03
    3172:	41 96       	adiw	r24, 0x11	; 17
    3174:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    3178:	88 23       	and	r24, r24
    317a:	71 f0       	breq	.+28     	; 0x3198 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    317c:	8a 85       	ldd	r24, Y+10	; 0x0a
    317e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	51 f0       	breq	.+20     	; 0x3198 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3184:	ea 85       	ldd	r30, Y+10	; 0x0a
    3186:	fb 85       	ldd	r31, Y+11	; 0x0b
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	80 83       	st	Z, r24
    318c:	05 c0       	rjmp	.+10     	; 0x3198 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	8f 5f       	subi	r24, 0xFF	; 255
    3192:	ea 81       	ldd	r30, Y+2	; 0x02
    3194:	fb 81       	ldd	r31, Y+3	; 0x03
    3196:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	01 c0       	rjmp	.+2      	; 0x31a0 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    319e:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    31a2:	2c 96       	adiw	r28, 0x0c	; 12
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	de bf       	out	0x3e, r29	; 62
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	cd bf       	out	0x3d, r28	; 61
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
    31bc:	2a 97       	sbiw	r28, 0x0a	; 10
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	98 87       	std	Y+8, r25	; 0x08
    31ca:	8f 83       	std	Y+7, r24	; 0x07
    31cc:	7a 87       	std	Y+10, r23	; 0x0a
    31ce:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    31d0:	8f 81       	ldd	r24, Y+7	; 0x07
    31d2:	98 85       	ldd	r25, Y+8	; 0x08
    31d4:	9c 83       	std	Y+4, r25	; 0x04
    31d6:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    31d8:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    31da:	eb 81       	ldd	r30, Y+3	; 0x03
    31dc:	fc 81       	ldd	r31, Y+4	; 0x04
    31de:	82 8d       	ldd	r24, Z+26	; 0x1a
    31e0:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    31e2:	eb 81       	ldd	r30, Y+3	; 0x03
    31e4:	fc 81       	ldd	r31, Y+4	; 0x04
    31e6:	93 8d       	ldd	r25, Z+27	; 0x1b
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	89 17       	cp	r24, r25
    31ec:	48 f5       	brcc	.+82     	; 0x3240 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    31ee:	eb 81       	ldd	r30, Y+3	; 0x03
    31f0:	fc 81       	ldd	r31, Y+4	; 0x04
    31f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    31f4:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	8f 5f       	subi	r24, 0xFF	; 255
    31fa:	eb 81       	ldd	r30, Y+3	; 0x03
    31fc:	fc 81       	ldd	r31, Y+4	; 0x04
    31fe:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	8f 3f       	cpi	r24, 0xFF	; 255
    3204:	a9 f4       	brne	.+42     	; 0x3230 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3206:	eb 81       	ldd	r30, Y+3	; 0x03
    3208:	fc 81       	ldd	r31, Y+4	; 0x04
    320a:	81 89       	ldd	r24, Z+17	; 0x11
    320c:	88 23       	and	r24, r24
    320e:	a9 f0       	breq	.+42     	; 0x323a <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	41 96       	adiw	r24, 0x11	; 17
    3216:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    321a:	88 23       	and	r24, r24
    321c:	71 f0       	breq	.+28     	; 0x323a <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	51 f0       	breq	.+20     	; 0x323a <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3226:	e9 85       	ldd	r30, Y+9	; 0x09
    3228:	fa 85       	ldd	r31, Y+10	; 0x0a
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	80 83       	st	Z, r24
    322e:	05 c0       	rjmp	.+10     	; 0x323a <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	8f 5f       	subi	r24, 0xFF	; 255
    3234:	eb 81       	ldd	r30, Y+3	; 0x03
    3236:	fc 81       	ldd	r31, Y+4	; 0x04
    3238:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	8e 83       	std	Y+6, r24	; 0x06
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3240:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3242:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3244:	2a 96       	adiw	r28, 0x0a	; 10
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	cf 91       	pop	r28
    3252:	df 91       	pop	r29
    3254:	08 95       	ret

00003256 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	2e 97       	sbiw	r28, 0x0e	; 14
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	99 87       	std	Y+9, r25	; 0x09
    326c:	88 87       	std	Y+8, r24	; 0x08
    326e:	7b 87       	std	Y+11, r23	; 0x0b
    3270:	6a 87       	std	Y+10, r22	; 0x0a
    3272:	5d 87       	std	Y+13, r21	; 0x0d
    3274:	4c 87       	std	Y+12, r20	; 0x0c
BaseType_t xEntryTimeSet = pdFALSE;
    3276:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    3278:	88 85       	ldd	r24, Y+8	; 0x08
    327a:	99 85       	ldd	r25, Y+9	; 0x09
    327c:	9b 83       	std	Y+3, r25	; 0x03
    327e:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3286:	ea 81       	ldd	r30, Y+2	; 0x02
    3288:	fb 81       	ldd	r31, Y+3	; 0x03
    328a:	82 8d       	ldd	r24, Z+26	; 0x1a
    328c:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	88 23       	and	r24, r24
    3292:	f9 f0       	breq	.+62     	; 0x32d2 <xQueueReceive+0x7c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	9b 81       	ldd	r25, Y+3	; 0x03
    3298:	2a 85       	ldd	r18, Y+10	; 0x0a
    329a:	3b 85       	ldd	r19, Y+11	; 0x0b
    329c:	b9 01       	movw	r22, r18
    329e:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	81 50       	subi	r24, 0x01	; 1
    32a6:	ea 81       	ldd	r30, Y+2	; 0x02
    32a8:	fb 81       	ldd	r31, Y+3	; 0x03
    32aa:	82 8f       	std	Z+26, r24	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    32ac:	ea 81       	ldd	r30, Y+2	; 0x02
    32ae:	fb 81       	ldd	r31, Y+3	; 0x03
    32b0:	80 85       	ldd	r24, Z+8	; 0x08
    32b2:	88 23       	and	r24, r24
    32b4:	49 f0       	breq	.+18     	; 0x32c8 <xQueueReceive+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ba:	08 96       	adiw	r24, 0x08	; 8
    32bc:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    32c0:	88 23       	and	r24, r24
    32c2:	11 f0       	breq	.+4      	; 0x32c8 <xQueueReceive+0x72>
					{
						queueYIELD_IF_USING_PREEMPTION();
    32c4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    32c8:	0f 90       	pop	r0
    32ca:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	8e 87       	std	Y+14, r24	; 0x0e
    32d0:	63 c0       	rjmp	.+198    	; 0x3398 <xQueueReceive+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    32d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    32d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	21 f4       	brne	.+8      	; 0x32e2 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    32da:	0f 90       	pop	r0
    32dc:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    32de:	1e 86       	std	Y+14, r1	; 0x0e
    32e0:	5b c0       	rjmp	.+182    	; 0x3398 <xQueueReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
    32e2:	8c 81       	ldd	r24, Y+4	; 0x04
    32e4:	88 23       	and	r24, r24
    32e6:	31 f4       	brne	.+12     	; 0x32f4 <xQueueReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    32e8:	ce 01       	movw	r24, r28
    32ea:	05 96       	adiw	r24, 0x05	; 5
    32ec:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    32f4:	0f 90       	pop	r0
    32f6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    32f8:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	0f 92       	push	r0
    3302:	ea 81       	ldd	r30, Y+2	; 0x02
    3304:	fb 81       	ldd	r31, Y+3	; 0x03
    3306:	85 8d       	ldd	r24, Z+29	; 0x1d
    3308:	8f 3f       	cpi	r24, 0xFF	; 255
    330a:	19 f4       	brne	.+6      	; 0x3312 <xQueueReceive+0xbc>
    330c:	ea 81       	ldd	r30, Y+2	; 0x02
    330e:	fb 81       	ldd	r31, Y+3	; 0x03
    3310:	15 8e       	std	Z+29, r1	; 0x1d
    3312:	ea 81       	ldd	r30, Y+2	; 0x02
    3314:	fb 81       	ldd	r31, Y+3	; 0x03
    3316:	86 8d       	ldd	r24, Z+30	; 0x1e
    3318:	8f 3f       	cpi	r24, 0xFF	; 255
    331a:	19 f4       	brne	.+6      	; 0x3322 <xQueueReceive+0xcc>
    331c:	ea 81       	ldd	r30, Y+2	; 0x02
    331e:	fb 81       	ldd	r31, Y+3	; 0x03
    3320:	16 8e       	std	Z+30, r1	; 0x1e
    3322:	0f 90       	pop	r0
    3324:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3326:	ce 01       	movw	r24, r28
    3328:	05 96       	adiw	r24, 0x05	; 5
    332a:	9e 01       	movw	r18, r28
    332c:	24 5f       	subi	r18, 0xF4	; 244
    332e:	3f 4f       	sbci	r19, 0xFF	; 255
    3330:	b9 01       	movw	r22, r18
    3332:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <xTaskCheckForTimeOut>
    3336:	88 23       	and	r24, r24
    3338:	09 f5       	brne	.+66     	; 0x337c <xQueueReceive+0x126>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <prvIsQueueEmpty>
    3342:	88 23       	and	r24, r24
    3344:	a1 f0       	breq	.+40     	; 0x336e <xQueueReceive+0x118>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	9b 81       	ldd	r25, Y+3	; 0x03
    334a:	41 96       	adiw	r24, 0x11	; 17
    334c:	2c 85       	ldd	r18, Y+12	; 0x0c
    334e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3350:	b9 01       	movw	r22, r18
    3352:	0e 94 b3 2b 	call	0x5766	; 0x5766 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	9b 81       	ldd	r25, Y+3	; 0x03
    335a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    335e:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    3362:	88 23       	and	r24, r24
    3364:	09 f0       	breq	.+2      	; 0x3368 <xQueueReceive+0x112>
    3366:	8c cf       	rjmp	.-232    	; 0x3280 <xQueueReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    3368:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
    336c:	89 cf       	rjmp	.-238    	; 0x3280 <xQueueReceive+0x2a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	9b 81       	ldd	r25, Y+3	; 0x03
    3372:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3376:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    337a:	82 cf       	rjmp	.-252    	; 0x3280 <xQueueReceive+0x2a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	9b 81       	ldd	r25, Y+3	; 0x03
    3380:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3384:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	9b 81       	ldd	r25, Y+3	; 0x03
    338c:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <prvIsQueueEmpty>
    3390:	88 23       	and	r24, r24
    3392:	09 f4       	brne	.+2      	; 0x3396 <xQueueReceive+0x140>
    3394:	75 cf       	rjmp	.-278    	; 0x3280 <xQueueReceive+0x2a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    3396:	1e 86       	std	Y+14, r1	; 0x0e
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    3398:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    339a:	2e 96       	adiw	r28, 0x0e	; 14
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	2c 97       	sbiw	r28, 0x0c	; 12
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	99 87       	std	Y+9, r25	; 0x09
    33c2:	88 87       	std	Y+8, r24	; 0x08
    33c4:	7b 87       	std	Y+11, r23	; 0x0b
    33c6:	6a 87       	std	Y+10, r22	; 0x0a
BaseType_t xEntryTimeSet = pdFALSE;
    33c8:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    33ca:	88 85       	ldd	r24, Y+8	; 0x08
    33cc:	99 85       	ldd	r25, Y+9	; 0x09
    33ce:	9b 83       	std	Y+3, r25	; 0x03
    33d0:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	f8 94       	cli
    33d6:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    33d8:	ea 81       	ldd	r30, Y+2	; 0x02
    33da:	fb 81       	ldd	r31, Y+3	; 0x03
    33dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    33de:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	88 23       	and	r24, r24
    33e4:	c1 f0       	breq	.+48     	; 0x3416 <xQueueSemaphoreTake+0x6a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	81 50       	subi	r24, 0x01	; 1
    33ea:	ea 81       	ldd	r30, Y+2	; 0x02
    33ec:	fb 81       	ldd	r31, Y+3	; 0x03
    33ee:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    33f0:	ea 81       	ldd	r30, Y+2	; 0x02
    33f2:	fb 81       	ldd	r31, Y+3	; 0x03
    33f4:	80 85       	ldd	r24, Z+8	; 0x08
    33f6:	88 23       	and	r24, r24
    33f8:	49 f0       	breq	.+18     	; 0x340c <xQueueSemaphoreTake+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	9b 81       	ldd	r25, Y+3	; 0x03
    33fe:	08 96       	adiw	r24, 0x08	; 8
    3400:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    3404:	88 23       	and	r24, r24
    3406:	11 f0       	breq	.+4      	; 0x340c <xQueueSemaphoreTake+0x60>
					{
						queueYIELD_IF_USING_PREEMPTION();
    3408:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    340c:	0f 90       	pop	r0
    340e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	8c 87       	std	Y+12, r24	; 0x0c
    3414:	63 c0       	rjmp	.+198    	; 0x34dc <xQueueSemaphoreTake+0x130>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3416:	8a 85       	ldd	r24, Y+10	; 0x0a
    3418:	9b 85       	ldd	r25, Y+11	; 0x0b
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	21 f4       	brne	.+8      	; 0x3426 <xQueueSemaphoreTake+0x7a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    341e:	0f 90       	pop	r0
    3420:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3422:	1c 86       	std	Y+12, r1	; 0x0c
    3424:	5b c0       	rjmp	.+182    	; 0x34dc <xQueueSemaphoreTake+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
    3426:	8c 81       	ldd	r24, Y+4	; 0x04
    3428:	88 23       	and	r24, r24
    342a:	31 f4       	brne	.+12     	; 0x3438 <xQueueSemaphoreTake+0x8c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    342c:	ce 01       	movw	r24, r28
    342e:	05 96       	adiw	r24, 0x05	; 5
    3430:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3438:	0f 90       	pop	r0
    343a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    343c:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	0f 92       	push	r0
    3446:	ea 81       	ldd	r30, Y+2	; 0x02
    3448:	fb 81       	ldd	r31, Y+3	; 0x03
    344a:	85 8d       	ldd	r24, Z+29	; 0x1d
    344c:	8f 3f       	cpi	r24, 0xFF	; 255
    344e:	19 f4       	brne	.+6      	; 0x3456 <xQueueSemaphoreTake+0xaa>
    3450:	ea 81       	ldd	r30, Y+2	; 0x02
    3452:	fb 81       	ldd	r31, Y+3	; 0x03
    3454:	15 8e       	std	Z+29, r1	; 0x1d
    3456:	ea 81       	ldd	r30, Y+2	; 0x02
    3458:	fb 81       	ldd	r31, Y+3	; 0x03
    345a:	86 8d       	ldd	r24, Z+30	; 0x1e
    345c:	8f 3f       	cpi	r24, 0xFF	; 255
    345e:	19 f4       	brne	.+6      	; 0x3466 <xQueueSemaphoreTake+0xba>
    3460:	ea 81       	ldd	r30, Y+2	; 0x02
    3462:	fb 81       	ldd	r31, Y+3	; 0x03
    3464:	16 8e       	std	Z+30, r1	; 0x1e
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    346a:	ce 01       	movw	r24, r28
    346c:	05 96       	adiw	r24, 0x05	; 5
    346e:	9e 01       	movw	r18, r28
    3470:	26 5f       	subi	r18, 0xF6	; 246
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	b9 01       	movw	r22, r18
    3476:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <xTaskCheckForTimeOut>
    347a:	88 23       	and	r24, r24
    347c:	09 f5       	brne	.+66     	; 0x34c0 <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	9b 81       	ldd	r25, Y+3	; 0x03
    3482:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <prvIsQueueEmpty>
    3486:	88 23       	and	r24, r24
    3488:	a1 f0       	breq	.+40     	; 0x34b2 <xQueueSemaphoreTake+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	9b 81       	ldd	r25, Y+3	; 0x03
    348e:	41 96       	adiw	r24, 0x11	; 17
    3490:	2a 85       	ldd	r18, Y+10	; 0x0a
    3492:	3b 85       	ldd	r19, Y+11	; 0x0b
    3494:	b9 01       	movw	r22, r18
    3496:	0e 94 b3 2b 	call	0x5766	; 0x5766 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	9b 81       	ldd	r25, Y+3	; 0x03
    349e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    34a2:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    34a6:	88 23       	and	r24, r24
    34a8:	09 f0       	breq	.+2      	; 0x34ac <xQueueSemaphoreTake+0x100>
    34aa:	93 cf       	rjmp	.-218    	; 0x33d2 <xQueueSemaphoreTake+0x26>
				{
					portYIELD_WITHIN_API();
    34ac:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
    34b0:	90 cf       	rjmp	.-224    	; 0x33d2 <xQueueSemaphoreTake+0x26>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    34b2:	8a 81       	ldd	r24, Y+2	; 0x02
    34b4:	9b 81       	ldd	r25, Y+3	; 0x03
    34b6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    34ba:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    34be:	89 cf       	rjmp	.-238    	; 0x33d2 <xQueueSemaphoreTake+0x26>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	9b 81       	ldd	r25, Y+3	; 0x03
    34c4:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    34c8:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    34cc:	8a 81       	ldd	r24, Y+2	; 0x02
    34ce:	9b 81       	ldd	r25, Y+3	; 0x03
    34d0:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <prvIsQueueEmpty>
    34d4:	88 23       	and	r24, r24
    34d6:	09 f4       	brne	.+2      	; 0x34da <xQueueSemaphoreTake+0x12e>
    34d8:	7c cf       	rjmp	.-264    	; 0x33d2 <xQueueSemaphoreTake+0x26>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    34da:	1c 86       	std	Y+12, r1	; 0x0c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    34dc:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    34de:	2c 96       	adiw	r28, 0x0c	; 12
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	cf 91       	pop	r28
    34ec:	df 91       	pop	r29
    34ee:	08 95       	ret

000034f0 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
    34f8:	60 97       	sbiw	r28, 0x10	; 16
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	f8 94       	cli
    34fe:	de bf       	out	0x3e, r29	; 62
    3500:	0f be       	out	0x3f, r0	; 63
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	9b 87       	std	Y+11, r25	; 0x0b
    3506:	8a 87       	std	Y+10, r24	; 0x0a
    3508:	7d 87       	std	Y+13, r23	; 0x0d
    350a:	6c 87       	std	Y+12, r22	; 0x0c
    350c:	5f 87       	std	Y+15, r21	; 0x0f
    350e:	4e 87       	std	Y+14, r20	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE;
    3510:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    3512:	8a 85       	ldd	r24, Y+10	; 0x0a
    3514:	9b 85       	ldd	r25, Y+11	; 0x0b
    3516:	9b 83       	std	Y+3, r25	; 0x03
    3518:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3520:	ea 81       	ldd	r30, Y+2	; 0x02
    3522:	fb 81       	ldd	r31, Y+3	; 0x03
    3524:	82 8d       	ldd	r24, Z+26	; 0x1a
    3526:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	88 23       	and	r24, r24
    352c:	31 f1       	breq	.+76     	; 0x357a <xQueuePeek+0x8a>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    352e:	ea 81       	ldd	r30, Y+2	; 0x02
    3530:	fb 81       	ldd	r31, Y+3	; 0x03
    3532:	86 81       	ldd	r24, Z+6	; 0x06
    3534:	97 81       	ldd	r25, Z+7	; 0x07
    3536:	9d 83       	std	Y+5, r25	; 0x05
    3538:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	9b 81       	ldd	r25, Y+3	; 0x03
    353e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3540:	3d 85       	ldd	r19, Y+13	; 0x0d
    3542:	b9 01       	movw	r22, r18
    3544:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    3548:	ea 81       	ldd	r30, Y+2	; 0x02
    354a:	fb 81       	ldd	r31, Y+3	; 0x03
    354c:	8c 81       	ldd	r24, Y+4	; 0x04
    354e:	9d 81       	ldd	r25, Y+5	; 0x05
    3550:	97 83       	std	Z+7, r25	; 0x07
    3552:	86 83       	std	Z+6, r24	; 0x06

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3554:	ea 81       	ldd	r30, Y+2	; 0x02
    3556:	fb 81       	ldd	r31, Y+3	; 0x03
    3558:	81 89       	ldd	r24, Z+17	; 0x11
    355a:	88 23       	and	r24, r24
    355c:	49 f0       	breq	.+18     	; 0x3570 <xQueuePeek+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	9b 81       	ldd	r25, Y+3	; 0x03
    3562:	41 96       	adiw	r24, 0x11	; 17
    3564:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    3568:	88 23       	and	r24, r24
    356a:	11 f0       	breq	.+4      	; 0x3570 <xQueuePeek+0x80>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    356c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    3570:	0f 90       	pop	r0
    3572:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	88 8b       	std	Y+16, r24	; 0x10
    3578:	63 c0       	rjmp	.+198    	; 0x3640 <xQueuePeek+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    357a:	8e 85       	ldd	r24, Y+14	; 0x0e
    357c:	9f 85       	ldd	r25, Y+15	; 0x0f
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	21 f4       	brne	.+8      	; 0x358a <xQueuePeek+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3582:	0f 90       	pop	r0
    3584:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3586:	18 8a       	std	Y+16, r1	; 0x10
    3588:	5b c0       	rjmp	.+182    	; 0x3640 <xQueuePeek+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    358a:	8e 81       	ldd	r24, Y+6	; 0x06
    358c:	88 23       	and	r24, r24
    358e:	31 f4       	brne	.+12     	; 0x359c <xQueuePeek+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    3590:	ce 01       	movw	r24, r28
    3592:	07 96       	adiw	r24, 0x07	; 7
    3594:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    359c:	0f 90       	pop	r0
    359e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    35a0:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	0f 92       	push	r0
    35aa:	ea 81       	ldd	r30, Y+2	; 0x02
    35ac:	fb 81       	ldd	r31, Y+3	; 0x03
    35ae:	85 8d       	ldd	r24, Z+29	; 0x1d
    35b0:	8f 3f       	cpi	r24, 0xFF	; 255
    35b2:	19 f4       	brne	.+6      	; 0x35ba <xQueuePeek+0xca>
    35b4:	ea 81       	ldd	r30, Y+2	; 0x02
    35b6:	fb 81       	ldd	r31, Y+3	; 0x03
    35b8:	15 8e       	std	Z+29, r1	; 0x1d
    35ba:	ea 81       	ldd	r30, Y+2	; 0x02
    35bc:	fb 81       	ldd	r31, Y+3	; 0x03
    35be:	86 8d       	ldd	r24, Z+30	; 0x1e
    35c0:	8f 3f       	cpi	r24, 0xFF	; 255
    35c2:	19 f4       	brne	.+6      	; 0x35ca <xQueuePeek+0xda>
    35c4:	ea 81       	ldd	r30, Y+2	; 0x02
    35c6:	fb 81       	ldd	r31, Y+3	; 0x03
    35c8:	16 8e       	std	Z+30, r1	; 0x1e
    35ca:	0f 90       	pop	r0
    35cc:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    35ce:	ce 01       	movw	r24, r28
    35d0:	07 96       	adiw	r24, 0x07	; 7
    35d2:	9e 01       	movw	r18, r28
    35d4:	22 5f       	subi	r18, 0xF2	; 242
    35d6:	3f 4f       	sbci	r19, 0xFF	; 255
    35d8:	b9 01       	movw	r22, r18
    35da:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <xTaskCheckForTimeOut>
    35de:	88 23       	and	r24, r24
    35e0:	09 f5       	brne	.+66     	; 0x3624 <xQueuePeek+0x134>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
    35e4:	9b 81       	ldd	r25, Y+3	; 0x03
    35e6:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <prvIsQueueEmpty>
    35ea:	88 23       	and	r24, r24
    35ec:	a1 f0       	breq	.+40     	; 0x3616 <xQueuePeek+0x126>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	9b 81       	ldd	r25, Y+3	; 0x03
    35f2:	41 96       	adiw	r24, 0x11	; 17
    35f4:	2e 85       	ldd	r18, Y+14	; 0x0e
    35f6:	3f 85       	ldd	r19, Y+15	; 0x0f
    35f8:	b9 01       	movw	r22, r18
    35fa:	0e 94 b3 2b 	call	0x5766	; 0x5766 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    35fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3600:	9b 81       	ldd	r25, Y+3	; 0x03
    3602:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3606:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    360a:	88 23       	and	r24, r24
    360c:	09 f0       	breq	.+2      	; 0x3610 <xQueuePeek+0x120>
    360e:	85 cf       	rjmp	.-246    	; 0x351a <xQueuePeek+0x2a>
				{
					portYIELD_WITHIN_API();
    3610:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
    3614:	82 cf       	rjmp	.-252    	; 0x351a <xQueuePeek+0x2a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	9b 81       	ldd	r25, Y+3	; 0x03
    361a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    361e:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    3622:	7b cf       	rjmp	.-266    	; 0x351a <xQueuePeek+0x2a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	9b 81       	ldd	r25, Y+3	; 0x03
    3628:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    362c:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3630:	8a 81       	ldd	r24, Y+2	; 0x02
    3632:	9b 81       	ldd	r25, Y+3	; 0x03
    3634:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <prvIsQueueEmpty>
    3638:	88 23       	and	r24, r24
    363a:	09 f4       	brne	.+2      	; 0x363e <xQueuePeek+0x14e>
    363c:	6e cf       	rjmp	.-292    	; 0x351a <xQueuePeek+0x2a>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    363e:	18 8a       	std	Y+16, r1	; 0x10
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    3640:	88 89       	ldd	r24, Y+16	; 0x10
}
    3642:	60 96       	adiw	r28, 0x10	; 16
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	08 95       	ret

00003654 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3654:	df 93       	push	r29
    3656:	cf 93       	push	r28
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	2c 97       	sbiw	r28, 0x0c	; 12
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	cd bf       	out	0x3d, r28	; 61
    3668:	98 87       	std	Y+8, r25	; 0x08
    366a:	8f 83       	std	Y+7, r24	; 0x07
    366c:	7a 87       	std	Y+10, r23	; 0x0a
    366e:	69 87       	std	Y+9, r22	; 0x09
    3670:	5c 87       	std	Y+12, r21	; 0x0c
    3672:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    3674:	8f 81       	ldd	r24, Y+7	; 0x07
    3676:	98 85       	ldd	r25, Y+8	; 0x08
    3678:	9c 83       	std	Y+4, r25	; 0x04
    367a:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    367c:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    367e:	eb 81       	ldd	r30, Y+3	; 0x03
    3680:	fc 81       	ldd	r31, Y+4	; 0x04
    3682:	82 8d       	ldd	r24, Z+26	; 0x1a
    3684:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3686:	8a 81       	ldd	r24, Y+2	; 0x02
    3688:	88 23       	and	r24, r24
    368a:	81 f1       	breq	.+96     	; 0x36ec <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    368c:	eb 81       	ldd	r30, Y+3	; 0x03
    368e:	fc 81       	ldd	r31, Y+4	; 0x04
    3690:	85 8d       	ldd	r24, Z+29	; 0x1d
    3692:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	9c 81       	ldd	r25, Y+4	; 0x04
    3698:	29 85       	ldd	r18, Y+9	; 0x09
    369a:	3a 85       	ldd	r19, Y+10	; 0x0a
    369c:	b9 01       	movw	r22, r18
    369e:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	81 50       	subi	r24, 0x01	; 1
    36a6:	eb 81       	ldd	r30, Y+3	; 0x03
    36a8:	fc 81       	ldd	r31, Y+4	; 0x04
    36aa:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	8f 3f       	cpi	r24, 0xFF	; 255
    36b0:	a9 f4       	brne	.+42     	; 0x36dc <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    36b2:	eb 81       	ldd	r30, Y+3	; 0x03
    36b4:	fc 81       	ldd	r31, Y+4	; 0x04
    36b6:	80 85       	ldd	r24, Z+8	; 0x08
    36b8:	88 23       	and	r24, r24
    36ba:	a9 f0       	breq	.+42     	; 0x36e6 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    36bc:	8b 81       	ldd	r24, Y+3	; 0x03
    36be:	9c 81       	ldd	r25, Y+4	; 0x04
    36c0:	08 96       	adiw	r24, 0x08	; 8
    36c2:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    36c6:	88 23       	and	r24, r24
    36c8:	71 f0       	breq	.+28     	; 0x36e6 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    36ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    36cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	51 f0       	breq	.+20     	; 0x36e6 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    36d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    36d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	80 83       	st	Z, r24
    36da:	05 c0       	rjmp	.+10     	; 0x36e6 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	8f 5f       	subi	r24, 0xFF	; 255
    36e0:	eb 81       	ldd	r30, Y+3	; 0x03
    36e2:	fc 81       	ldd	r31, Y+4	; 0x04
    36e4:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	8e 83       	std	Y+6, r24	; 0x06
    36ea:	01 c0       	rjmp	.+2      	; 0x36ee <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    36ec:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    36ee:	8e 81       	ldd	r24, Y+6	; 0x06
}
    36f0:	2c 96       	adiw	r28, 0x0c	; 12
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	2a 97       	sbiw	r28, 0x0a	; 10
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
    3716:	98 87       	std	Y+8, r25	; 0x08
    3718:	8f 83       	std	Y+7, r24	; 0x07
    371a:	7a 87       	std	Y+10, r23	; 0x0a
    371c:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    371e:	8f 81       	ldd	r24, Y+7	; 0x07
    3720:	98 85       	ldd	r25, Y+8	; 0x08
    3722:	9a 83       	std	Y+2, r25	; 0x02
    3724:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3726:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3728:	e9 81       	ldd	r30, Y+1	; 0x01
    372a:	fa 81       	ldd	r31, Y+2	; 0x02
    372c:	82 8d       	ldd	r24, Z+26	; 0x1a
    372e:	88 23       	and	r24, r24
    3730:	b1 f0       	breq	.+44     	; 0x375e <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    3732:	e9 81       	ldd	r30, Y+1	; 0x01
    3734:	fa 81       	ldd	r31, Y+2	; 0x02
    3736:	86 81       	ldd	r24, Z+6	; 0x06
    3738:	97 81       	ldd	r25, Z+7	; 0x07
    373a:	9c 83       	std	Y+4, r25	; 0x04
    373c:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
    3742:	29 85       	ldd	r18, Y+9	; 0x09
    3744:	3a 85       	ldd	r19, Y+10	; 0x0a
    3746:	b9 01       	movw	r22, r18
    3748:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    374c:	e9 81       	ldd	r30, Y+1	; 0x01
    374e:	fa 81       	ldd	r31, Y+2	; 0x02
    3750:	8b 81       	ldd	r24, Y+3	; 0x03
    3752:	9c 81       	ldd	r25, Y+4	; 0x04
    3754:	97 83       	std	Z+7, r25	; 0x07
    3756:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	8e 83       	std	Y+6, r24	; 0x06
    375c:	01 c0       	rjmp	.+2      	; 0x3760 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    375e:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3760:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3762:	2a 96       	adiw	r28, 0x0a	; 10
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	00 d0       	rcall	.+0      	; 0x377a <uxQueueMessagesWaiting+0x6>
    377a:	0f 92       	push	r0
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	9b 83       	std	Y+3, r25	; 0x03
    3782:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    378a:	ea 81       	ldd	r30, Y+2	; 0x02
    378c:	fb 81       	ldd	r31, Y+3	; 0x03
    378e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3790:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3792:	0f 90       	pop	r0
    3794:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3796:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	cf 91       	pop	r28
    37a0:	df 91       	pop	r29
    37a2:	08 95       	ret

000037a4 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <uxQueueSpacesAvailable+0x6>
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <uxQueueSpacesAvailable+0x8>
    37ac:	0f 92       	push	r0
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	9d 83       	std	Y+5, r25	; 0x05
    37b4:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    37b6:	8c 81       	ldd	r24, Y+4	; 0x04
    37b8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ba:	9a 83       	std	Y+2, r25	; 0x02
    37bc:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    37c4:	e9 81       	ldd	r30, Y+1	; 0x01
    37c6:	fa 81       	ldd	r31, Y+2	; 0x02
    37c8:	93 8d       	ldd	r25, Z+27	; 0x1b
    37ca:	e9 81       	ldd	r30, Y+1	; 0x01
    37cc:	fa 81       	ldd	r31, Y+2	; 0x02
    37ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    37d0:	29 2f       	mov	r18, r25
    37d2:	28 1b       	sub	r18, r24
    37d4:	82 2f       	mov	r24, r18
    37d6:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    37d8:	0f 90       	pop	r0
    37da:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    37dc:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	00 d0       	rcall	.+0      	; 0x37f4 <uxQueueMessagesWaitingFromISR+0x6>
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <uxQueueMessagesWaitingFromISR+0x8>
    37f6:	0f 92       	push	r0
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	9d 83       	std	Y+5, r25	; 0x05
    37fe:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    3800:	8c 81       	ldd	r24, Y+4	; 0x04
    3802:	9d 81       	ldd	r25, Y+5	; 0x05
    3804:	9a 83       	std	Y+2, r25	; 0x02
    3806:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
    3808:	e9 81       	ldd	r30, Y+1	; 0x01
    380a:	fa 81       	ldd	r31, Y+2	; 0x02
    380c:	82 8d       	ldd	r24, Z+26	; 0x1a
    380e:	8b 83       	std	Y+3, r24	; 0x03

	return uxReturn;
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	cf 91       	pop	r28
    381e:	df 91       	pop	r29
    3820:	08 95       	ret

00003822 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    3822:	df 93       	push	r29
    3824:	cf 93       	push	r28
    3826:	00 d0       	rcall	.+0      	; 0x3828 <vQueueDelete+0x6>
    3828:	00 d0       	rcall	.+0      	; 0x382a <vQueueDelete+0x8>
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	9c 83       	std	Y+4, r25	; 0x04
    3830:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = xQueue;
    3832:	8b 81       	ldd	r24, Y+3	; 0x03
    3834:	9c 81       	ldd	r25, Y+4	; 0x04
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	9a 81       	ldd	r25, Y+2	; 0x02
    383e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	08 95       	ret

00003850 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    3850:	df 93       	push	r29
    3852:	cf 93       	push	r28
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	27 97       	sbiw	r28, 0x07	; 7
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	de bf       	out	0x3e, r29	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	cd bf       	out	0x3d, r28	; 61
    3864:	9c 83       	std	Y+4, r25	; 0x04
    3866:	8b 83       	std	Y+3, r24	; 0x03
    3868:	7e 83       	std	Y+6, r23	; 0x06
    386a:	6d 83       	std	Y+5, r22	; 0x05
    386c:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    386e:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3870:	eb 81       	ldd	r30, Y+3	; 0x03
    3872:	fc 81       	ldd	r31, Y+4	; 0x04
    3874:	82 8d       	ldd	r24, Z+26	; 0x1a
    3876:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3878:	eb 81       	ldd	r30, Y+3	; 0x03
    387a:	fc 81       	ldd	r31, Y+4	; 0x04
    387c:	84 8d       	ldd	r24, Z+28	; 0x1c
    387e:	88 23       	and	r24, r24
    3880:	09 f4       	brne	.+2      	; 0x3884 <prvCopyDataToQueue+0x34>
    3882:	7d c0       	rjmp	.+250    	; 0x397e <prvCopyDataToQueue+0x12e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    3884:	8f 81       	ldd	r24, Y+7	; 0x07
    3886:	88 23       	and	r24, r24
    3888:	99 f5       	brne	.+102    	; 0x38f0 <prvCopyDataToQueue+0xa0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    388a:	eb 81       	ldd	r30, Y+3	; 0x03
    388c:	fc 81       	ldd	r31, Y+4	; 0x04
    388e:	62 81       	ldd	r22, Z+2	; 0x02
    3890:	73 81       	ldd	r23, Z+3	; 0x03
    3892:	eb 81       	ldd	r30, Y+3	; 0x03
    3894:	fc 81       	ldd	r31, Y+4	; 0x04
    3896:	84 8d       	ldd	r24, Z+28	; 0x1c
    3898:	48 2f       	mov	r20, r24
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	2d 81       	ldd	r18, Y+5	; 0x05
    389e:	3e 81       	ldd	r19, Y+6	; 0x06
    38a0:	cb 01       	movw	r24, r22
    38a2:	b9 01       	movw	r22, r18
    38a4:	0e 94 ca 32 	call	0x6594	; 0x6594 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    38a8:	eb 81       	ldd	r30, Y+3	; 0x03
    38aa:	fc 81       	ldd	r31, Y+4	; 0x04
    38ac:	22 81       	ldd	r18, Z+2	; 0x02
    38ae:	33 81       	ldd	r19, Z+3	; 0x03
    38b0:	eb 81       	ldd	r30, Y+3	; 0x03
    38b2:	fc 81       	ldd	r31, Y+4	; 0x04
    38b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    38b6:	88 2f       	mov	r24, r24
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	82 0f       	add	r24, r18
    38bc:	93 1f       	adc	r25, r19
    38be:	eb 81       	ldd	r30, Y+3	; 0x03
    38c0:	fc 81       	ldd	r31, Y+4	; 0x04
    38c2:	93 83       	std	Z+3, r25	; 0x03
    38c4:	82 83       	std	Z+2, r24	; 0x02
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    38c6:	eb 81       	ldd	r30, Y+3	; 0x03
    38c8:	fc 81       	ldd	r31, Y+4	; 0x04
    38ca:	22 81       	ldd	r18, Z+2	; 0x02
    38cc:	33 81       	ldd	r19, Z+3	; 0x03
    38ce:	eb 81       	ldd	r30, Y+3	; 0x03
    38d0:	fc 81       	ldd	r31, Y+4	; 0x04
    38d2:	84 81       	ldd	r24, Z+4	; 0x04
    38d4:	95 81       	ldd	r25, Z+5	; 0x05
    38d6:	28 17       	cp	r18, r24
    38d8:	39 07       	cpc	r19, r25
    38da:	08 f4       	brcc	.+2      	; 0x38de <prvCopyDataToQueue+0x8e>
    38dc:	50 c0       	rjmp	.+160    	; 0x397e <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    38de:	eb 81       	ldd	r30, Y+3	; 0x03
    38e0:	fc 81       	ldd	r31, Y+4	; 0x04
    38e2:	80 81       	ld	r24, Z
    38e4:	91 81       	ldd	r25, Z+1	; 0x01
    38e6:	eb 81       	ldd	r30, Y+3	; 0x03
    38e8:	fc 81       	ldd	r31, Y+4	; 0x04
    38ea:	93 83       	std	Z+3, r25	; 0x03
    38ec:	82 83       	std	Z+2, r24	; 0x02
    38ee:	47 c0       	rjmp	.+142    	; 0x397e <prvCopyDataToQueue+0x12e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    38f0:	eb 81       	ldd	r30, Y+3	; 0x03
    38f2:	fc 81       	ldd	r31, Y+4	; 0x04
    38f4:	66 81       	ldd	r22, Z+6	; 0x06
    38f6:	77 81       	ldd	r23, Z+7	; 0x07
    38f8:	eb 81       	ldd	r30, Y+3	; 0x03
    38fa:	fc 81       	ldd	r31, Y+4	; 0x04
    38fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    38fe:	48 2f       	mov	r20, r24
    3900:	50 e0       	ldi	r21, 0x00	; 0
    3902:	2d 81       	ldd	r18, Y+5	; 0x05
    3904:	3e 81       	ldd	r19, Y+6	; 0x06
    3906:	cb 01       	movw	r24, r22
    3908:	b9 01       	movw	r22, r18
    390a:	0e 94 ca 32 	call	0x6594	; 0x6594 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    390e:	eb 81       	ldd	r30, Y+3	; 0x03
    3910:	fc 81       	ldd	r31, Y+4	; 0x04
    3912:	26 81       	ldd	r18, Z+6	; 0x06
    3914:	37 81       	ldd	r19, Z+7	; 0x07
    3916:	eb 81       	ldd	r30, Y+3	; 0x03
    3918:	fc 81       	ldd	r31, Y+4	; 0x04
    391a:	84 8d       	ldd	r24, Z+28	; 0x1c
    391c:	88 2f       	mov	r24, r24
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	90 95       	com	r25
    3922:	81 95       	neg	r24
    3924:	9f 4f       	sbci	r25, 0xFF	; 255
    3926:	82 0f       	add	r24, r18
    3928:	93 1f       	adc	r25, r19
    392a:	eb 81       	ldd	r30, Y+3	; 0x03
    392c:	fc 81       	ldd	r31, Y+4	; 0x04
    392e:	97 83       	std	Z+7, r25	; 0x07
    3930:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3932:	eb 81       	ldd	r30, Y+3	; 0x03
    3934:	fc 81       	ldd	r31, Y+4	; 0x04
    3936:	26 81       	ldd	r18, Z+6	; 0x06
    3938:	37 81       	ldd	r19, Z+7	; 0x07
    393a:	eb 81       	ldd	r30, Y+3	; 0x03
    393c:	fc 81       	ldd	r31, Y+4	; 0x04
    393e:	80 81       	ld	r24, Z
    3940:	91 81       	ldd	r25, Z+1	; 0x01
    3942:	28 17       	cp	r18, r24
    3944:	39 07       	cpc	r19, r25
    3946:	90 f4       	brcc	.+36     	; 0x396c <prvCopyDataToQueue+0x11c>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    3948:	eb 81       	ldd	r30, Y+3	; 0x03
    394a:	fc 81       	ldd	r31, Y+4	; 0x04
    394c:	24 81       	ldd	r18, Z+4	; 0x04
    394e:	35 81       	ldd	r19, Z+5	; 0x05
    3950:	eb 81       	ldd	r30, Y+3	; 0x03
    3952:	fc 81       	ldd	r31, Y+4	; 0x04
    3954:	84 8d       	ldd	r24, Z+28	; 0x1c
    3956:	88 2f       	mov	r24, r24
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	90 95       	com	r25
    395c:	81 95       	neg	r24
    395e:	9f 4f       	sbci	r25, 0xFF	; 255
    3960:	82 0f       	add	r24, r18
    3962:	93 1f       	adc	r25, r19
    3964:	eb 81       	ldd	r30, Y+3	; 0x03
    3966:	fc 81       	ldd	r31, Y+4	; 0x04
    3968:	97 83       	std	Z+7, r25	; 0x07
    396a:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    396c:	8f 81       	ldd	r24, Y+7	; 0x07
    396e:	82 30       	cpi	r24, 0x02	; 2
    3970:	31 f4       	brne	.+12     	; 0x397e <prvCopyDataToQueue+0x12e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	88 23       	and	r24, r24
    3976:	19 f0       	breq	.+6      	; 0x397e <prvCopyDataToQueue+0x12e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    3978:	89 81       	ldd	r24, Y+1	; 0x01
    397a:	81 50       	subi	r24, 0x01	; 1
    397c:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	8f 5f       	subi	r24, 0xFF	; 255
    3982:	eb 81       	ldd	r30, Y+3	; 0x03
    3984:	fc 81       	ldd	r31, Y+4	; 0x04
    3986:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    3988:	8a 81       	ldd	r24, Y+2	; 0x02
}
    398a:	27 96       	adiw	r28, 0x07	; 7
    398c:	0f b6       	in	r0, 0x3f	; 63
    398e:	f8 94       	cli
    3990:	de bf       	out	0x3e, r29	; 62
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	cd bf       	out	0x3d, r28	; 61
    3996:	cf 91       	pop	r28
    3998:	df 91       	pop	r29
    399a:	08 95       	ret

0000399c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    399c:	df 93       	push	r29
    399e:	cf 93       	push	r28
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <prvCopyDataFromQueue+0x6>
    39a2:	00 d0       	rcall	.+0      	; 0x39a4 <prvCopyDataFromQueue+0x8>
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
    39a8:	9a 83       	std	Y+2, r25	; 0x02
    39aa:	89 83       	std	Y+1, r24	; 0x01
    39ac:	7c 83       	std	Y+4, r23	; 0x04
    39ae:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    39b0:	e9 81       	ldd	r30, Y+1	; 0x01
    39b2:	fa 81       	ldd	r31, Y+2	; 0x02
    39b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    39b6:	88 23       	and	r24, r24
    39b8:	89 f1       	breq	.+98     	; 0x3a1c <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    39ba:	e9 81       	ldd	r30, Y+1	; 0x01
    39bc:	fa 81       	ldd	r31, Y+2	; 0x02
    39be:	26 81       	ldd	r18, Z+6	; 0x06
    39c0:	37 81       	ldd	r19, Z+7	; 0x07
    39c2:	e9 81       	ldd	r30, Y+1	; 0x01
    39c4:	fa 81       	ldd	r31, Y+2	; 0x02
    39c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    39c8:	88 2f       	mov	r24, r24
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	82 0f       	add	r24, r18
    39ce:	93 1f       	adc	r25, r19
    39d0:	e9 81       	ldd	r30, Y+1	; 0x01
    39d2:	fa 81       	ldd	r31, Y+2	; 0x02
    39d4:	97 83       	std	Z+7, r25	; 0x07
    39d6:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    39d8:	e9 81       	ldd	r30, Y+1	; 0x01
    39da:	fa 81       	ldd	r31, Y+2	; 0x02
    39dc:	26 81       	ldd	r18, Z+6	; 0x06
    39de:	37 81       	ldd	r19, Z+7	; 0x07
    39e0:	e9 81       	ldd	r30, Y+1	; 0x01
    39e2:	fa 81       	ldd	r31, Y+2	; 0x02
    39e4:	84 81       	ldd	r24, Z+4	; 0x04
    39e6:	95 81       	ldd	r25, Z+5	; 0x05
    39e8:	28 17       	cp	r18, r24
    39ea:	39 07       	cpc	r19, r25
    39ec:	40 f0       	brcs	.+16     	; 0x39fe <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    39ee:	e9 81       	ldd	r30, Y+1	; 0x01
    39f0:	fa 81       	ldd	r31, Y+2	; 0x02
    39f2:	80 81       	ld	r24, Z
    39f4:	91 81       	ldd	r25, Z+1	; 0x01
    39f6:	e9 81       	ldd	r30, Y+1	; 0x01
    39f8:	fa 81       	ldd	r31, Y+2	; 0x02
    39fa:	97 83       	std	Z+7, r25	; 0x07
    39fc:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    39fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3a00:	fa 81       	ldd	r31, Y+2	; 0x02
    3a02:	46 81       	ldd	r20, Z+6	; 0x06
    3a04:	57 81       	ldd	r21, Z+7	; 0x07
    3a06:	e9 81       	ldd	r30, Y+1	; 0x01
    3a08:	fa 81       	ldd	r31, Y+2	; 0x02
    3a0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a0c:	28 2f       	mov	r18, r24
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	9c 81       	ldd	r25, Y+4	; 0x04
    3a14:	ba 01       	movw	r22, r20
    3a16:	a9 01       	movw	r20, r18
    3a18:	0e 94 ca 32 	call	0x6594	; 0x6594 <memcpy>
	}
}
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	cf 91       	pop	r28
    3a26:	df 91       	pop	r29
    3a28:	08 95       	ret

00003a2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <prvUnlockQueue+0x6>
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <prvUnlockQueue+0x8>
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	9c 83       	std	Y+4, r25	; 0x04
    3a38:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3a3a:	0f b6       	in	r0, 0x3f	; 63
    3a3c:	f8 94       	cli
    3a3e:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    3a40:	eb 81       	ldd	r30, Y+3	; 0x03
    3a42:	fc 81       	ldd	r31, Y+4	; 0x04
    3a44:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a46:	8a 83       	std	Y+2, r24	; 0x02
    3a48:	11 c0       	rjmp	.+34     	; 0x3a6c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3a4a:	eb 81       	ldd	r30, Y+3	; 0x03
    3a4c:	fc 81       	ldd	r31, Y+4	; 0x04
    3a4e:	81 89       	ldd	r24, Z+17	; 0x11
    3a50:	88 23       	and	r24, r24
    3a52:	79 f0       	breq	.+30     	; 0x3a72 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3a54:	8b 81       	ldd	r24, Y+3	; 0x03
    3a56:	9c 81       	ldd	r25, Y+4	; 0x04
    3a58:	41 96       	adiw	r24, 0x11	; 17
    3a5a:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    3a5e:	88 23       	and	r24, r24
    3a60:	11 f0       	breq	.+4      	; 0x3a66 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    3a62:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    3a66:	8a 81       	ldd	r24, Y+2	; 0x02
    3a68:	81 50       	subi	r24, 0x01	; 1
    3a6a:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    3a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6e:	18 16       	cp	r1, r24
    3a70:	64 f3       	brlt	.-40     	; 0x3a4a <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    3a72:	eb 81       	ldd	r30, Y+3	; 0x03
    3a74:	fc 81       	ldd	r31, Y+4	; 0x04
    3a76:	8f ef       	ldi	r24, 0xFF	; 255
    3a78:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3a7a:	0f 90       	pop	r0
    3a7c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    3a84:	eb 81       	ldd	r30, Y+3	; 0x03
    3a86:	fc 81       	ldd	r31, Y+4	; 0x04
    3a88:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a8a:	89 83       	std	Y+1, r24	; 0x01
    3a8c:	11 c0       	rjmp	.+34     	; 0x3ab0 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a90:	fc 81       	ldd	r31, Y+4	; 0x04
    3a92:	80 85       	ldd	r24, Z+8	; 0x08
    3a94:	88 23       	and	r24, r24
    3a96:	79 f0       	breq	.+30     	; 0x3ab6 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3a98:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9c:	08 96       	adiw	r24, 0x08	; 8
    3a9e:	0e 94 05 2c 	call	0x580a	; 0x580a <xTaskRemoveFromEventList>
    3aa2:	88 23       	and	r24, r24
    3aa4:	11 f0       	breq	.+4      	; 0x3aaa <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    3aa6:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    3aaa:	89 81       	ldd	r24, Y+1	; 0x01
    3aac:	81 50       	subi	r24, 0x01	; 1
    3aae:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	18 16       	cp	r1, r24
    3ab4:	64 f3       	brlt	.-40     	; 0x3a8e <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    3ab6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ab8:	fc 81       	ldd	r31, Y+4	; 0x04
    3aba:	8f ef       	ldi	r24, 0xFF	; 255
    3abc:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3abe:	0f 90       	pop	r0
    3ac0:	0f be       	out	0x3f, r0	; 63
}
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	00 d0       	rcall	.+0      	; 0x3ad6 <prvIsQueueEmpty+0x6>
    3ad6:	0f 92       	push	r0
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	9b 83       	std	Y+3, r25	; 0x03
    3ade:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    3aea:	82 8d       	ldd	r24, Z+26	; 0x1a
    3aec:	88 23       	and	r24, r24
    3aee:	19 f4       	brne	.+6      	; 0x3af6 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	89 83       	std	Y+1, r24	; 0x01
    3af4:	01 c0       	rjmp	.+2      	; 0x3af8 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    3af6:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3af8:	0f 90       	pop	r0
    3afa:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	00 d0       	rcall	.+0      	; 0x3b10 <xQueueIsQueueEmptyFromISR+0x6>
    3b10:	00 d0       	rcall	.+0      	; 0x3b12 <xQueueIsQueueEmptyFromISR+0x8>
    3b12:	0f 92       	push	r0
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	9d 83       	std	Y+5, r25	; 0x05
    3b1a:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    3b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b20:	9a 83       	std	Y+2, r25	; 0x02
    3b22:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    3b24:	e9 81       	ldd	r30, Y+1	; 0x01
    3b26:	fa 81       	ldd	r31, Y+2	; 0x02
    3b28:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b2a:	88 23       	and	r24, r24
    3b2c:	19 f4       	brne	.+6      	; 0x3b34 <xQueueIsQueueEmptyFromISR+0x2a>
	{
		xReturn = pdTRUE;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	8b 83       	std	Y+3, r24	; 0x03
    3b32:	01 c0       	rjmp	.+2      	; 0x3b36 <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    3b34:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    3b36:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	cf 91       	pop	r28
    3b44:	df 91       	pop	r29
    3b46:	08 95       	ret

00003b48 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    3b48:	df 93       	push	r29
    3b4a:	cf 93       	push	r28
    3b4c:	00 d0       	rcall	.+0      	; 0x3b4e <prvIsQueueFull+0x6>
    3b4e:	0f 92       	push	r0
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
    3b54:	9b 83       	std	Y+3, r25	; 0x03
    3b56:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3b5e:	ea 81       	ldd	r30, Y+2	; 0x02
    3b60:	fb 81       	ldd	r31, Y+3	; 0x03
    3b62:	92 8d       	ldd	r25, Z+26	; 0x1a
    3b64:	ea 81       	ldd	r30, Y+2	; 0x02
    3b66:	fb 81       	ldd	r31, Y+3	; 0x03
    3b68:	83 8d       	ldd	r24, Z+27	; 0x1b
    3b6a:	98 17       	cp	r25, r24
    3b6c:	19 f4       	brne	.+6      	; 0x3b74 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	89 83       	std	Y+1, r24	; 0x01
    3b72:	01 c0       	rjmp	.+2      	; 0x3b76 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    3b74:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3b76:	0f 90       	pop	r0
    3b78:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	cf 91       	pop	r28
    3b84:	df 91       	pop	r29
    3b86:	08 95       	ret

00003b88 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    3b88:	df 93       	push	r29
    3b8a:	cf 93       	push	r28
    3b8c:	00 d0       	rcall	.+0      	; 0x3b8e <xQueueIsQueueFullFromISR+0x6>
    3b8e:	00 d0       	rcall	.+0      	; 0x3b90 <xQueueIsQueueFullFromISR+0x8>
    3b90:	0f 92       	push	r0
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	9d 83       	std	Y+5, r25	; 0x05
    3b98:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    3b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b9e:	9a 83       	std	Y+2, r25	; 0x02
    3ba0:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ba6:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    3baa:	fa 81       	ldd	r31, Y+2	; 0x02
    3bac:	83 8d       	ldd	r24, Z+27	; 0x1b
    3bae:	98 17       	cp	r25, r24
    3bb0:	19 f4       	brne	.+6      	; 0x3bb8 <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	8b 83       	std	Y+3, r24	; 0x03
    3bb6:	01 c0       	rjmp	.+2      	; 0x3bba <xQueueIsQueueFullFromISR+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    3bb8:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    3bba:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	cf 91       	pop	r28
    3bc8:	df 91       	pop	r29
    3bca:	08 95       	ret

00003bcc <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
    3bcc:	0f 93       	push	r16
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
    3bd6:	28 97       	sbiw	r28, 0x08	; 8
    3bd8:	0f b6       	in	r0, 0x3f	; 63
    3bda:	f8 94       	cli
    3bdc:	de bf       	out	0x3e, r29	; 62
    3bde:	0f be       	out	0x3f, r0	; 63
    3be0:	cd bf       	out	0x3d, r28	; 61
    3be2:	9d 83       	std	Y+5, r25	; 0x05
    3be4:	8c 83       	std	Y+4, r24	; 0x04
    3be6:	7f 83       	std	Y+7, r23	; 0x07
    3be8:	6e 83       	std	Y+6, r22	; 0x06
    3bea:	48 87       	std	Y+8, r20	; 0x08

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
    3bec:	88 85       	ldd	r24, Y+8	; 0x08
    3bee:	81 30       	cpi	r24, 0x01	; 1
    3bf0:	19 f4       	brne	.+6      	; 0x3bf8 <xStreamBufferGenericCreate+0x2c>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	89 83       	std	Y+1, r24	; 0x01
    3bf6:	01 c0       	rjmp	.+2      	; 0x3bfa <xStreamBufferGenericCreate+0x2e>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
    3bf8:	19 82       	std	Y+1, r1	; 0x01
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
    3bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    3bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	21 f4       	brne	.+8      	; 0x3c0a <xStreamBufferGenericCreate+0x3e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	9f 83       	std	Y+7, r25	; 0x07
    3c08:	8e 83       	std	Y+6, r24	; 0x06
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
    3c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c0e:	01 96       	adiw	r24, 0x01	; 1
    3c10:	9d 83       	std	Y+5, r25	; 0x05
    3c12:	8c 83       	std	Y+4, r24	; 0x04
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
    3c14:	8c 81       	ldd	r24, Y+4	; 0x04
    3c16:	9d 81       	ldd	r25, Y+5	; 0x05
    3c18:	0f 96       	adiw	r24, 0x0f	; 15
    3c1a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    3c1e:	9b 83       	std	Y+3, r25	; 0x03
    3c20:	8a 83       	std	Y+2, r24	; 0x02

		if( pucAllocatedMemory != NULL )
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	9b 81       	ldd	r25, Y+3	; 0x03
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	89 f0       	breq	.+34     	; 0x3c4c <xStreamBufferGenericCreate+0x80>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
    3c2a:	6a 81       	ldd	r22, Y+2	; 0x02
    3c2c:	7b 81       	ldd	r23, Y+3	; 0x03
    3c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c30:	9b 81       	ldd	r25, Y+3	; 0x03
    3c32:	9c 01       	movw	r18, r24
    3c34:	21 5f       	subi	r18, 0xF1	; 241
    3c36:	3f 4f       	sbci	r19, 0xFF	; 255
    3c38:	4c 81       	ldd	r20, Y+4	; 0x04
    3c3a:	5d 81       	ldd	r21, Y+5	; 0x05
    3c3c:	ee 81       	ldd	r30, Y+6	; 0x06
    3c3e:	ff 81       	ldd	r31, Y+7	; 0x07
    3c40:	cb 01       	movw	r24, r22
    3c42:	b9 01       	movw	r22, r18
    3c44:	9f 01       	movw	r18, r30
    3c46:	09 81       	ldd	r16, Y+1	; 0x01
    3c48:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
    3c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4e:	9b 81       	ldd	r25, Y+3	; 0x03
	}
    3c50:	28 96       	adiw	r28, 0x08	; 8
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	cf 91       	pop	r28
    3c5e:	df 91       	pop	r29
    3c60:	0f 91       	pop	r16
    3c62:	08 95       	ret

00003c64 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
    3c64:	df 93       	push	r29
    3c66:	cf 93       	push	r28
    3c68:	00 d0       	rcall	.+0      	; 0x3c6a <vStreamBufferDelete+0x6>
    3c6a:	00 d0       	rcall	.+0      	; 0x3c6c <vStreamBufferDelete+0x8>
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	9c 83       	std	Y+4, r25	; 0x04
    3c72:	8b 83       	std	Y+3, r24	; 0x03
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
    3c74:	8b 81       	ldd	r24, Y+3	; 0x03
    3c76:	9c 81       	ldd	r25, Y+4	; 0x04
    3c78:	9a 83       	std	Y+2, r25	; 0x02
    3c7a:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    3c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c80:	86 85       	ldd	r24, Z+14	; 0x0e
    3c82:	88 2f       	mov	r24, r24
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	82 70       	andi	r24, 0x02	; 2
    3c88:	90 70       	andi	r25, 0x00	; 0
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	29 f4       	brne	.+10     	; 0x3c98 <vStreamBufferDelete+0x34>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
    3c8e:	89 81       	ldd	r24, Y+1	; 0x01
    3c90:	9a 81       	ldd	r25, Y+2	; 0x02
    3c92:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
    3c96:	08 c0       	rjmp	.+16     	; 0x3ca8 <vStreamBufferDelete+0x44>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	4f e0       	ldi	r20, 0x0F	; 15
    3ca2:	50 e0       	ldi	r21, 0x00	; 0
    3ca4:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <memset>
	}
}
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	08 95       	ret

00003cb6 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    3cb6:	0f 93       	push	r16
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <xStreamBufferReset+0x8>
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <xStreamBufferReset+0xa>
    3cc0:	0f 92       	push	r0
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
    3cc6:	9d 83       	std	Y+5, r25	; 0x05
    3cc8:	8c 83       	std	Y+4, r24	; 0x04
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3cca:	8c 81       	ldd	r24, Y+4	; 0x04
    3ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    3cce:	9b 83       	std	Y+3, r25	; 0x03
    3cd0:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn = pdFAIL;
    3cd2:	19 82       	std	Y+1, r1	; 0x01
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
    3cd4:	0f b6       	in	r0, 0x3f	; 63
    3cd6:	f8 94       	cli
    3cd8:	0f 92       	push	r0
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
    3cda:	ea 81       	ldd	r30, Y+2	; 0x02
    3cdc:	fb 81       	ldd	r31, Y+3	; 0x03
    3cde:	80 85       	ldd	r24, Z+8	; 0x08
    3ce0:	91 85       	ldd	r25, Z+9	; 0x09
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	f1 f4       	brne	.+60     	; 0x3d22 <xStreamBufferReset+0x6c>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
    3ce6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ce8:	fb 81       	ldd	r31, Y+3	; 0x03
    3cea:	82 85       	ldd	r24, Z+10	; 0x0a
    3cec:	93 85       	ldd	r25, Z+11	; 0x0b
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	c1 f4       	brne	.+48     	; 0x3d22 <xStreamBufferReset+0x6c>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
    3cf2:	ea 81       	ldd	r30, Y+2	; 0x02
    3cf4:	fb 81       	ldd	r31, Y+3	; 0x03
    3cf6:	24 85       	ldd	r18, Z+12	; 0x0c
    3cf8:	35 85       	ldd	r19, Z+13	; 0x0d
    3cfa:	ea 81       	ldd	r30, Y+2	; 0x02
    3cfc:	fb 81       	ldd	r31, Y+3	; 0x03
    3cfe:	44 81       	ldd	r20, Z+4	; 0x04
    3d00:	55 81       	ldd	r21, Z+5	; 0x05
    3d02:	ea 81       	ldd	r30, Y+2	; 0x02
    3d04:	fb 81       	ldd	r31, Y+3	; 0x03
    3d06:	a6 81       	ldd	r26, Z+6	; 0x06
    3d08:	b7 81       	ldd	r27, Z+7	; 0x07
    3d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d0e:	e6 85       	ldd	r30, Z+14	; 0x0e
    3d10:	8a 81       	ldd	r24, Y+2	; 0x02
    3d12:	9b 81       	ldd	r25, Y+3	; 0x03
    3d14:	b9 01       	movw	r22, r18
    3d16:	9d 01       	movw	r18, r26
    3d18:	0e 2f       	mov	r16, r30
    3d1a:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	89 83       	std	Y+1, r24	; 0x01

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
    3d22:	0f 90       	pop	r0
    3d24:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d28:	0f 90       	pop	r0
    3d2a:	0f 90       	pop	r0
    3d2c:	0f 90       	pop	r0
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	cf 91       	pop	r28
    3d34:	df 91       	pop	r29
    3d36:	0f 91       	pop	r16
    3d38:	08 95       	ret

00003d3a <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	27 97       	sbiw	r28, 0x07	; 7
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	f8 94       	cli
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	0f be       	out	0x3f, r0	; 63
    3d4c:	cd bf       	out	0x3d, r28	; 61
    3d4e:	9d 83       	std	Y+5, r25	; 0x05
    3d50:	8c 83       	std	Y+4, r24	; 0x04
    3d52:	7f 83       	std	Y+7, r23	; 0x07
    3d54:	6e 83       	std	Y+6, r22	; 0x06
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3d56:	8c 81       	ldd	r24, Y+4	; 0x04
    3d58:	9d 81       	ldd	r25, Y+5	; 0x05
    3d5a:	9b 83       	std	Y+3, r25	; 0x03
    3d5c:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
    3d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d60:	9f 81       	ldd	r25, Y+7	; 0x07
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	21 f4       	brne	.+8      	; 0x3d6e <xStreamBufferSetTriggerLevel+0x34>
	{
		xTriggerLevel = ( size_t ) 1;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	9f 83       	std	Y+7, r25	; 0x07
    3d6c:	8e 83       	std	Y+6, r24	; 0x06
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
    3d6e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d70:	fb 81       	ldd	r31, Y+3	; 0x03
    3d72:	24 81       	ldd	r18, Z+4	; 0x04
    3d74:	35 81       	ldd	r19, Z+5	; 0x05
    3d76:	8e 81       	ldd	r24, Y+6	; 0x06
    3d78:	9f 81       	ldd	r25, Y+7	; 0x07
    3d7a:	28 17       	cp	r18, r24
    3d7c:	39 07       	cpc	r19, r25
    3d7e:	48 f0       	brcs	.+18     	; 0x3d92 <xStreamBufferSetTriggerLevel+0x58>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    3d80:	ea 81       	ldd	r30, Y+2	; 0x02
    3d82:	fb 81       	ldd	r31, Y+3	; 0x03
    3d84:	8e 81       	ldd	r24, Y+6	; 0x06
    3d86:	9f 81       	ldd	r25, Y+7	; 0x07
    3d88:	97 83       	std	Z+7, r25	; 0x07
    3d8a:	86 83       	std	Z+6, r24	; 0x06
		xReturn = pdPASS;
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	89 83       	std	Y+1, r24	; 0x01
    3d90:	01 c0       	rjmp	.+2      	; 0x3d94 <xStreamBufferSetTriggerLevel+0x5a>
	}
	else
	{
		xReturn = pdFALSE;
    3d92:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d96:	27 96       	adiw	r28, 0x07	; 7
    3d98:	0f b6       	in	r0, 0x3f	; 63
    3d9a:	f8 94       	cli
    3d9c:	de bf       	out	0x3e, r29	; 62
    3d9e:	0f be       	out	0x3f, r0	; 63
    3da0:	cd bf       	out	0x3d, r28	; 61
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	08 95       	ret

00003da8 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <xStreamBufferSpacesAvailable+0x6>
    3dae:	00 d0       	rcall	.+0      	; 0x3db0 <xStreamBufferSpacesAvailable+0x8>
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <xStreamBufferSpacesAvailable+0xa>
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	9e 83       	std	Y+6, r25	; 0x06
    3db8:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3dba:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dbe:	9c 83       	std	Y+4, r25	; 0x04
    3dc0:	8b 83       	std	Y+3, r24	; 0x03
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    3dc2:	eb 81       	ldd	r30, Y+3	; 0x03
    3dc4:	fc 81       	ldd	r31, Y+4	; 0x04
    3dc6:	24 81       	ldd	r18, Z+4	; 0x04
    3dc8:	35 81       	ldd	r19, Z+5	; 0x05
    3dca:	eb 81       	ldd	r30, Y+3	; 0x03
    3dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	82 0f       	add	r24, r18
    3dd4:	93 1f       	adc	r25, r19
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= pxStreamBuffer->xHead;
    3dda:	eb 81       	ldd	r30, Y+3	; 0x03
    3ddc:	fc 81       	ldd	r31, Y+4	; 0x04
    3dde:	22 81       	ldd	r18, Z+2	; 0x02
    3de0:	33 81       	ldd	r19, Z+3	; 0x03
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	9a 81       	ldd	r25, Y+2	; 0x02
    3de6:	82 1b       	sub	r24, r18
    3de8:	93 0b       	sbc	r25, r19
    3dea:	9a 83       	std	Y+2, r25	; 0x02
    3dec:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= ( size_t ) 1;
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	9a 81       	ldd	r25, Y+2	; 0x02
    3df2:	01 97       	sbiw	r24, 0x01	; 1
    3df4:	9a 83       	std	Y+2, r25	; 0x02
    3df6:	89 83       	std	Y+1, r24	; 0x01

	if( xSpace >= pxStreamBuffer->xLength )
    3df8:	eb 81       	ldd	r30, Y+3	; 0x03
    3dfa:	fc 81       	ldd	r31, Y+4	; 0x04
    3dfc:	24 81       	ldd	r18, Z+4	; 0x04
    3dfe:	35 81       	ldd	r19, Z+5	; 0x05
    3e00:	89 81       	ldd	r24, Y+1	; 0x01
    3e02:	9a 81       	ldd	r25, Y+2	; 0x02
    3e04:	82 17       	cp	r24, r18
    3e06:	93 07       	cpc	r25, r19
    3e08:	50 f0       	brcs	.+20     	; 0x3e1e <xStreamBufferSpacesAvailable+0x76>
	{
		xSpace -= pxStreamBuffer->xLength;
    3e0a:	eb 81       	ldd	r30, Y+3	; 0x03
    3e0c:	fc 81       	ldd	r31, Y+4	; 0x04
    3e0e:	24 81       	ldd	r18, Z+4	; 0x04
    3e10:	35 81       	ldd	r19, Z+5	; 0x05
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	9a 81       	ldd	r25, Y+2	; 0x02
    3e16:	82 1b       	sub	r24, r18
    3e18:	93 0b       	sbc	r25, r19
    3e1a:	9a 83       	std	Y+2, r25	; 0x02
    3e1c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e22:	26 96       	adiw	r28, 0x06	; 6
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	cf 91       	pop	r28
    3e30:	df 91       	pop	r29
    3e32:	08 95       	ret

00003e34 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    3e34:	df 93       	push	r29
    3e36:	cf 93       	push	r28
    3e38:	00 d0       	rcall	.+0      	; 0x3e3a <xStreamBufferBytesAvailable+0x6>
    3e3a:	00 d0       	rcall	.+0      	; 0x3e3c <xStreamBufferBytesAvailable+0x8>
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <xStreamBufferBytesAvailable+0xa>
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	9e 83       	std	Y+6, r25	; 0x06
    3e44:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3e46:	8d 81       	ldd	r24, Y+5	; 0x05
    3e48:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4a:	9c 83       	std	Y+4, r25	; 0x04
    3e4c:	8b 83       	std	Y+3, r24	; 0x03
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
    3e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e50:	9c 81       	ldd	r25, Y+4	; 0x04
    3e52:	0e 94 04 25 	call	0x4a08	; 0x4a08 <prvBytesInBuffer>
    3e56:	9a 83       	std	Y+2, r25	; 0x02
    3e58:	89 83       	std	Y+1, r24	; 0x01
	return xReturn;
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e5e:	26 96       	adiw	r28, 0x06	; 6
    3e60:	0f b6       	in	r0, 0x3f	; 63
    3e62:	f8 94       	cli
    3e64:	de bf       	out	0x3e, r29	; 62
    3e66:	0f be       	out	0x3f, r0	; 63
    3e68:	cd bf       	out	0x3d, r28	; 61
    3e6a:	cf 91       	pop	r28
    3e6c:	df 91       	pop	r29
    3e6e:	08 95       	ret

00003e70 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
    3e70:	ef 92       	push	r14
    3e72:	ff 92       	push	r15
    3e74:	0f 93       	push	r16
    3e76:	1f 93       	push	r17
    3e78:	df 93       	push	r29
    3e7a:	cf 93       	push	r28
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
    3e80:	63 97       	sbiw	r28, 0x13	; 19
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	f8 94       	cli
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	9d 87       	std	Y+13, r25	; 0x0d
    3e8e:	8c 87       	std	Y+12, r24	; 0x0c
    3e90:	7f 87       	std	Y+15, r23	; 0x0f
    3e92:	6e 87       	std	Y+14, r22	; 0x0e
    3e94:	59 8b       	std	Y+17, r21	; 0x11
    3e96:	48 8b       	std	Y+16, r20	; 0x10
    3e98:	3b 8b       	std	Y+19, r19	; 0x13
    3e9a:	2a 8b       	std	Y+18, r18	; 0x12
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3e9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ea0:	98 87       	std	Y+8, r25	; 0x08
    3ea2:	8f 83       	std	Y+7, r24	; 0x07
size_t xReturn, xSpace = 0;
    3ea4:	1c 82       	std	Y+4, r1	; 0x04
    3ea6:	1b 82       	std	Y+3, r1	; 0x03
size_t xRequiredSpace = xDataLengthBytes;
    3ea8:	88 89       	ldd	r24, Y+16	; 0x10
    3eaa:	99 89       	ldd	r25, Y+17	; 0x11
    3eac:	9a 83       	std	Y+2, r25	; 0x02
    3eae:	89 83       	std	Y+1, r24	; 0x01

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3eb0:	ef 81       	ldd	r30, Y+7	; 0x07
    3eb2:	f8 85       	ldd	r31, Y+8	; 0x08
    3eb4:	86 85       	ldd	r24, Z+14	; 0x0e
    3eb6:	88 2f       	mov	r24, r24
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	81 70       	andi	r24, 0x01	; 1
    3ebc:	90 70       	andi	r25, 0x00	; 0
    3ebe:	88 23       	and	r24, r24
    3ec0:	29 f0       	breq	.+10     	; 0x3ecc <xStreamBufferSend+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec6:	02 96       	adiw	r24, 0x02	; 2
    3ec8:	9a 83       	std	Y+2, r25	; 0x02
    3eca:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    3ecc:	8a 89       	ldd	r24, Y+18	; 0x12
    3ece:	9b 89       	ldd	r25, Y+19	; 0x13
    3ed0:	00 97       	sbiw	r24, 0x00	; 0
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <xStreamBufferSend+0x66>
    3ed4:	40 c0       	rjmp	.+128    	; 0x3f56 <xStreamBufferSend+0xe6>
	{
		vTaskSetTimeOutState( &xTimeOut );
    3ed6:	ce 01       	movw	r24, r28
    3ed8:	09 96       	adiw	r24, 0x09	; 9
    3eda:	0e 94 cd 2c 	call	0x599a	; 0x599a <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	0f 92       	push	r0
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    3ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ee6:	98 85       	ldd	r25, Y+8	; 0x08
    3ee8:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <xStreamBufferSpacesAvailable>
    3eec:	9c 83       	std	Y+4, r25	; 0x04
    3eee:	8b 83       	std	Y+3, r24	; 0x03

				if( xSpace < xRequiredSpace )
    3ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef8:	28 17       	cp	r18, r24
    3efa:	39 07       	cpc	r19, r25
    3efc:	50 f5       	brcc	.+84     	; 0x3f52 <xStreamBufferSend+0xe2>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	0e 94 dd 31 	call	0x63ba	; 0x63ba <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    3f06:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <xTaskGetCurrentTaskHandle>
    3f0a:	ef 81       	ldd	r30, Y+7	; 0x07
    3f0c:	f8 85       	ldd	r31, Y+8	; 0x08
    3f0e:	93 87       	std	Z+11, r25	; 0x0b
    3f10:	82 87       	std	Z+10, r24	; 0x0a
				{
					taskEXIT_CRITICAL();
					break;
				}
			}
			taskEXIT_CRITICAL();
    3f12:	0f 90       	pop	r0
    3f14:	0f be       	out	0x3f, r0	; 63

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    3f16:	ea 89       	ldd	r30, Y+18	; 0x12
    3f18:	fb 89       	ldd	r31, Y+19	; 0x13
    3f1a:	60 e0       	ldi	r22, 0x00	; 0
    3f1c:	70 e0       	ldi	r23, 0x00	; 0
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e0       	ldi	r20, 0x00	; 0
    3f28:	50 e0       	ldi	r21, 0x00	; 0
    3f2a:	00 e0       	ldi	r16, 0x00	; 0
    3f2c:	10 e0       	ldi	r17, 0x00	; 0
    3f2e:	7f 01       	movw	r14, r30
    3f30:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
    3f34:	ef 81       	ldd	r30, Y+7	; 0x07
    3f36:	f8 85       	ldd	r31, Y+8	; 0x08
    3f38:	13 86       	std	Z+11, r1	; 0x0b
    3f3a:	12 86       	std	Z+10, r1	; 0x0a

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	09 96       	adiw	r24, 0x09	; 9
    3f40:	9e 01       	movw	r18, r28
    3f42:	2e 5e       	subi	r18, 0xEE	; 238
    3f44:	3f 4f       	sbci	r19, 0xFF	; 255
    3f46:	b9 01       	movw	r22, r18
    3f48:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <xTaskCheckForTimeOut>
    3f4c:	88 23       	and	r24, r24
    3f4e:	39 f2       	breq	.-114    	; 0x3ede <xStreamBufferSend+0x6e>
    3f50:	02 c0       	rjmp	.+4      	; 0x3f56 <xStreamBufferSend+0xe6>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
				}
				else
				{
					taskEXIT_CRITICAL();
    3f52:	0f 90       	pop	r0
    3f54:	0f be       	out	0x3f, r0	; 63
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
    3f56:	8b 81       	ldd	r24, Y+3	; 0x03
    3f58:	9c 81       	ldd	r25, Y+4	; 0x04
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	31 f4       	brne	.+12     	; 0x3f6a <xStreamBufferSend+0xfa>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    3f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    3f60:	98 85       	ldd	r25, Y+8	; 0x08
    3f62:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <xStreamBufferSpacesAvailable>
    3f66:	9c 83       	std	Y+4, r25	; 0x04
    3f68:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    3f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f6c:	98 85       	ldd	r25, Y+8	; 0x08
    3f6e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3f70:	3f 85       	ldd	r19, Y+15	; 0x0f
    3f72:	48 89       	ldd	r20, Y+16	; 0x10
    3f74:	59 89       	ldd	r21, Y+17	; 0x11
    3f76:	eb 81       	ldd	r30, Y+3	; 0x03
    3f78:	fc 81       	ldd	r31, Y+4	; 0x04
    3f7a:	a9 81       	ldd	r26, Y+1	; 0x01
    3f7c:	ba 81       	ldd	r27, Y+2	; 0x02
    3f7e:	b9 01       	movw	r22, r18
    3f80:	9f 01       	movw	r18, r30
    3f82:	8d 01       	movw	r16, r26
    3f84:	0e 94 7d 20 	call	0x40fa	; 0x40fa <prvWriteMessageToBuffer>
    3f88:	9e 83       	std	Y+6, r25	; 0x06
    3f8a:	8d 83       	std	Y+5, r24	; 0x05

	if( xReturn > ( size_t ) 0 )
    3f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f90:	00 97       	sbiw	r24, 0x00	; 0
    3f92:	39 f1       	breq	.+78     	; 0x3fe2 <xStreamBufferSend+0x172>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    3f94:	8f 81       	ldd	r24, Y+7	; 0x07
    3f96:	98 85       	ldd	r25, Y+8	; 0x08
    3f98:	0e 94 04 25 	call	0x4a08	; 0x4a08 <prvBytesInBuffer>
    3f9c:	9c 01       	movw	r18, r24
    3f9e:	ef 81       	ldd	r30, Y+7	; 0x07
    3fa0:	f8 85       	ldd	r31, Y+8	; 0x08
    3fa2:	86 81       	ldd	r24, Z+6	; 0x06
    3fa4:	97 81       	ldd	r25, Z+7	; 0x07
    3fa6:	28 17       	cp	r18, r24
    3fa8:	39 07       	cpc	r19, r25
    3faa:	d8 f0       	brcs	.+54     	; 0x3fe2 <xStreamBufferSend+0x172>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
    3fac:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
    3fb0:	ef 81       	ldd	r30, Y+7	; 0x07
    3fb2:	f8 85       	ldd	r31, Y+8	; 0x08
    3fb4:	80 85       	ldd	r24, Z+8	; 0x08
    3fb6:	91 85       	ldd	r25, Z+9	; 0x09
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	89 f0       	breq	.+34     	; 0x3fde <xStreamBufferSend+0x16e>
    3fbc:	ef 81       	ldd	r30, Y+7	; 0x07
    3fbe:	f8 85       	ldd	r31, Y+8	; 0x08
    3fc0:	80 85       	ldd	r24, Z+8	; 0x08
    3fc2:	91 85       	ldd	r25, Z+9	; 0x09
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	50 e0       	ldi	r21, 0x00	; 0
    3fc8:	60 e0       	ldi	r22, 0x00	; 0
    3fca:	70 e0       	ldi	r23, 0x00	; 0
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	00 e0       	ldi	r16, 0x00	; 0
    3fd0:	10 e0       	ldi	r17, 0x00	; 0
    3fd2:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <xTaskGenericNotify>
    3fd6:	ef 81       	ldd	r30, Y+7	; 0x07
    3fd8:	f8 85       	ldd	r31, Y+8	; 0x08
    3fda:	11 86       	std	Z+9, r1	; 0x09
    3fdc:	10 86       	std	Z+8, r1	; 0x08
    3fde:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
    3fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe4:	9e 81       	ldd	r25, Y+6	; 0x06
}
    3fe6:	63 96       	adiw	r28, 0x13	; 19
    3fe8:	0f b6       	in	r0, 0x3f	; 63
    3fea:	f8 94       	cli
    3fec:	de bf       	out	0x3e, r29	; 62
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	cd bf       	out	0x3d, r28	; 61
    3ff2:	cf 91       	pop	r28
    3ff4:	df 91       	pop	r29
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
    3ffa:	ff 90       	pop	r15
    3ffc:	ef 90       	pop	r14
    3ffe:	08 95       	ret

00004000 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
    4000:	ef 92       	push	r14
    4002:	ff 92       	push	r15
    4004:	0f 93       	push	r16
    4006:	1f 93       	push	r17
    4008:	df 93       	push	r29
    400a:	cf 93       	push	r28
    400c:	cd b7       	in	r28, 0x3d	; 61
    400e:	de b7       	in	r29, 0x3e	; 62
    4010:	61 97       	sbiw	r28, 0x11	; 17
    4012:	0f b6       	in	r0, 0x3f	; 63
    4014:	f8 94       	cli
    4016:	de bf       	out	0x3e, r29	; 62
    4018:	0f be       	out	0x3f, r0	; 63
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	9b 87       	std	Y+11, r25	; 0x0b
    401e:	8a 87       	std	Y+10, r24	; 0x0a
    4020:	7d 87       	std	Y+13, r23	; 0x0d
    4022:	6c 87       	std	Y+12, r22	; 0x0c
    4024:	5f 87       	std	Y+15, r21	; 0x0f
    4026:	4e 87       	std	Y+14, r20	; 0x0e
    4028:	39 8b       	std	Y+17, r19	; 0x11
    402a:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    402c:	8a 85       	ldd	r24, Y+10	; 0x0a
    402e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4030:	99 87       	std	Y+9, r25	; 0x09
    4032:	88 87       	std	Y+8, r24	; 0x08
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    4034:	8e 85       	ldd	r24, Y+14	; 0x0e
    4036:	9f 85       	ldd	r25, Y+15	; 0x0f
    4038:	9b 83       	std	Y+3, r25	; 0x03
    403a:	8a 83       	std	Y+2, r24	; 0x02

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    403c:	e8 85       	ldd	r30, Y+8	; 0x08
    403e:	f9 85       	ldd	r31, Y+9	; 0x09
    4040:	86 85       	ldd	r24, Z+14	; 0x0e
    4042:	88 2f       	mov	r24, r24
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	81 70       	andi	r24, 0x01	; 1
    4048:	90 70       	andi	r25, 0x00	; 0
    404a:	88 23       	and	r24, r24
    404c:	29 f0       	breq	.+10     	; 0x4058 <xStreamBufferSendFromISR+0x58>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    404e:	8a 81       	ldd	r24, Y+2	; 0x02
    4050:	9b 81       	ldd	r25, Y+3	; 0x03
    4052:	02 96       	adiw	r24, 0x02	; 2
    4054:	9b 83       	std	Y+3, r25	; 0x03
    4056:	8a 83       	std	Y+2, r24	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    4058:	88 85       	ldd	r24, Y+8	; 0x08
    405a:	99 85       	ldd	r25, Y+9	; 0x09
    405c:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <xStreamBufferSpacesAvailable>
    4060:	9d 83       	std	Y+5, r25	; 0x05
    4062:	8c 83       	std	Y+4, r24	; 0x04
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    4064:	88 85       	ldd	r24, Y+8	; 0x08
    4066:	99 85       	ldd	r25, Y+9	; 0x09
    4068:	2c 85       	ldd	r18, Y+12	; 0x0c
    406a:	3d 85       	ldd	r19, Y+13	; 0x0d
    406c:	4e 85       	ldd	r20, Y+14	; 0x0e
    406e:	5f 85       	ldd	r21, Y+15	; 0x0f
    4070:	ec 81       	ldd	r30, Y+4	; 0x04
    4072:	fd 81       	ldd	r31, Y+5	; 0x05
    4074:	aa 81       	ldd	r26, Y+2	; 0x02
    4076:	bb 81       	ldd	r27, Y+3	; 0x03
    4078:	b9 01       	movw	r22, r18
    407a:	9f 01       	movw	r18, r30
    407c:	8d 01       	movw	r16, r26
    407e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <prvWriteMessageToBuffer>
    4082:	9f 83       	std	Y+7, r25	; 0x07
    4084:	8e 83       	std	Y+6, r24	; 0x06

	if( xReturn > ( size_t ) 0 )
    4086:	8e 81       	ldd	r24, Y+6	; 0x06
    4088:	9f 81       	ldd	r25, Y+7	; 0x07
    408a:	00 97       	sbiw	r24, 0x00	; 0
    408c:	39 f1       	breq	.+78     	; 0x40dc <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    408e:	88 85       	ldd	r24, Y+8	; 0x08
    4090:	99 85       	ldd	r25, Y+9	; 0x09
    4092:	0e 94 04 25 	call	0x4a08	; 0x4a08 <prvBytesInBuffer>
    4096:	9c 01       	movw	r18, r24
    4098:	e8 85       	ldd	r30, Y+8	; 0x08
    409a:	f9 85       	ldd	r31, Y+9	; 0x09
    409c:	86 81       	ldd	r24, Z+6	; 0x06
    409e:	97 81       	ldd	r25, Z+7	; 0x07
    40a0:	28 17       	cp	r18, r24
    40a2:	39 07       	cpc	r19, r25
    40a4:	d8 f0       	brcs	.+54     	; 0x40dc <xStreamBufferSendFromISR+0xdc>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    40a6:	19 82       	std	Y+1, r1	; 0x01
    40a8:	e8 85       	ldd	r30, Y+8	; 0x08
    40aa:	f9 85       	ldd	r31, Y+9	; 0x09
    40ac:	80 85       	ldd	r24, Z+8	; 0x08
    40ae:	91 85       	ldd	r25, Z+9	; 0x09
    40b0:	00 97       	sbiw	r24, 0x00	; 0
    40b2:	a1 f0       	breq	.+40     	; 0x40dc <xStreamBufferSendFromISR+0xdc>
    40b4:	e8 85       	ldd	r30, Y+8	; 0x08
    40b6:	f9 85       	ldd	r31, Y+9	; 0x09
    40b8:	80 85       	ldd	r24, Z+8	; 0x08
    40ba:	91 85       	ldd	r25, Z+9	; 0x09
    40bc:	e8 89       	ldd	r30, Y+16	; 0x10
    40be:	f9 89       	ldd	r31, Y+17	; 0x11
    40c0:	40 e0       	ldi	r20, 0x00	; 0
    40c2:	50 e0       	ldi	r21, 0x00	; 0
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	70 e0       	ldi	r23, 0x00	; 0
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	00 e0       	ldi	r16, 0x00	; 0
    40cc:	10 e0       	ldi	r17, 0x00	; 0
    40ce:	7f 01       	movw	r14, r30
    40d0:	0e 94 5f 30 	call	0x60be	; 0x60be <xTaskGenericNotifyFromISR>
    40d4:	e8 85       	ldd	r30, Y+8	; 0x08
    40d6:	f9 85       	ldd	r31, Y+9	; 0x09
    40d8:	11 86       	std	Z+9, r1	; 0x09
    40da:	10 86       	std	Z+8, r1	; 0x08
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
    40dc:	8e 81       	ldd	r24, Y+6	; 0x06
    40de:	9f 81       	ldd	r25, Y+7	; 0x07
}
    40e0:	61 96       	adiw	r28, 0x11	; 17
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	1f 91       	pop	r17
    40f2:	0f 91       	pop	r16
    40f4:	ff 90       	pop	r15
    40f6:	ef 90       	pop	r14
    40f8:	08 95       	ret

000040fa <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
    40fa:	0f 93       	push	r16
    40fc:	1f 93       	push	r17
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	61 97       	sbiw	r28, 0x11	; 17
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	9d 83       	std	Y+5, r25	; 0x05
    4114:	8c 83       	std	Y+4, r24	; 0x04
    4116:	7f 83       	std	Y+7, r23	; 0x07
    4118:	6e 83       	std	Y+6, r22	; 0x06
    411a:	59 87       	std	Y+9, r21	; 0x09
    411c:	48 87       	std	Y+8, r20	; 0x08
    411e:	3b 87       	std	Y+11, r19	; 0x0b
    4120:	2a 87       	std	Y+10, r18	; 0x0a
    4122:	1d 87       	std	Y+13, r17	; 0x0d
    4124:	0c 87       	std	Y+12, r16	; 0x0c
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
    4126:	8a 85       	ldd	r24, Y+10	; 0x0a
    4128:	9b 85       	ldd	r25, Y+11	; 0x0b
    412a:	00 97       	sbiw	r24, 0x00	; 0
    412c:	11 f4       	brne	.+4      	; 0x4132 <prvWriteMessageToBuffer+0x38>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
    412e:	1b 82       	std	Y+3, r1	; 0x03
    4130:	38 c0       	rjmp	.+112    	; 0x41a2 <prvWriteMessageToBuffer+0xa8>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
    4132:	ec 81       	ldd	r30, Y+4	; 0x04
    4134:	fd 81       	ldd	r31, Y+5	; 0x05
    4136:	86 85       	ldd	r24, Z+14	; 0x0e
    4138:	88 2f       	mov	r24, r24
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	81 70       	andi	r24, 0x01	; 1
    413e:	90 70       	andi	r25, 0x00	; 0
    4140:	00 97       	sbiw	r24, 0x00	; 0
    4142:	d1 f4       	brne	.+52     	; 0x4178 <prvWriteMessageToBuffer+0x7e>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	8b 83       	std	Y+3, r24	; 0x03
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    4148:	28 85       	ldd	r18, Y+8	; 0x08
    414a:	39 85       	ldd	r19, Y+9	; 0x09
    414c:	39 8b       	std	Y+17, r19	; 0x11
    414e:	28 8b       	std	Y+16, r18	; 0x10
    4150:	8a 85       	ldd	r24, Y+10	; 0x0a
    4152:	9b 85       	ldd	r25, Y+11	; 0x0b
    4154:	9f 87       	std	Y+15, r25	; 0x0f
    4156:	8e 87       	std	Y+14, r24	; 0x0e
    4158:	2e 85       	ldd	r18, Y+14	; 0x0e
    415a:	3f 85       	ldd	r19, Y+15	; 0x0f
    415c:	88 89       	ldd	r24, Y+16	; 0x10
    415e:	99 89       	ldd	r25, Y+17	; 0x11
    4160:	82 17       	cp	r24, r18
    4162:	93 07       	cpc	r25, r19
    4164:	20 f4       	brcc	.+8      	; 0x416e <prvWriteMessageToBuffer+0x74>
    4166:	28 89       	ldd	r18, Y+16	; 0x10
    4168:	39 89       	ldd	r19, Y+17	; 0x11
    416a:	3f 87       	std	Y+15, r19	; 0x0f
    416c:	2e 87       	std	Y+14, r18	; 0x0e
    416e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4170:	9f 85       	ldd	r25, Y+15	; 0x0f
    4172:	99 87       	std	Y+9, r25	; 0x09
    4174:	88 87       	std	Y+8, r24	; 0x08
    4176:	15 c0       	rjmp	.+42     	; 0x41a2 <prvWriteMessageToBuffer+0xa8>
	}
	else if( xSpace >= xRequiredSpace )
    4178:	2a 85       	ldd	r18, Y+10	; 0x0a
    417a:	3b 85       	ldd	r19, Y+11	; 0x0b
    417c:	8c 85       	ldd	r24, Y+12	; 0x0c
    417e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4180:	28 17       	cp	r18, r24
    4182:	39 07       	cpc	r19, r25
    4184:	68 f0       	brcs	.+26     	; 0x41a0 <prvWriteMessageToBuffer+0xa6>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	8b 83       	std	Y+3, r24	; 0x03
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
    418a:	9e 01       	movw	r18, r28
    418c:	28 5f       	subi	r18, 0xF8	; 248
    418e:	3f 4f       	sbci	r19, 0xFF	; 255
    4190:	8c 81       	ldd	r24, Y+4	; 0x04
    4192:	9d 81       	ldd	r25, Y+5	; 0x05
    4194:	b9 01       	movw	r22, r18
    4196:	42 e0       	ldi	r20, 0x02	; 2
    4198:	50 e0       	ldi	r21, 0x00	; 0
    419a:	0e 94 ca 23 	call	0x4794	; 0x4794 <prvWriteBytesToBuffer>
    419e:	01 c0       	rjmp	.+2      	; 0x41a2 <prvWriteMessageToBuffer+0xa8>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
    41a0:	1b 82       	std	Y+3, r1	; 0x03
	}

	if( xShouldWrite != pdFALSE )
    41a2:	8b 81       	ldd	r24, Y+3	; 0x03
    41a4:	88 23       	and	r24, r24
    41a6:	61 f0       	breq	.+24     	; 0x41c0 <prvWriteMessageToBuffer+0xc6>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
    41a8:	2e 81       	ldd	r18, Y+6	; 0x06
    41aa:	3f 81       	ldd	r19, Y+7	; 0x07
    41ac:	48 85       	ldd	r20, Y+8	; 0x08
    41ae:	59 85       	ldd	r21, Y+9	; 0x09
    41b0:	8c 81       	ldd	r24, Y+4	; 0x04
    41b2:	9d 81       	ldd	r25, Y+5	; 0x05
    41b4:	b9 01       	movw	r22, r18
    41b6:	0e 94 ca 23 	call	0x4794	; 0x4794 <prvWriteBytesToBuffer>
    41ba:	9a 83       	std	Y+2, r25	; 0x02
    41bc:	89 83       	std	Y+1, r24	; 0x01
    41be:	02 c0       	rjmp	.+4      	; 0x41c4 <prvWriteMessageToBuffer+0xca>
	}
	else
	{
		xReturn = 0;
    41c0:	1a 82       	std	Y+2, r1	; 0x02
    41c2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    41c8:	61 96       	adiw	r28, 0x11	; 17
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
    41d4:	cf 91       	pop	r28
    41d6:	df 91       	pop	r29
    41d8:	1f 91       	pop	r17
    41da:	0f 91       	pop	r16
    41dc:	08 95       	ret

000041de <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
    41de:	ef 92       	push	r14
    41e0:	ff 92       	push	r15
    41e2:	0f 93       	push	r16
    41e4:	1f 93       	push	r17
    41e6:	df 93       	push	r29
    41e8:	cf 93       	push	r28
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
    41ee:	60 97       	sbiw	r28, 0x10	; 16
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	de bf       	out	0x3e, r29	; 62
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	cd bf       	out	0x3d, r28	; 61
    41fa:	9a 87       	std	Y+10, r25	; 0x0a
    41fc:	89 87       	std	Y+9, r24	; 0x09
    41fe:	7c 87       	std	Y+12, r23	; 0x0c
    4200:	6b 87       	std	Y+11, r22	; 0x0b
    4202:	5e 87       	std	Y+14, r21	; 0x0e
    4204:	4d 87       	std	Y+13, r20	; 0x0d
    4206:	38 8b       	std	Y+16, r19	; 0x10
    4208:	2f 87       	std	Y+15, r18	; 0x0f
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    420a:	89 85       	ldd	r24, Y+9	; 0x09
    420c:	9a 85       	ldd	r25, Y+10	; 0x0a
    420e:	98 87       	std	Y+8, r25	; 0x08
    4210:	8f 83       	std	Y+7, r24	; 0x07
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    4212:	1e 82       	std	Y+6, r1	; 0x06
    4214:	1d 82       	std	Y+5, r1	; 0x05
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    4216:	ef 81       	ldd	r30, Y+7	; 0x07
    4218:	f8 85       	ldd	r31, Y+8	; 0x08
    421a:	86 85       	ldd	r24, Z+14	; 0x0e
    421c:	88 2f       	mov	r24, r24
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	81 70       	andi	r24, 0x01	; 1
    4222:	90 70       	andi	r25, 0x00	; 0
    4224:	88 23       	and	r24, r24
    4226:	29 f0       	breq	.+10     	; 0x4232 <xStreamBufferReceive+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    4228:	82 e0       	ldi	r24, 0x02	; 2
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	9a 83       	std	Y+2, r25	; 0x02
    422e:	89 83       	std	Y+1, r24	; 0x01
    4230:	02 c0       	rjmp	.+4      	; 0x4236 <xStreamBufferReceive+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    4232:	1a 82       	std	Y+2, r1	; 0x02
    4234:	19 82       	std	Y+1, r1	; 0x01
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    4236:	8f 85       	ldd	r24, Y+15	; 0x0f
    4238:	98 89       	ldd	r25, Y+16	; 0x10
    423a:	00 97       	sbiw	r24, 0x00	; 0
    423c:	09 f4       	brne	.+2      	; 0x4240 <xStreamBufferReceive+0x62>
    423e:	3d c0       	rjmp	.+122    	; 0x42ba <xStreamBufferReceive+0xdc>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	f8 94       	cli
    4244:	0f 92       	push	r0
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    4246:	8f 81       	ldd	r24, Y+7	; 0x07
    4248:	98 85       	ldd	r25, Y+8	; 0x08
    424a:	0e 94 04 25 	call	0x4a08	; 0x4a08 <prvBytesInBuffer>
    424e:	9c 83       	std	Y+4, r25	; 0x04
    4250:	8b 83       	std	Y+3, r24	; 0x03
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
    4252:	2b 81       	ldd	r18, Y+3	; 0x03
    4254:	3c 81       	ldd	r19, Y+4	; 0x04
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	9a 81       	ldd	r25, Y+2	; 0x02
    425a:	82 17       	cp	r24, r18
    425c:	93 07       	cpc	r25, r19
    425e:	50 f0       	brcs	.+20     	; 0x4274 <xStreamBufferReceive+0x96>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	0e 94 dd 31 	call	0x63ba	; 0x63ba <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    4268:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <xTaskGetCurrentTaskHandle>
    426c:	ef 81       	ldd	r30, Y+7	; 0x07
    426e:	f8 85       	ldd	r31, Y+8	; 0x08
    4270:	91 87       	std	Z+9, r25	; 0x09
    4272:	80 87       	std	Z+8, r24	; 0x08
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4274:	0f 90       	pop	r0
    4276:	0f be       	out	0x3f, r0	; 63

		if( xBytesAvailable <= xBytesToStoreMessageLength )
    4278:	2b 81       	ldd	r18, Y+3	; 0x03
    427a:	3c 81       	ldd	r19, Y+4	; 0x04
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	82 17       	cp	r24, r18
    4282:	93 07       	cpc	r25, r19
    4284:	00 f1       	brcs	.+64     	; 0x42c6 <xStreamBufferReceive+0xe8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    4286:	ef 85       	ldd	r30, Y+15	; 0x0f
    4288:	f8 89       	ldd	r31, Y+16	; 0x10
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	70 e0       	ldi	r23, 0x00	; 0
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	40 e0       	ldi	r20, 0x00	; 0
    4298:	50 e0       	ldi	r21, 0x00	; 0
    429a:	00 e0       	ldi	r16, 0x00	; 0
    429c:	10 e0       	ldi	r17, 0x00	; 0
    429e:	7f 01       	movw	r14, r30
    42a0:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
    42a4:	ef 81       	ldd	r30, Y+7	; 0x07
    42a6:	f8 85       	ldd	r31, Y+8	; 0x08
    42a8:	11 86       	std	Z+9, r1	; 0x09
    42aa:	10 86       	std	Z+8, r1	; 0x08

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    42ac:	8f 81       	ldd	r24, Y+7	; 0x07
    42ae:	98 85       	ldd	r25, Y+8	; 0x08
    42b0:	0e 94 04 25 	call	0x4a08	; 0x4a08 <prvBytesInBuffer>
    42b4:	9c 83       	std	Y+4, r25	; 0x04
    42b6:	8b 83       	std	Y+3, r24	; 0x03
    42b8:	06 c0       	rjmp	.+12     	; 0x42c6 <xStreamBufferReceive+0xe8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    42ba:	8f 81       	ldd	r24, Y+7	; 0x07
    42bc:	98 85       	ldd	r25, Y+8	; 0x08
    42be:	0e 94 04 25 	call	0x4a08	; 0x4a08 <prvBytesInBuffer>
    42c2:	9c 83       	std	Y+4, r25	; 0x04
    42c4:	8b 83       	std	Y+3, r24	; 0x03
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    42c6:	2b 81       	ldd	r18, Y+3	; 0x03
    42c8:	3c 81       	ldd	r19, Y+4	; 0x04
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	9a 81       	ldd	r25, Y+2	; 0x02
    42ce:	82 17       	cp	r24, r18
    42d0:	93 07       	cpc	r25, r19
    42d2:	80 f5       	brcc	.+96     	; 0x4334 <xStreamBufferReceive+0x156>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    42d4:	8f 81       	ldd	r24, Y+7	; 0x07
    42d6:	98 85       	ldd	r25, Y+8	; 0x08
    42d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    42da:	3c 85       	ldd	r19, Y+12	; 0x0c
    42dc:	4d 85       	ldd	r20, Y+13	; 0x0d
    42de:	5e 85       	ldd	r21, Y+14	; 0x0e
    42e0:	eb 81       	ldd	r30, Y+3	; 0x03
    42e2:	fc 81       	ldd	r31, Y+4	; 0x04
    42e4:	a9 81       	ldd	r26, Y+1	; 0x01
    42e6:	ba 81       	ldd	r27, Y+2	; 0x02
    42e8:	b9 01       	movw	r22, r18
    42ea:	9f 01       	movw	r18, r30
    42ec:	8d 01       	movw	r16, r26
    42ee:	0e 94 73 22 	call	0x44e6	; 0x44e6 <prvReadMessageFromBuffer>
    42f2:	9e 83       	std	Y+6, r25	; 0x06
    42f4:	8d 83       	std	Y+5, r24	; 0x05

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    42f6:	8d 81       	ldd	r24, Y+5	; 0x05
    42f8:	9e 81       	ldd	r25, Y+6	; 0x06
    42fa:	00 97       	sbiw	r24, 0x00	; 0
    42fc:	d9 f0       	breq	.+54     	; 0x4334 <xStreamBufferReceive+0x156>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
    42fe:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
    4302:	ef 81       	ldd	r30, Y+7	; 0x07
    4304:	f8 85       	ldd	r31, Y+8	; 0x08
    4306:	82 85       	ldd	r24, Z+10	; 0x0a
    4308:	93 85       	ldd	r25, Z+11	; 0x0b
    430a:	00 97       	sbiw	r24, 0x00	; 0
    430c:	89 f0       	breq	.+34     	; 0x4330 <xStreamBufferReceive+0x152>
    430e:	ef 81       	ldd	r30, Y+7	; 0x07
    4310:	f8 85       	ldd	r31, Y+8	; 0x08
    4312:	82 85       	ldd	r24, Z+10	; 0x0a
    4314:	93 85       	ldd	r25, Z+11	; 0x0b
    4316:	40 e0       	ldi	r20, 0x00	; 0
    4318:	50 e0       	ldi	r21, 0x00	; 0
    431a:	60 e0       	ldi	r22, 0x00	; 0
    431c:	70 e0       	ldi	r23, 0x00	; 0
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	00 e0       	ldi	r16, 0x00	; 0
    4322:	10 e0       	ldi	r17, 0x00	; 0
    4324:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <xTaskGenericNotify>
    4328:	ef 81       	ldd	r30, Y+7	; 0x07
    432a:	f8 85       	ldd	r31, Y+8	; 0x08
    432c:	13 86       	std	Z+11, r1	; 0x0b
    432e:	12 86       	std	Z+10, r1	; 0x0a
    4330:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
    4334:	8d 81       	ldd	r24, Y+5	; 0x05
    4336:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4338:	60 96       	adiw	r28, 0x10	; 16
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	f8 94       	cli
    433e:	de bf       	out	0x3e, r29	; 62
    4340:	0f be       	out	0x3f, r0	; 63
    4342:	cd bf       	out	0x3d, r28	; 61
    4344:	cf 91       	pop	r28
    4346:	df 91       	pop	r29
    4348:	1f 91       	pop	r17
    434a:	0f 91       	pop	r16
    434c:	ff 90       	pop	r15
    434e:	ef 90       	pop	r14
    4350:	08 95       	ret

00004352 <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    4352:	df 93       	push	r29
    4354:	cf 93       	push	r28
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	2c 97       	sbiw	r28, 0x0c	; 12
    435c:	0f b6       	in	r0, 0x3f	; 63
    435e:	f8 94       	cli
    4360:	de bf       	out	0x3e, r29	; 62
    4362:	0f be       	out	0x3f, r0	; 63
    4364:	cd bf       	out	0x3d, r28	; 61
    4366:	9c 87       	std	Y+12, r25	; 0x0c
    4368:	8b 87       	std	Y+11, r24	; 0x0b
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    436a:	8b 85       	ldd	r24, Y+11	; 0x0b
    436c:	9c 85       	ldd	r25, Y+12	; 0x0c
    436e:	98 87       	std	Y+8, r25	; 0x08
    4370:	8f 83       	std	Y+7, r24	; 0x07
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    4372:	ef 81       	ldd	r30, Y+7	; 0x07
    4374:	f8 85       	ldd	r31, Y+8	; 0x08
    4376:	86 85       	ldd	r24, Z+14	; 0x0e
    4378:	88 2f       	mov	r24, r24
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	81 70       	andi	r24, 0x01	; 1
    437e:	90 70       	andi	r25, 0x00	; 0
    4380:	88 23       	and	r24, r24
    4382:	61 f1       	breq	.+88     	; 0x43dc <xStreamBufferNextMessageLengthBytes+0x8a>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    4384:	8f 81       	ldd	r24, Y+7	; 0x07
    4386:	98 85       	ldd	r25, Y+8	; 0x08
    4388:	0e 94 04 25 	call	0x4a08	; 0x4a08 <prvBytesInBuffer>
    438c:	9c 83       	std	Y+4, r25	; 0x04
    438e:	8b 83       	std	Y+3, r24	; 0x03
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	9c 81       	ldd	r25, Y+4	; 0x04
    4394:	83 30       	cpi	r24, 0x03	; 3
    4396:	91 05       	cpc	r25, r1
    4398:	f0 f0       	brcs	.+60     	; 0x43d6 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
    439a:	ef 81       	ldd	r30, Y+7	; 0x07
    439c:	f8 85       	ldd	r31, Y+8	; 0x08
    439e:	80 81       	ld	r24, Z
    43a0:	91 81       	ldd	r25, Z+1	; 0x01
    43a2:	9a 83       	std	Y+2, r25	; 0x02
    43a4:	89 83       	std	Y+1, r24	; 0x01
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
    43a6:	9e 01       	movw	r18, r28
    43a8:	27 5f       	subi	r18, 0xF7	; 247
    43aa:	3f 4f       	sbci	r19, 0xFF	; 255
    43ac:	8f 81       	ldd	r24, Y+7	; 0x07
    43ae:	98 85       	ldd	r25, Y+8	; 0x08
    43b0:	eb 81       	ldd	r30, Y+3	; 0x03
    43b2:	fc 81       	ldd	r31, Y+4	; 0x04
    43b4:	b9 01       	movw	r22, r18
    43b6:	42 e0       	ldi	r20, 0x02	; 2
    43b8:	50 e0       	ldi	r21, 0x00	; 0
    43ba:	9f 01       	movw	r18, r30
    43bc:	0e 94 57 24 	call	0x48ae	; 0x48ae <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
    43c0:	89 85       	ldd	r24, Y+9	; 0x09
    43c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c4:	9e 83       	std	Y+6, r25	; 0x06
    43c6:	8d 83       	std	Y+5, r24	; 0x05
			pxStreamBuffer->xTail = xOriginalTail;
    43c8:	ef 81       	ldd	r30, Y+7	; 0x07
    43ca:	f8 85       	ldd	r31, Y+8	; 0x08
    43cc:	89 81       	ldd	r24, Y+1	; 0x01
    43ce:	9a 81       	ldd	r25, Y+2	; 0x02
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	80 83       	st	Z, r24
    43d4:	05 c0       	rjmp	.+10     	; 0x43e0 <xStreamBufferNextMessageLengthBytes+0x8e>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
    43d6:	1e 82       	std	Y+6, r1	; 0x06
    43d8:	1d 82       	std	Y+5, r1	; 0x05
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <xStreamBufferNextMessageLengthBytes+0x8e>
		}
	}
	else
	{
		xReturn = 0;
    43dc:	1e 82       	std	Y+6, r1	; 0x06
    43de:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    43e0:	8d 81       	ldd	r24, Y+5	; 0x05
    43e2:	9e 81       	ldd	r25, Y+6	; 0x06
}
    43e4:	2c 96       	adiw	r28, 0x0c	; 12
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	f8 94       	cli
    43ea:	de bf       	out	0x3e, r29	; 62
    43ec:	0f be       	out	0x3f, r0	; 63
    43ee:	cd bf       	out	0x3d, r28	; 61
    43f0:	cf 91       	pop	r28
    43f2:	df 91       	pop	r29
    43f4:	08 95       	ret

000043f6 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
    43f6:	ef 92       	push	r14
    43f8:	ff 92       	push	r15
    43fa:	0f 93       	push	r16
    43fc:	1f 93       	push	r17
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	61 97       	sbiw	r28, 0x11	; 17
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	9b 87       	std	Y+11, r25	; 0x0b
    4414:	8a 87       	std	Y+10, r24	; 0x0a
    4416:	7d 87       	std	Y+13, r23	; 0x0d
    4418:	6c 87       	std	Y+12, r22	; 0x0c
    441a:	5f 87       	std	Y+15, r21	; 0x0f
    441c:	4e 87       	std	Y+14, r20	; 0x0e
    441e:	39 8b       	std	Y+17, r19	; 0x11
    4420:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4422:	8a 85       	ldd	r24, Y+10	; 0x0a
    4424:	9b 85       	ldd	r25, Y+11	; 0x0b
    4426:	99 87       	std	Y+9, r25	; 0x09
    4428:	88 87       	std	Y+8, r24	; 0x08
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    442a:	1f 82       	std	Y+7, r1	; 0x07
    442c:	1e 82       	std	Y+6, r1	; 0x06
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    442e:	e8 85       	ldd	r30, Y+8	; 0x08
    4430:	f9 85       	ldd	r31, Y+9	; 0x09
    4432:	86 85       	ldd	r24, Z+14	; 0x0e
    4434:	88 2f       	mov	r24, r24
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	81 70       	andi	r24, 0x01	; 1
    443a:	90 70       	andi	r25, 0x00	; 0
    443c:	88 23       	and	r24, r24
    443e:	29 f0       	breq	.+10     	; 0x444a <xStreamBufferReceiveFromISR+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    4440:	82 e0       	ldi	r24, 0x02	; 2
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	9b 83       	std	Y+3, r25	; 0x03
    4446:	8a 83       	std	Y+2, r24	; 0x02
    4448:	02 c0       	rjmp	.+4      	; 0x444e <xStreamBufferReceiveFromISR+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    444a:	1b 82       	std	Y+3, r1	; 0x03
    444c:	1a 82       	std	Y+2, r1	; 0x02
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    444e:	88 85       	ldd	r24, Y+8	; 0x08
    4450:	99 85       	ldd	r25, Y+9	; 0x09
    4452:	0e 94 04 25 	call	0x4a08	; 0x4a08 <prvBytesInBuffer>
    4456:	9d 83       	std	Y+5, r25	; 0x05
    4458:	8c 83       	std	Y+4, r24	; 0x04
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    445a:	2c 81       	ldd	r18, Y+4	; 0x04
    445c:	3d 81       	ldd	r19, Y+5	; 0x05
    445e:	8a 81       	ldd	r24, Y+2	; 0x02
    4460:	9b 81       	ldd	r25, Y+3	; 0x03
    4462:	82 17       	cp	r24, r18
    4464:	93 07       	cpc	r25, r19
    4466:	80 f5       	brcc	.+96     	; 0x44c8 <xStreamBufferReceiveFromISR+0xd2>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    4468:	88 85       	ldd	r24, Y+8	; 0x08
    446a:	99 85       	ldd	r25, Y+9	; 0x09
    446c:	2c 85       	ldd	r18, Y+12	; 0x0c
    446e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4470:	4e 85       	ldd	r20, Y+14	; 0x0e
    4472:	5f 85       	ldd	r21, Y+15	; 0x0f
    4474:	ec 81       	ldd	r30, Y+4	; 0x04
    4476:	fd 81       	ldd	r31, Y+5	; 0x05
    4478:	aa 81       	ldd	r26, Y+2	; 0x02
    447a:	bb 81       	ldd	r27, Y+3	; 0x03
    447c:	b9 01       	movw	r22, r18
    447e:	9f 01       	movw	r18, r30
    4480:	8d 01       	movw	r16, r26
    4482:	0e 94 73 22 	call	0x44e6	; 0x44e6 <prvReadMessageFromBuffer>
    4486:	9f 83       	std	Y+7, r25	; 0x07
    4488:	8e 83       	std	Y+6, r24	; 0x06

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    448a:	8e 81       	ldd	r24, Y+6	; 0x06
    448c:	9f 81       	ldd	r25, Y+7	; 0x07
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	d9 f0       	breq	.+54     	; 0x44c8 <xStreamBufferReceiveFromISR+0xd2>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    4492:	19 82       	std	Y+1, r1	; 0x01
    4494:	e8 85       	ldd	r30, Y+8	; 0x08
    4496:	f9 85       	ldd	r31, Y+9	; 0x09
    4498:	82 85       	ldd	r24, Z+10	; 0x0a
    449a:	93 85       	ldd	r25, Z+11	; 0x0b
    449c:	00 97       	sbiw	r24, 0x00	; 0
    449e:	a1 f0       	breq	.+40     	; 0x44c8 <xStreamBufferReceiveFromISR+0xd2>
    44a0:	e8 85       	ldd	r30, Y+8	; 0x08
    44a2:	f9 85       	ldd	r31, Y+9	; 0x09
    44a4:	82 85       	ldd	r24, Z+10	; 0x0a
    44a6:	93 85       	ldd	r25, Z+11	; 0x0b
    44a8:	e8 89       	ldd	r30, Y+16	; 0x10
    44aa:	f9 89       	ldd	r31, Y+17	; 0x11
    44ac:	40 e0       	ldi	r20, 0x00	; 0
    44ae:	50 e0       	ldi	r21, 0x00	; 0
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	00 e0       	ldi	r16, 0x00	; 0
    44b8:	10 e0       	ldi	r17, 0x00	; 0
    44ba:	7f 01       	movw	r14, r30
    44bc:	0e 94 5f 30 	call	0x60be	; 0x60be <xTaskGenericNotifyFromISR>
    44c0:	e8 85       	ldd	r30, Y+8	; 0x08
    44c2:	f9 85       	ldd	r31, Y+9	; 0x09
    44c4:	13 86       	std	Z+11, r1	; 0x0b
    44c6:	12 86       	std	Z+10, r1	; 0x0a
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
    44c8:	8e 81       	ldd	r24, Y+6	; 0x06
    44ca:	9f 81       	ldd	r25, Y+7	; 0x07
}
    44cc:	61 96       	adiw	r28, 0x11	; 17
    44ce:	0f b6       	in	r0, 0x3f	; 63
    44d0:	f8 94       	cli
    44d2:	de bf       	out	0x3e, r29	; 62
    44d4:	0f be       	out	0x3f, r0	; 63
    44d6:	cd bf       	out	0x3d, r28	; 61
    44d8:	cf 91       	pop	r28
    44da:	df 91       	pop	r29
    44dc:	1f 91       	pop	r17
    44de:	0f 91       	pop	r16
    44e0:	ff 90       	pop	r15
    44e2:	ef 90       	pop	r14
    44e4:	08 95       	ret

000044e6 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
    44e6:	0f 93       	push	r16
    44e8:	1f 93       	push	r17
    44ea:	df 93       	push	r29
    44ec:	cf 93       	push	r28
    44ee:	cd b7       	in	r28, 0x3d	; 61
    44f0:	de b7       	in	r29, 0x3e	; 62
    44f2:	62 97       	sbiw	r28, 0x12	; 18
    44f4:	0f b6       	in	r0, 0x3f	; 63
    44f6:	f8 94       	cli
    44f8:	de bf       	out	0x3e, r29	; 62
    44fa:	0f be       	out	0x3f, r0	; 63
    44fc:	cd bf       	out	0x3d, r28	; 61
    44fe:	9a 87       	std	Y+10, r25	; 0x0a
    4500:	89 87       	std	Y+9, r24	; 0x09
    4502:	7c 87       	std	Y+12, r23	; 0x0c
    4504:	6b 87       	std	Y+11, r22	; 0x0b
    4506:	5e 87       	std	Y+14, r21	; 0x0e
    4508:	4d 87       	std	Y+13, r20	; 0x0d
    450a:	38 8b       	std	Y+16, r19	; 0x10
    450c:	2f 87       	std	Y+15, r18	; 0x0f
    450e:	1a 8b       	std	Y+18, r17	; 0x12
    4510:	09 8b       	std	Y+17, r16	; 0x11
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
    4512:	89 89       	ldd	r24, Y+17	; 0x11
    4514:	9a 89       	ldd	r25, Y+18	; 0x12
    4516:	00 97       	sbiw	r24, 0x00	; 0
    4518:	91 f1       	breq	.+100    	; 0x457e <prvReadMessageFromBuffer+0x98>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
    451a:	e9 85       	ldd	r30, Y+9	; 0x09
    451c:	fa 85       	ldd	r31, Y+10	; 0x0a
    451e:	80 81       	ld	r24, Z
    4520:	91 81       	ldd	r25, Z+1	; 0x01
    4522:	9e 83       	std	Y+6, r25	; 0x06
    4524:	8d 83       	std	Y+5, r24	; 0x05
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    4526:	ae 01       	movw	r20, r28
    4528:	49 5f       	subi	r20, 0xF9	; 249
    452a:	5f 4f       	sbci	r21, 0xFF	; 255
    452c:	89 85       	ldd	r24, Y+9	; 0x09
    452e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4530:	29 89       	ldd	r18, Y+17	; 0x11
    4532:	3a 89       	ldd	r19, Y+18	; 0x12
    4534:	ef 85       	ldd	r30, Y+15	; 0x0f
    4536:	f8 89       	ldd	r31, Y+16	; 0x10
    4538:	ba 01       	movw	r22, r20
    453a:	a9 01       	movw	r20, r18
    453c:	9f 01       	movw	r18, r30
    453e:	0e 94 57 24 	call	0x48ae	; 0x48ae <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
    4542:	8f 81       	ldd	r24, Y+7	; 0x07
    4544:	98 85       	ldd	r25, Y+8	; 0x08
    4546:	9a 83       	std	Y+2, r25	; 0x02
    4548:	89 83       	std	Y+1, r24	; 0x01

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
    454a:	2f 85       	ldd	r18, Y+15	; 0x0f
    454c:	38 89       	ldd	r19, Y+16	; 0x10
    454e:	89 89       	ldd	r24, Y+17	; 0x11
    4550:	9a 89       	ldd	r25, Y+18	; 0x12
    4552:	a9 01       	movw	r20, r18
    4554:	48 1b       	sub	r20, r24
    4556:	59 0b       	sbc	r21, r25
    4558:	ca 01       	movw	r24, r20
    455a:	98 8b       	std	Y+16, r25	; 0x10
    455c:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
    455e:	29 81       	ldd	r18, Y+1	; 0x01
    4560:	3a 81       	ldd	r19, Y+2	; 0x02
    4562:	8d 85       	ldd	r24, Y+13	; 0x0d
    4564:	9e 85       	ldd	r25, Y+14	; 0x0e
    4566:	82 17       	cp	r24, r18
    4568:	93 07       	cpc	r25, r19
    456a:	68 f4       	brcc	.+26     	; 0x4586 <prvReadMessageFromBuffer+0xa0>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
    456c:	e9 85       	ldd	r30, Y+9	; 0x09
    456e:	fa 85       	ldd	r31, Y+10	; 0x0a
    4570:	8d 81       	ldd	r24, Y+5	; 0x05
    4572:	9e 81       	ldd	r25, Y+6	; 0x06
    4574:	91 83       	std	Z+1, r25	; 0x01
    4576:	80 83       	st	Z, r24
			xNextMessageLength = 0;
    4578:	1a 82       	std	Y+2, r1	; 0x02
    457a:	19 82       	std	Y+1, r1	; 0x01
    457c:	04 c0       	rjmp	.+8      	; 0x4586 <prvReadMessageFromBuffer+0xa0>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
    457e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4580:	9e 85       	ldd	r25, Y+14	; 0x0e
    4582:	9a 83       	std	Y+2, r25	; 0x02
    4584:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    4586:	4b 85       	ldd	r20, Y+11	; 0x0b
    4588:	5c 85       	ldd	r21, Y+12	; 0x0c
    458a:	89 85       	ldd	r24, Y+9	; 0x09
    458c:	9a 85       	ldd	r25, Y+10	; 0x0a
    458e:	29 81       	ldd	r18, Y+1	; 0x01
    4590:	3a 81       	ldd	r19, Y+2	; 0x02
    4592:	ef 85       	ldd	r30, Y+15	; 0x0f
    4594:	f8 89       	ldd	r31, Y+16	; 0x10
    4596:	ba 01       	movw	r22, r20
    4598:	a9 01       	movw	r20, r18
    459a:	9f 01       	movw	r18, r30
    459c:	0e 94 57 24 	call	0x48ae	; 0x48ae <prvReadBytesFromBuffer>
    45a0:	9c 83       	std	Y+4, r25	; 0x04
    45a2:	8b 83       	std	Y+3, r24	; 0x03

	return xReceivedLength;
    45a4:	8b 81       	ldd	r24, Y+3	; 0x03
    45a6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    45a8:	62 96       	adiw	r28, 0x12	; 18
    45aa:	0f b6       	in	r0, 0x3f	; 63
    45ac:	f8 94       	cli
    45ae:	de bf       	out	0x3e, r29	; 62
    45b0:	0f be       	out	0x3f, r0	; 63
    45b2:	cd bf       	out	0x3d, r28	; 61
    45b4:	cf 91       	pop	r28
    45b6:	df 91       	pop	r29
    45b8:	1f 91       	pop	r17
    45ba:	0f 91       	pop	r16
    45bc:	08 95       	ret

000045be <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
    45be:	df 93       	push	r29
    45c0:	cf 93       	push	r28
    45c2:	cd b7       	in	r28, 0x3d	; 61
    45c4:	de b7       	in	r29, 0x3e	; 62
    45c6:	27 97       	sbiw	r28, 0x07	; 7
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	f8 94       	cli
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	cd bf       	out	0x3d, r28	; 61
    45d2:	9f 83       	std	Y+7, r25	; 0x07
    45d4:	8e 83       	std	Y+6, r24	; 0x06
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    45d6:	8e 81       	ldd	r24, Y+6	; 0x06
    45d8:	9f 81       	ldd	r25, Y+7	; 0x07
    45da:	9d 83       	std	Y+5, r25	; 0x05
    45dc:	8c 83       	std	Y+4, r24	; 0x04
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
    45de:	ec 81       	ldd	r30, Y+4	; 0x04
    45e0:	fd 81       	ldd	r31, Y+5	; 0x05
    45e2:	80 81       	ld	r24, Z
    45e4:	91 81       	ldd	r25, Z+1	; 0x01
    45e6:	9a 83       	std	Y+2, r25	; 0x02
    45e8:	89 83       	std	Y+1, r24	; 0x01
	if( pxStreamBuffer->xHead == xTail )
    45ea:	ec 81       	ldd	r30, Y+4	; 0x04
    45ec:	fd 81       	ldd	r31, Y+5	; 0x05
    45ee:	22 81       	ldd	r18, Z+2	; 0x02
    45f0:	33 81       	ldd	r19, Z+3	; 0x03
    45f2:	89 81       	ldd	r24, Y+1	; 0x01
    45f4:	9a 81       	ldd	r25, Y+2	; 0x02
    45f6:	28 17       	cp	r18, r24
    45f8:	39 07       	cpc	r19, r25
    45fa:	19 f4       	brne	.+6      	; 0x4602 <xStreamBufferIsEmpty+0x44>
	{
		xReturn = pdTRUE;
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	8b 83       	std	Y+3, r24	; 0x03
    4600:	01 c0       	rjmp	.+2      	; 0x4604 <xStreamBufferIsEmpty+0x46>
	}
	else
	{
		xReturn = pdFALSE;
    4602:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    4604:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4606:	27 96       	adiw	r28, 0x07	; 7
    4608:	0f b6       	in	r0, 0x3f	; 63
    460a:	f8 94       	cli
    460c:	de bf       	out	0x3e, r29	; 62
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	cf 91       	pop	r28
    4614:	df 91       	pop	r29
    4616:	08 95       	ret

00004618 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    4618:	df 93       	push	r29
    461a:	cf 93       	push	r28
    461c:	cd b7       	in	r28, 0x3d	; 61
    461e:	de b7       	in	r29, 0x3e	; 62
    4620:	27 97       	sbiw	r28, 0x07	; 7
    4622:	0f b6       	in	r0, 0x3f	; 63
    4624:	f8 94       	cli
    4626:	de bf       	out	0x3e, r29	; 62
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	cd bf       	out	0x3d, r28	; 61
    462c:	9f 83       	std	Y+7, r25	; 0x07
    462e:	8e 83       	std	Y+6, r24	; 0x06
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4630:	8e 81       	ldd	r24, Y+6	; 0x06
    4632:	9f 81       	ldd	r25, Y+7	; 0x07
    4634:	9a 83       	std	Y+2, r25	; 0x02
    4636:	89 83       	std	Y+1, r24	; 0x01

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    4638:	e9 81       	ldd	r30, Y+1	; 0x01
    463a:	fa 81       	ldd	r31, Y+2	; 0x02
    463c:	86 85       	ldd	r24, Z+14	; 0x0e
    463e:	88 2f       	mov	r24, r24
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	81 70       	andi	r24, 0x01	; 1
    4644:	90 70       	andi	r25, 0x00	; 0
    4646:	88 23       	and	r24, r24
    4648:	29 f0       	breq	.+10     	; 0x4654 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    464a:	82 e0       	ldi	r24, 0x02	; 2
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	9c 83       	std	Y+4, r25	; 0x04
    4650:	8b 83       	std	Y+3, r24	; 0x03
    4652:	02 c0       	rjmp	.+4      	; 0x4658 <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    4654:	1c 82       	std	Y+4, r1	; 0x04
    4656:	1b 82       	std	Y+3, r1	; 0x03
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    4658:	8e 81       	ldd	r24, Y+6	; 0x06
    465a:	9f 81       	ldd	r25, Y+7	; 0x07
    465c:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <xStreamBufferSpacesAvailable>
    4660:	9c 01       	movw	r18, r24
    4662:	8b 81       	ldd	r24, Y+3	; 0x03
    4664:	9c 81       	ldd	r25, Y+4	; 0x04
    4666:	82 17       	cp	r24, r18
    4668:	93 07       	cpc	r25, r19
    466a:	18 f0       	brcs	.+6      	; 0x4672 <xStreamBufferIsFull+0x5a>
	{
		xReturn = pdTRUE;
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	8d 83       	std	Y+5, r24	; 0x05
    4670:	01 c0       	rjmp	.+2      	; 0x4674 <xStreamBufferIsFull+0x5c>
	}
	else
	{
		xReturn = pdFALSE;
    4672:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    4674:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4676:	27 96       	adiw	r28, 0x07	; 7
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	f8 94       	cli
    467c:	de bf       	out	0x3e, r29	; 62
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	cd bf       	out	0x3d, r28	; 61
    4682:	cf 91       	pop	r28
    4684:	df 91       	pop	r29
    4686:	08 95       	ret

00004688 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    4688:	ef 92       	push	r14
    468a:	ff 92       	push	r15
    468c:	0f 93       	push	r16
    468e:	1f 93       	push	r17
    4690:	df 93       	push	r29
    4692:	cf 93       	push	r28
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
    4698:	28 97       	sbiw	r28, 0x08	; 8
    469a:	0f b6       	in	r0, 0x3f	; 63
    469c:	f8 94       	cli
    469e:	de bf       	out	0x3e, r29	; 62
    46a0:	0f be       	out	0x3f, r0	; 63
    46a2:	cd bf       	out	0x3d, r28	; 61
    46a4:	9e 83       	std	Y+6, r25	; 0x06
    46a6:	8d 83       	std	Y+5, r24	; 0x05
    46a8:	78 87       	std	Y+8, r23	; 0x08
    46aa:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    46ac:	8d 81       	ldd	r24, Y+5	; 0x05
    46ae:	9e 81       	ldd	r25, Y+6	; 0x06
    46b0:	9c 83       	std	Y+4, r25	; 0x04
    46b2:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    46b4:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    46b6:	eb 81       	ldd	r30, Y+3	; 0x03
    46b8:	fc 81       	ldd	r31, Y+4	; 0x04
    46ba:	80 85       	ldd	r24, Z+8	; 0x08
    46bc:	91 85       	ldd	r25, Z+9	; 0x09
    46be:	00 97       	sbiw	r24, 0x00	; 0
    46c0:	b9 f0       	breq	.+46     	; 0x46f0 <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    46c2:	eb 81       	ldd	r30, Y+3	; 0x03
    46c4:	fc 81       	ldd	r31, Y+4	; 0x04
    46c6:	80 85       	ldd	r24, Z+8	; 0x08
    46c8:	91 85       	ldd	r25, Z+9	; 0x09
    46ca:	ef 81       	ldd	r30, Y+7	; 0x07
    46cc:	f8 85       	ldd	r31, Y+8	; 0x08
    46ce:	40 e0       	ldi	r20, 0x00	; 0
    46d0:	50 e0       	ldi	r21, 0x00	; 0
    46d2:	60 e0       	ldi	r22, 0x00	; 0
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	00 e0       	ldi	r16, 0x00	; 0
    46da:	10 e0       	ldi	r17, 0x00	; 0
    46dc:	7f 01       	movw	r14, r30
    46de:	0e 94 5f 30 	call	0x60be	; 0x60be <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    46e2:	eb 81       	ldd	r30, Y+3	; 0x03
    46e4:	fc 81       	ldd	r31, Y+4	; 0x04
    46e6:	11 86       	std	Z+9, r1	; 0x09
    46e8:	10 86       	std	Z+8, r1	; 0x08
			xReturn = pdTRUE;
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	8a 83       	std	Y+2, r24	; 0x02
    46ee:	01 c0       	rjmp	.+2      	; 0x46f2 <xStreamBufferSendCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    46f0:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    46f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    46f4:	28 96       	adiw	r28, 0x08	; 8
    46f6:	0f b6       	in	r0, 0x3f	; 63
    46f8:	f8 94       	cli
    46fa:	de bf       	out	0x3e, r29	; 62
    46fc:	0f be       	out	0x3f, r0	; 63
    46fe:	cd bf       	out	0x3d, r28	; 61
    4700:	cf 91       	pop	r28
    4702:	df 91       	pop	r29
    4704:	1f 91       	pop	r17
    4706:	0f 91       	pop	r16
    4708:	ff 90       	pop	r15
    470a:	ef 90       	pop	r14
    470c:	08 95       	ret

0000470e <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    470e:	ef 92       	push	r14
    4710:	ff 92       	push	r15
    4712:	0f 93       	push	r16
    4714:	1f 93       	push	r17
    4716:	df 93       	push	r29
    4718:	cf 93       	push	r28
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
    471e:	28 97       	sbiw	r28, 0x08	; 8
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	de bf       	out	0x3e, r29	; 62
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	cd bf       	out	0x3d, r28	; 61
    472a:	9e 83       	std	Y+6, r25	; 0x06
    472c:	8d 83       	std	Y+5, r24	; 0x05
    472e:	78 87       	std	Y+8, r23	; 0x08
    4730:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4732:	8d 81       	ldd	r24, Y+5	; 0x05
    4734:	9e 81       	ldd	r25, Y+6	; 0x06
    4736:	9c 83       	std	Y+4, r25	; 0x04
    4738:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    473a:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    473c:	eb 81       	ldd	r30, Y+3	; 0x03
    473e:	fc 81       	ldd	r31, Y+4	; 0x04
    4740:	82 85       	ldd	r24, Z+10	; 0x0a
    4742:	93 85       	ldd	r25, Z+11	; 0x0b
    4744:	00 97       	sbiw	r24, 0x00	; 0
    4746:	b9 f0       	breq	.+46     	; 0x4776 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    4748:	eb 81       	ldd	r30, Y+3	; 0x03
    474a:	fc 81       	ldd	r31, Y+4	; 0x04
    474c:	82 85       	ldd	r24, Z+10	; 0x0a
    474e:	93 85       	ldd	r25, Z+11	; 0x0b
    4750:	ef 81       	ldd	r30, Y+7	; 0x07
    4752:	f8 85       	ldd	r31, Y+8	; 0x08
    4754:	40 e0       	ldi	r20, 0x00	; 0
    4756:	50 e0       	ldi	r21, 0x00	; 0
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	70 e0       	ldi	r23, 0x00	; 0
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	00 e0       	ldi	r16, 0x00	; 0
    4760:	10 e0       	ldi	r17, 0x00	; 0
    4762:	7f 01       	movw	r14, r30
    4764:	0e 94 5f 30 	call	0x60be	; 0x60be <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    4768:	eb 81       	ldd	r30, Y+3	; 0x03
    476a:	fc 81       	ldd	r31, Y+4	; 0x04
    476c:	13 86       	std	Z+11, r1	; 0x0b
    476e:	12 86       	std	Z+10, r1	; 0x0a
			xReturn = pdTRUE;
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	8a 83       	std	Y+2, r24	; 0x02
    4774:	01 c0       	rjmp	.+2      	; 0x4778 <xStreamBufferReceiveCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    4776:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4778:	8a 81       	ldd	r24, Y+2	; 0x02
}
    477a:	28 96       	adiw	r28, 0x08	; 8
    477c:	0f b6       	in	r0, 0x3f	; 63
    477e:	f8 94       	cli
    4780:	de bf       	out	0x3e, r29	; 62
    4782:	0f be       	out	0x3f, r0	; 63
    4784:	cd bf       	out	0x3d, r28	; 61
    4786:	cf 91       	pop	r28
    4788:	df 91       	pop	r29
    478a:	1f 91       	pop	r17
    478c:	0f 91       	pop	r16
    478e:	ff 90       	pop	r15
    4790:	ef 90       	pop	r14
    4792:	08 95       	ret

00004794 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	2e 97       	sbiw	r28, 0x0e	; 14
    479e:	0f b6       	in	r0, 0x3f	; 63
    47a0:	f8 94       	cli
    47a2:	de bf       	out	0x3e, r29	; 62
    47a4:	0f be       	out	0x3f, r0	; 63
    47a6:	cd bf       	out	0x3d, r28	; 61
    47a8:	9e 83       	std	Y+6, r25	; 0x06
    47aa:	8d 83       	std	Y+5, r24	; 0x05
    47ac:	78 87       	std	Y+8, r23	; 0x08
    47ae:	6f 83       	std	Y+7, r22	; 0x07
    47b0:	5a 87       	std	Y+10, r21	; 0x0a
    47b2:	49 87       	std	Y+9, r20	; 0x09
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
    47b4:	ed 81       	ldd	r30, Y+5	; 0x05
    47b6:	fe 81       	ldd	r31, Y+6	; 0x06
    47b8:	82 81       	ldd	r24, Z+2	; 0x02
    47ba:	93 81       	ldd	r25, Z+3	; 0x03
    47bc:	9c 83       	std	Y+4, r25	; 0x04
    47be:	8b 83       	std	Y+3, r24	; 0x03

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    47c0:	ed 81       	ldd	r30, Y+5	; 0x05
    47c2:	fe 81       	ldd	r31, Y+6	; 0x06
    47c4:	24 81       	ldd	r18, Z+4	; 0x04
    47c6:	35 81       	ldd	r19, Z+5	; 0x05
    47c8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ca:	9c 81       	ldd	r25, Y+4	; 0x04
    47cc:	a9 01       	movw	r20, r18
    47ce:	48 1b       	sub	r20, r24
    47d0:	59 0b       	sbc	r21, r25
    47d2:	ca 01       	movw	r24, r20
    47d4:	29 85       	ldd	r18, Y+9	; 0x09
    47d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    47d8:	3e 87       	std	Y+14, r19	; 0x0e
    47da:	2d 87       	std	Y+13, r18	; 0x0d
    47dc:	9c 87       	std	Y+12, r25	; 0x0c
    47de:	8b 87       	std	Y+11, r24	; 0x0b
    47e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    47e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    47e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e8:	84 17       	cp	r24, r20
    47ea:	95 07       	cpc	r25, r21
    47ec:	20 f4       	brcc	.+8      	; 0x47f6 <prvWriteBytesToBuffer+0x62>
    47ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    47f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    47f2:	3c 87       	std	Y+12, r19	; 0x0c
    47f4:	2b 87       	std	Y+11, r18	; 0x0b
    47f6:	4b 85       	ldd	r20, Y+11	; 0x0b
    47f8:	5c 85       	ldd	r21, Y+12	; 0x0c
    47fa:	5a 83       	std	Y+2, r21	; 0x02
    47fc:	49 83       	std	Y+1, r20	; 0x01

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    47fe:	ed 81       	ldd	r30, Y+5	; 0x05
    4800:	fe 81       	ldd	r31, Y+6	; 0x06
    4802:	24 85       	ldd	r18, Z+12	; 0x0c
    4804:	35 85       	ldd	r19, Z+13	; 0x0d
    4806:	8b 81       	ldd	r24, Y+3	; 0x03
    4808:	9c 81       	ldd	r25, Y+4	; 0x04
    480a:	82 0f       	add	r24, r18
    480c:	93 1f       	adc	r25, r19
    480e:	2f 81       	ldd	r18, Y+7	; 0x07
    4810:	38 85       	ldd	r19, Y+8	; 0x08
    4812:	49 81       	ldd	r20, Y+1	; 0x01
    4814:	5a 81       	ldd	r21, Y+2	; 0x02
    4816:	b9 01       	movw	r22, r18
    4818:	0e 94 ca 32 	call	0x6594	; 0x6594 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
    481c:	29 85       	ldd	r18, Y+9	; 0x09
    481e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4820:	89 81       	ldd	r24, Y+1	; 0x01
    4822:	9a 81       	ldd	r25, Y+2	; 0x02
    4824:	82 17       	cp	r24, r18
    4826:	93 07       	cpc	r25, r19
    4828:	b0 f4       	brcc	.+44     	; 0x4856 <prvWriteBytesToBuffer+0xc2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    482a:	ed 81       	ldd	r30, Y+5	; 0x05
    482c:	fe 81       	ldd	r31, Y+6	; 0x06
    482e:	64 85       	ldd	r22, Z+12	; 0x0c
    4830:	75 85       	ldd	r23, Z+13	; 0x0d
    4832:	2f 81       	ldd	r18, Y+7	; 0x07
    4834:	38 85       	ldd	r19, Y+8	; 0x08
    4836:	89 81       	ldd	r24, Y+1	; 0x01
    4838:	9a 81       	ldd	r25, Y+2	; 0x02
    483a:	a9 01       	movw	r20, r18
    483c:	48 0f       	add	r20, r24
    483e:	59 1f       	adc	r21, r25
    4840:	29 85       	ldd	r18, Y+9	; 0x09
    4842:	3a 85       	ldd	r19, Y+10	; 0x0a
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	9a 81       	ldd	r25, Y+2	; 0x02
    4848:	28 1b       	sub	r18, r24
    484a:	39 0b       	sbc	r19, r25
    484c:	cb 01       	movw	r24, r22
    484e:	ba 01       	movw	r22, r20
    4850:	a9 01       	movw	r20, r18
    4852:	0e 94 ca 32 	call	0x6594	; 0x6594 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
    4856:	2b 81       	ldd	r18, Y+3	; 0x03
    4858:	3c 81       	ldd	r19, Y+4	; 0x04
    485a:	89 85       	ldd	r24, Y+9	; 0x09
    485c:	9a 85       	ldd	r25, Y+10	; 0x0a
    485e:	82 0f       	add	r24, r18
    4860:	93 1f       	adc	r25, r19
    4862:	9c 83       	std	Y+4, r25	; 0x04
    4864:	8b 83       	std	Y+3, r24	; 0x03
	if( xNextHead >= pxStreamBuffer->xLength )
    4866:	ed 81       	ldd	r30, Y+5	; 0x05
    4868:	fe 81       	ldd	r31, Y+6	; 0x06
    486a:	24 81       	ldd	r18, Z+4	; 0x04
    486c:	35 81       	ldd	r19, Z+5	; 0x05
    486e:	8b 81       	ldd	r24, Y+3	; 0x03
    4870:	9c 81       	ldd	r25, Y+4	; 0x04
    4872:	82 17       	cp	r24, r18
    4874:	93 07       	cpc	r25, r19
    4876:	50 f0       	brcs	.+20     	; 0x488c <prvWriteBytesToBuffer+0xf8>
	{
		xNextHead -= pxStreamBuffer->xLength;
    4878:	ed 81       	ldd	r30, Y+5	; 0x05
    487a:	fe 81       	ldd	r31, Y+6	; 0x06
    487c:	24 81       	ldd	r18, Z+4	; 0x04
    487e:	35 81       	ldd	r19, Z+5	; 0x05
    4880:	8b 81       	ldd	r24, Y+3	; 0x03
    4882:	9c 81       	ldd	r25, Y+4	; 0x04
    4884:	82 1b       	sub	r24, r18
    4886:	93 0b       	sbc	r25, r19
    4888:	9c 83       	std	Y+4, r25	; 0x04
    488a:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
    488c:	ed 81       	ldd	r30, Y+5	; 0x05
    488e:	fe 81       	ldd	r31, Y+6	; 0x06
    4890:	8b 81       	ldd	r24, Y+3	; 0x03
    4892:	9c 81       	ldd	r25, Y+4	; 0x04
    4894:	93 83       	std	Z+3, r25	; 0x03
    4896:	82 83       	std	Z+2, r24	; 0x02

	return xCount;
    4898:	89 85       	ldd	r24, Y+9	; 0x09
    489a:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    489c:	2e 96       	adiw	r28, 0x0e	; 14
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	f8 94       	cli
    48a2:	de bf       	out	0x3e, r29	; 62
    48a4:	0f be       	out	0x3f, r0	; 63
    48a6:	cd bf       	out	0x3d, r28	; 61
    48a8:	cf 91       	pop	r28
    48aa:	df 91       	pop	r29
    48ac:	08 95       	ret

000048ae <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    48ae:	df 93       	push	r29
    48b0:	cf 93       	push	r28
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62
    48b6:	66 97       	sbiw	r28, 0x16	; 22
    48b8:	0f b6       	in	r0, 0x3f	; 63
    48ba:	f8 94       	cli
    48bc:	de bf       	out	0x3e, r29	; 62
    48be:	0f be       	out	0x3f, r0	; 63
    48c0:	cd bf       	out	0x3d, r28	; 61
    48c2:	98 87       	std	Y+8, r25	; 0x08
    48c4:	8f 83       	std	Y+7, r24	; 0x07
    48c6:	7a 87       	std	Y+10, r23	; 0x0a
    48c8:	69 87       	std	Y+9, r22	; 0x09
    48ca:	5c 87       	std	Y+12, r21	; 0x0c
    48cc:	4b 87       	std	Y+11, r20	; 0x0b
    48ce:	3e 87       	std	Y+14, r19	; 0x0e
    48d0:	2d 87       	std	Y+13, r18	; 0x0d
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
    48d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    48d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    48d6:	3a 8b       	std	Y+18, r19	; 0x12
    48d8:	29 8b       	std	Y+17, r18	; 0x11
    48da:	4b 85       	ldd	r20, Y+11	; 0x0b
    48dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    48de:	58 8b       	std	Y+16, r21	; 0x10
    48e0:	4f 87       	std	Y+15, r20	; 0x0f
    48e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48e4:	98 89       	ldd	r25, Y+16	; 0x10
    48e6:	29 89       	ldd	r18, Y+17	; 0x11
    48e8:	3a 89       	ldd	r19, Y+18	; 0x12
    48ea:	28 17       	cp	r18, r24
    48ec:	39 07       	cpc	r19, r25
    48ee:	20 f4       	brcc	.+8      	; 0x48f8 <prvReadBytesFromBuffer+0x4a>
    48f0:	49 89       	ldd	r20, Y+17	; 0x11
    48f2:	5a 89       	ldd	r21, Y+18	; 0x12
    48f4:	58 8b       	std	Y+16, r21	; 0x10
    48f6:	4f 87       	std	Y+15, r20	; 0x0f
    48f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    48fa:	98 89       	ldd	r25, Y+16	; 0x10
    48fc:	9e 83       	std	Y+6, r25	; 0x06
    48fe:	8d 83       	std	Y+5, r24	; 0x05

	if( xCount > ( size_t ) 0 )
    4900:	8d 81       	ldd	r24, Y+5	; 0x05
    4902:	9e 81       	ldd	r25, Y+6	; 0x06
    4904:	00 97       	sbiw	r24, 0x00	; 0
    4906:	09 f4       	brne	.+2      	; 0x490a <prvReadBytesFromBuffer+0x5c>
    4908:	74 c0       	rjmp	.+232    	; 0x49f2 <prvReadBytesFromBuffer+0x144>
	{
		xNextTail = pxStreamBuffer->xTail;
    490a:	ef 81       	ldd	r30, Y+7	; 0x07
    490c:	f8 85       	ldd	r31, Y+8	; 0x08
    490e:	80 81       	ld	r24, Z
    4910:	91 81       	ldd	r25, Z+1	; 0x01
    4912:	9a 83       	std	Y+2, r25	; 0x02
    4914:	89 83       	std	Y+1, r24	; 0x01

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    4916:	ef 81       	ldd	r30, Y+7	; 0x07
    4918:	f8 85       	ldd	r31, Y+8	; 0x08
    491a:	24 81       	ldd	r18, Z+4	; 0x04
    491c:	35 81       	ldd	r19, Z+5	; 0x05
    491e:	89 81       	ldd	r24, Y+1	; 0x01
    4920:	9a 81       	ldd	r25, Y+2	; 0x02
    4922:	a9 01       	movw	r20, r18
    4924:	48 1b       	sub	r20, r24
    4926:	59 0b       	sbc	r21, r25
    4928:	ca 01       	movw	r24, r20
    492a:	2d 81       	ldd	r18, Y+5	; 0x05
    492c:	3e 81       	ldd	r19, Y+6	; 0x06
    492e:	3e 8b       	std	Y+22, r19	; 0x16
    4930:	2d 8b       	std	Y+21, r18	; 0x15
    4932:	9c 8b       	std	Y+20, r25	; 0x14
    4934:	8b 8b       	std	Y+19, r24	; 0x13
    4936:	4b 89       	ldd	r20, Y+19	; 0x13
    4938:	5c 89       	ldd	r21, Y+20	; 0x14
    493a:	8d 89       	ldd	r24, Y+21	; 0x15
    493c:	9e 89       	ldd	r25, Y+22	; 0x16
    493e:	84 17       	cp	r24, r20
    4940:	95 07       	cpc	r25, r21
    4942:	20 f4       	brcc	.+8      	; 0x494c <prvReadBytesFromBuffer+0x9e>
    4944:	2d 89       	ldd	r18, Y+21	; 0x15
    4946:	3e 89       	ldd	r19, Y+22	; 0x16
    4948:	3c 8b       	std	Y+20, r19	; 0x14
    494a:	2b 8b       	std	Y+19, r18	; 0x13
    494c:	4b 89       	ldd	r20, Y+19	; 0x13
    494e:	5c 89       	ldd	r21, Y+20	; 0x14
    4950:	5c 83       	std	Y+4, r21	; 0x04
    4952:	4b 83       	std	Y+3, r20	; 0x03

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4954:	ef 81       	ldd	r30, Y+7	; 0x07
    4956:	f8 85       	ldd	r31, Y+8	; 0x08
    4958:	24 85       	ldd	r18, Z+12	; 0x0c
    495a:	35 85       	ldd	r19, Z+13	; 0x0d
    495c:	89 81       	ldd	r24, Y+1	; 0x01
    495e:	9a 81       	ldd	r25, Y+2	; 0x02
    4960:	a9 01       	movw	r20, r18
    4962:	48 0f       	add	r20, r24
    4964:	59 1f       	adc	r21, r25
    4966:	89 85       	ldd	r24, Y+9	; 0x09
    4968:	9a 85       	ldd	r25, Y+10	; 0x0a
    496a:	2b 81       	ldd	r18, Y+3	; 0x03
    496c:	3c 81       	ldd	r19, Y+4	; 0x04
    496e:	ba 01       	movw	r22, r20
    4970:	a9 01       	movw	r20, r18
    4972:	0e 94 ca 32 	call	0x6594	; 0x6594 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
    4976:	2d 81       	ldd	r18, Y+5	; 0x05
    4978:	3e 81       	ldd	r19, Y+6	; 0x06
    497a:	8b 81       	ldd	r24, Y+3	; 0x03
    497c:	9c 81       	ldd	r25, Y+4	; 0x04
    497e:	82 17       	cp	r24, r18
    4980:	93 07       	cpc	r25, r19
    4982:	b0 f4       	brcc	.+44     	; 0x49b0 <prvReadBytesFromBuffer+0x102>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4984:	29 85       	ldd	r18, Y+9	; 0x09
    4986:	3a 85       	ldd	r19, Y+10	; 0x0a
    4988:	8b 81       	ldd	r24, Y+3	; 0x03
    498a:	9c 81       	ldd	r25, Y+4	; 0x04
    498c:	b9 01       	movw	r22, r18
    498e:	68 0f       	add	r22, r24
    4990:	79 1f       	adc	r23, r25
    4992:	ef 81       	ldd	r30, Y+7	; 0x07
    4994:	f8 85       	ldd	r31, Y+8	; 0x08
    4996:	44 85       	ldd	r20, Z+12	; 0x0c
    4998:	55 85       	ldd	r21, Z+13	; 0x0d
    499a:	2d 81       	ldd	r18, Y+5	; 0x05
    499c:	3e 81       	ldd	r19, Y+6	; 0x06
    499e:	8b 81       	ldd	r24, Y+3	; 0x03
    49a0:	9c 81       	ldd	r25, Y+4	; 0x04
    49a2:	28 1b       	sub	r18, r24
    49a4:	39 0b       	sbc	r19, r25
    49a6:	cb 01       	movw	r24, r22
    49a8:	ba 01       	movw	r22, r20
    49aa:	a9 01       	movw	r20, r18
    49ac:	0e 94 ca 32 	call	0x6594	; 0x6594 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
    49b0:	29 81       	ldd	r18, Y+1	; 0x01
    49b2:	3a 81       	ldd	r19, Y+2	; 0x02
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	9e 81       	ldd	r25, Y+6	; 0x06
    49b8:	82 0f       	add	r24, r18
    49ba:	93 1f       	adc	r25, r19
    49bc:	9a 83       	std	Y+2, r25	; 0x02
    49be:	89 83       	std	Y+1, r24	; 0x01

		if( xNextTail >= pxStreamBuffer->xLength )
    49c0:	ef 81       	ldd	r30, Y+7	; 0x07
    49c2:	f8 85       	ldd	r31, Y+8	; 0x08
    49c4:	24 81       	ldd	r18, Z+4	; 0x04
    49c6:	35 81       	ldd	r19, Z+5	; 0x05
    49c8:	89 81       	ldd	r24, Y+1	; 0x01
    49ca:	9a 81       	ldd	r25, Y+2	; 0x02
    49cc:	82 17       	cp	r24, r18
    49ce:	93 07       	cpc	r25, r19
    49d0:	50 f0       	brcs	.+20     	; 0x49e6 <prvReadBytesFromBuffer+0x138>
		{
			xNextTail -= pxStreamBuffer->xLength;
    49d2:	ef 81       	ldd	r30, Y+7	; 0x07
    49d4:	f8 85       	ldd	r31, Y+8	; 0x08
    49d6:	24 81       	ldd	r18, Z+4	; 0x04
    49d8:	35 81       	ldd	r19, Z+5	; 0x05
    49da:	89 81       	ldd	r24, Y+1	; 0x01
    49dc:	9a 81       	ldd	r25, Y+2	; 0x02
    49de:	82 1b       	sub	r24, r18
    49e0:	93 0b       	sbc	r25, r19
    49e2:	9a 83       	std	Y+2, r25	; 0x02
    49e4:	89 83       	std	Y+1, r24	; 0x01
		}

		pxStreamBuffer->xTail = xNextTail;
    49e6:	ef 81       	ldd	r30, Y+7	; 0x07
    49e8:	f8 85       	ldd	r31, Y+8	; 0x08
    49ea:	89 81       	ldd	r24, Y+1	; 0x01
    49ec:	9a 81       	ldd	r25, Y+2	; 0x02
    49ee:	91 83       	std	Z+1, r25	; 0x01
    49f0:	80 83       	st	Z, r24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    49f2:	8d 81       	ldd	r24, Y+5	; 0x05
    49f4:	9e 81       	ldd	r25, Y+6	; 0x06
}
    49f6:	66 96       	adiw	r28, 0x16	; 22
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	f8 94       	cli
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	cd bf       	out	0x3d, r28	; 61
    4a02:	cf 91       	pop	r28
    4a04:	df 91       	pop	r29
    4a06:	08 95       	ret

00004a08 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    4a08:	df 93       	push	r29
    4a0a:	cf 93       	push	r28
    4a0c:	00 d0       	rcall	.+0      	; 0x4a0e <prvBytesInBuffer+0x6>
    4a0e:	00 d0       	rcall	.+0      	; 0x4a10 <prvBytesInBuffer+0x8>
    4a10:	cd b7       	in	r28, 0x3d	; 61
    4a12:	de b7       	in	r29, 0x3e	; 62
    4a14:	9c 83       	std	Y+4, r25	; 0x04
    4a16:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    4a18:	eb 81       	ldd	r30, Y+3	; 0x03
    4a1a:	fc 81       	ldd	r31, Y+4	; 0x04
    4a1c:	24 81       	ldd	r18, Z+4	; 0x04
    4a1e:	35 81       	ldd	r19, Z+5	; 0x05
    4a20:	eb 81       	ldd	r30, Y+3	; 0x03
    4a22:	fc 81       	ldd	r31, Y+4	; 0x04
    4a24:	82 81       	ldd	r24, Z+2	; 0x02
    4a26:	93 81       	ldd	r25, Z+3	; 0x03
    4a28:	82 0f       	add	r24, r18
    4a2a:	93 1f       	adc	r25, r19
    4a2c:	9a 83       	std	Y+2, r25	; 0x02
    4a2e:	89 83       	std	Y+1, r24	; 0x01
	xCount -= pxStreamBuffer->xTail;
    4a30:	eb 81       	ldd	r30, Y+3	; 0x03
    4a32:	fc 81       	ldd	r31, Y+4	; 0x04
    4a34:	20 81       	ld	r18, Z
    4a36:	31 81       	ldd	r19, Z+1	; 0x01
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3c:	82 1b       	sub	r24, r18
    4a3e:	93 0b       	sbc	r25, r19
    4a40:	9a 83       	std	Y+2, r25	; 0x02
    4a42:	89 83       	std	Y+1, r24	; 0x01
	if ( xCount >= pxStreamBuffer->xLength )
    4a44:	eb 81       	ldd	r30, Y+3	; 0x03
    4a46:	fc 81       	ldd	r31, Y+4	; 0x04
    4a48:	24 81       	ldd	r18, Z+4	; 0x04
    4a4a:	35 81       	ldd	r19, Z+5	; 0x05
    4a4c:	89 81       	ldd	r24, Y+1	; 0x01
    4a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a50:	82 17       	cp	r24, r18
    4a52:	93 07       	cpc	r25, r19
    4a54:	50 f0       	brcs	.+20     	; 0x4a6a <prvBytesInBuffer+0x62>
	{
		xCount -= pxStreamBuffer->xLength;
    4a56:	eb 81       	ldd	r30, Y+3	; 0x03
    4a58:	fc 81       	ldd	r31, Y+4	; 0x04
    4a5a:	24 81       	ldd	r18, Z+4	; 0x04
    4a5c:	35 81       	ldd	r19, Z+5	; 0x05
    4a5e:	89 81       	ldd	r24, Y+1	; 0x01
    4a60:	9a 81       	ldd	r25, Y+2	; 0x02
    4a62:	82 1b       	sub	r24, r18
    4a64:	93 0b       	sbc	r25, r19
    4a66:	9a 83       	std	Y+2, r25	; 0x02
    4a68:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    4a6a:	89 81       	ldd	r24, Y+1	; 0x01
    4a6c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4a6e:	0f 90       	pop	r0
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	0f 90       	pop	r0
    4a76:	cf 91       	pop	r28
    4a78:	df 91       	pop	r29
    4a7a:	08 95       	ret

00004a7c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
    4a7c:	0f 93       	push	r16
    4a7e:	df 93       	push	r29
    4a80:	cf 93       	push	r28
    4a82:	cd b7       	in	r28, 0x3d	; 61
    4a84:	de b7       	in	r29, 0x3e	; 62
    4a86:	29 97       	sbiw	r28, 0x09	; 9
    4a88:	0f b6       	in	r0, 0x3f	; 63
    4a8a:	f8 94       	cli
    4a8c:	de bf       	out	0x3e, r29	; 62
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	cd bf       	out	0x3d, r28	; 61
    4a92:	9a 83       	std	Y+2, r25	; 0x02
    4a94:	89 83       	std	Y+1, r24	; 0x01
    4a96:	7c 83       	std	Y+4, r23	; 0x04
    4a98:	6b 83       	std	Y+3, r22	; 0x03
    4a9a:	5e 83       	std	Y+6, r21	; 0x06
    4a9c:	4d 83       	std	Y+5, r20	; 0x05
    4a9e:	38 87       	std	Y+8, r19	; 0x08
    4aa0:	2f 83       	std	Y+7, r18	; 0x07
    4aa2:	09 87       	std	Y+9, r16	; 0x09
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    4aa4:	89 81       	ldd	r24, Y+1	; 0x01
    4aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa8:	60 e0       	ldi	r22, 0x00	; 0
    4aaa:	70 e0       	ldi	r23, 0x00	; 0
    4aac:	4f e0       	ldi	r20, 0x0F	; 15
    4aae:	50 e0       	ldi	r21, 0x00	; 0
    4ab0:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    4ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aba:	9c 81       	ldd	r25, Y+4	; 0x04
    4abc:	95 87       	std	Z+13, r25	; 0x0d
    4abe:	84 87       	std	Z+12, r24	; 0x0c
	pxStreamBuffer->xLength = xBufferSizeBytes;
    4ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    4ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac8:	95 83       	std	Z+5, r25	; 0x05
    4aca:	84 83       	std	Z+4, r24	; 0x04
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    4acc:	e9 81       	ldd	r30, Y+1	; 0x01
    4ace:	fa 81       	ldd	r31, Y+2	; 0x02
    4ad0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ad2:	98 85       	ldd	r25, Y+8	; 0x08
    4ad4:	97 83       	std	Z+7, r25	; 0x07
    4ad6:	86 83       	std	Z+6, r24	; 0x06
	pxStreamBuffer->ucFlags = ucFlags;
    4ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    4ada:	fa 81       	ldd	r31, Y+2	; 0x02
    4adc:	89 85       	ldd	r24, Y+9	; 0x09
    4ade:	86 87       	std	Z+14, r24	; 0x0e
}
    4ae0:	29 96       	adiw	r28, 0x09	; 9
    4ae2:	0f b6       	in	r0, 0x3f	; 63
    4ae4:	f8 94       	cli
    4ae6:	de bf       	out	0x3e, r29	; 62
    4ae8:	0f be       	out	0x3f, r0	; 63
    4aea:	cd bf       	out	0x3d, r28	; 61
    4aec:	cf 91       	pop	r28
    4aee:	df 91       	pop	r29
    4af0:	0f 91       	pop	r16
    4af2:	08 95       	ret

00004af4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    4af4:	8f 92       	push	r8
    4af6:	9f 92       	push	r9
    4af8:	af 92       	push	r10
    4afa:	bf 92       	push	r11
    4afc:	cf 92       	push	r12
    4afe:	df 92       	push	r13
    4b00:	ef 92       	push	r14
    4b02:	ff 92       	push	r15
    4b04:	0f 93       	push	r16
    4b06:	1f 93       	push	r17
    4b08:	df 93       	push	r29
    4b0a:	cf 93       	push	r28
    4b0c:	cd b7       	in	r28, 0x3d	; 61
    4b0e:	de b7       	in	r29, 0x3e	; 62
    4b10:	60 97       	sbiw	r28, 0x10	; 16
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	f8 94       	cli
    4b16:	de bf       	out	0x3e, r29	; 62
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	cd bf       	out	0x3d, r28	; 61
    4b1c:	9f 83       	std	Y+7, r25	; 0x07
    4b1e:	8e 83       	std	Y+6, r24	; 0x06
    4b20:	79 87       	std	Y+9, r23	; 0x09
    4b22:	68 87       	std	Y+8, r22	; 0x08
    4b24:	5b 87       	std	Y+11, r21	; 0x0b
    4b26:	4a 87       	std	Y+10, r20	; 0x0a
    4b28:	3d 87       	std	Y+13, r19	; 0x0d
    4b2a:	2c 87       	std	Y+12, r18	; 0x0c
    4b2c:	0e 87       	std	Y+14, r16	; 0x0e
    4b2e:	f8 8a       	std	Y+16, r15	; 0x10
    4b30:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    4b32:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b34:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b36:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    4b3a:	9a 83       	std	Y+2, r25	; 0x02
    4b3c:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    4b3e:	89 81       	ldd	r24, Y+1	; 0x01
    4b40:	9a 81       	ldd	r25, Y+2	; 0x02
    4b42:	00 97       	sbiw	r24, 0x00	; 0
    4b44:	b1 f0       	breq	.+44     	; 0x4b72 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    4b46:	86 e2       	ldi	r24, 0x26	; 38
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    4b4e:	9d 83       	std	Y+5, r25	; 0x05
    4b50:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    4b52:	8c 81       	ldd	r24, Y+4	; 0x04
    4b54:	9d 81       	ldd	r25, Y+5	; 0x05
    4b56:	00 97       	sbiw	r24, 0x00	; 0
    4b58:	39 f0       	breq	.+14     	; 0x4b68 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    4b5a:	ec 81       	ldd	r30, Y+4	; 0x04
    4b5c:	fd 81       	ldd	r31, Y+5	; 0x05
    4b5e:	89 81       	ldd	r24, Y+1	; 0x01
    4b60:	9a 81       	ldd	r25, Y+2	; 0x02
    4b62:	90 8f       	std	Z+24, r25	; 0x18
    4b64:	87 8b       	std	Z+23, r24	; 0x17
    4b66:	07 c0       	rjmp	.+14     	; 0x4b76 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    4b68:	89 81       	ldd	r24, Y+1	; 0x01
    4b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
    4b70:	02 c0       	rjmp	.+4      	; 0x4b76 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    4b72:	1d 82       	std	Y+5, r1	; 0x05
    4b74:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    4b76:	8c 81       	ldd	r24, Y+4	; 0x04
    4b78:	9d 81       	ldd	r25, Y+5	; 0x05
    4b7a:	00 97       	sbiw	r24, 0x00	; 0
    4b7c:	e9 f0       	breq	.+58     	; 0x4bb8 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    4b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b80:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b82:	9c 01       	movw	r18, r24
    4b84:	40 e0       	ldi	r20, 0x00	; 0
    4b86:	50 e0       	ldi	r21, 0x00	; 0
    4b88:	8e 81       	ldd	r24, Y+6	; 0x06
    4b8a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b8c:	68 85       	ldd	r22, Y+8	; 0x08
    4b8e:	79 85       	ldd	r23, Y+9	; 0x09
    4b90:	ec 85       	ldd	r30, Y+12	; 0x0c
    4b92:	fd 85       	ldd	r31, Y+13	; 0x0d
    4b94:	af 85       	ldd	r26, Y+15	; 0x0f
    4b96:	b8 89       	ldd	r27, Y+16	; 0x10
    4b98:	ac 80       	ldd	r10, Y+4	; 0x04
    4b9a:	bd 80       	ldd	r11, Y+5	; 0x05
    4b9c:	8f 01       	movw	r16, r30
    4b9e:	ee 84       	ldd	r14, Y+14	; 0x0e
    4ba0:	6d 01       	movw	r12, r26
    4ba2:	88 24       	eor	r8, r8
    4ba4:	99 24       	eor	r9, r9
    4ba6:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    4baa:	8c 81       	ldd	r24, Y+4	; 0x04
    4bac:	9d 81       	ldd	r25, Y+5	; 0x05
    4bae:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	8b 83       	std	Y+3, r24	; 0x03
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4bb8:	8f ef       	ldi	r24, 0xFF	; 255
    4bba:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    4bbc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    4bbe:	60 96       	adiw	r28, 0x10	; 16
    4bc0:	0f b6       	in	r0, 0x3f	; 63
    4bc2:	f8 94       	cli
    4bc4:	de bf       	out	0x3e, r29	; 62
    4bc6:	0f be       	out	0x3f, r0	; 63
    4bc8:	cd bf       	out	0x3d, r28	; 61
    4bca:	cf 91       	pop	r28
    4bcc:	df 91       	pop	r29
    4bce:	1f 91       	pop	r17
    4bd0:	0f 91       	pop	r16
    4bd2:	ff 90       	pop	r15
    4bd4:	ef 90       	pop	r14
    4bd6:	df 90       	pop	r13
    4bd8:	cf 90       	pop	r12
    4bda:	bf 90       	pop	r11
    4bdc:	af 90       	pop	r10
    4bde:	9f 90       	pop	r9
    4be0:	8f 90       	pop	r8
    4be2:	08 95       	ret

00004be4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    4be4:	8f 92       	push	r8
    4be6:	9f 92       	push	r9
    4be8:	af 92       	push	r10
    4bea:	bf 92       	push	r11
    4bec:	cf 92       	push	r12
    4bee:	df 92       	push	r13
    4bf0:	ef 92       	push	r14
    4bf2:	0f 93       	push	r16
    4bf4:	1f 93       	push	r17
    4bf6:	df 93       	push	r29
    4bf8:	cf 93       	push	r28
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	64 97       	sbiw	r28, 0x14	; 20
    4c00:	0f b6       	in	r0, 0x3f	; 63
    4c02:	f8 94       	cli
    4c04:	de bf       	out	0x3e, r29	; 62
    4c06:	0f be       	out	0x3f, r0	; 63
    4c08:	cd bf       	out	0x3d, r28	; 61
    4c0a:	9d 83       	std	Y+5, r25	; 0x05
    4c0c:	8c 83       	std	Y+4, r24	; 0x04
    4c0e:	7f 83       	std	Y+7, r23	; 0x07
    4c10:	6e 83       	std	Y+6, r22	; 0x06
    4c12:	28 87       	std	Y+8, r18	; 0x08
    4c14:	39 87       	std	Y+9, r19	; 0x09
    4c16:	4a 87       	std	Y+10, r20	; 0x0a
    4c18:	5b 87       	std	Y+11, r21	; 0x0b
    4c1a:	1d 87       	std	Y+13, r17	; 0x0d
    4c1c:	0c 87       	std	Y+12, r16	; 0x0c
    4c1e:	ee 86       	std	Y+14, r14	; 0x0e
    4c20:	d8 8a       	std	Y+16, r13	; 0x10
    4c22:	cf 86       	std	Y+15, r12	; 0x0f
    4c24:	ba 8a       	std	Y+18, r11	; 0x12
    4c26:	a9 8a       	std	Y+17, r10	; 0x11
    4c28:	9c 8a       	std	Y+20, r9	; 0x14
    4c2a:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    4c2c:	e9 89       	ldd	r30, Y+17	; 0x11
    4c2e:	fa 89       	ldd	r31, Y+18	; 0x12
    4c30:	27 89       	ldd	r18, Z+23	; 0x17
    4c32:	30 8d       	ldd	r19, Z+24	; 0x18
    4c34:	88 85       	ldd	r24, Y+8	; 0x08
    4c36:	99 85       	ldd	r25, Y+9	; 0x09
    4c38:	01 97       	sbiw	r24, 0x01	; 1
    4c3a:	82 0f       	add	r24, r18
    4c3c:	93 1f       	adc	r25, r19
    4c3e:	9b 83       	std	Y+3, r25	; 0x03
    4c40:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    4c42:	8e 81       	ldd	r24, Y+6	; 0x06
    4c44:	9f 81       	ldd	r25, Y+7	; 0x07
    4c46:	00 97       	sbiw	r24, 0x00	; 0
    4c48:	51 f1       	breq	.+84     	; 0x4c9e <prvInitialiseNewTask+0xba>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4c4a:	19 82       	std	Y+1, r1	; 0x01
    4c4c:	21 c0       	rjmp	.+66     	; 0x4c90 <prvInitialiseNewTask+0xac>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4c4e:	89 81       	ldd	r24, Y+1	; 0x01
    4c50:	48 2f       	mov	r20, r24
    4c52:	50 e0       	ldi	r21, 0x00	; 0
    4c54:	89 81       	ldd	r24, Y+1	; 0x01
    4c56:	28 2f       	mov	r18, r24
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c5e:	fc 01       	movw	r30, r24
    4c60:	e2 0f       	add	r30, r18
    4c62:	f3 1f       	adc	r31, r19
    4c64:	20 81       	ld	r18, Z
    4c66:	89 89       	ldd	r24, Y+17	; 0x11
    4c68:	9a 89       	ldd	r25, Y+18	; 0x12
    4c6a:	84 0f       	add	r24, r20
    4c6c:	95 1f       	adc	r25, r21
    4c6e:	fc 01       	movw	r30, r24
    4c70:	79 96       	adiw	r30, 0x19	; 25
    4c72:	20 83       	st	Z, r18

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	28 2f       	mov	r18, r24
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c7e:	fc 01       	movw	r30, r24
    4c80:	e2 0f       	add	r30, r18
    4c82:	f3 1f       	adc	r31, r19
    4c84:	80 81       	ld	r24, Z
    4c86:	88 23       	and	r24, r24
    4c88:	31 f0       	breq	.+12     	; 0x4c96 <prvInitialiseNewTask+0xb2>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	8f 5f       	subi	r24, 0xFF	; 255
    4c8e:	89 83       	std	Y+1, r24	; 0x01
    4c90:	89 81       	ldd	r24, Y+1	; 0x01
    4c92:	88 30       	cpi	r24, 0x08	; 8
    4c94:	e0 f2       	brcs	.-72     	; 0x4c4e <prvInitialiseNewTask+0x6a>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    4c96:	e9 89       	ldd	r30, Y+17	; 0x11
    4c98:	fa 89       	ldd	r31, Y+18	; 0x12
    4c9a:	10 a2       	std	Z+32, r1	; 0x20
    4c9c:	03 c0       	rjmp	.+6      	; 0x4ca4 <prvInitialiseNewTask+0xc0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    4c9e:	e9 89       	ldd	r30, Y+17	; 0x11
    4ca0:	fa 89       	ldd	r31, Y+18	; 0x12
    4ca2:	11 8e       	std	Z+25, r1	; 0x19
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    4ca4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ca6:	84 30       	cpi	r24, 0x04	; 4
    4ca8:	10 f0       	brcs	.+4      	; 0x4cae <prvInitialiseNewTask+0xca>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    4caa:	83 e0       	ldi	r24, 0x03	; 3
    4cac:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    4cae:	e9 89       	ldd	r30, Y+17	; 0x11
    4cb0:	fa 89       	ldd	r31, Y+18	; 0x12
    4cb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cb4:	86 8b       	std	Z+22, r24	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    4cb6:	89 89       	ldd	r24, Y+17	; 0x11
    4cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    4cba:	02 96       	adiw	r24, 0x02	; 2
    4cbc:	0e 94 53 11 	call	0x22a6	; 0x22a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    4cc0:	89 89       	ldd	r24, Y+17	; 0x11
    4cc2:	9a 89       	ldd	r25, Y+18	; 0x12
    4cc4:	0c 96       	adiw	r24, 0x0c	; 12
    4cc6:	0e 94 53 11 	call	0x22a6	; 0x22a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    4cca:	e9 89       	ldd	r30, Y+17	; 0x11
    4ccc:	fa 89       	ldd	r31, Y+18	; 0x12
    4cce:	89 89       	ldd	r24, Y+17	; 0x11
    4cd0:	9a 89       	ldd	r25, Y+18	; 0x12
    4cd2:	91 87       	std	Z+9, r25	; 0x09
    4cd4:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4cd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cd8:	28 2f       	mov	r18, r24
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	84 e0       	ldi	r24, 0x04	; 4
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	82 1b       	sub	r24, r18
    4ce2:	93 0b       	sbc	r25, r19
    4ce4:	e9 89       	ldd	r30, Y+17	; 0x11
    4ce6:	fa 89       	ldd	r31, Y+18	; 0x12
    4ce8:	95 87       	std	Z+13, r25	; 0x0d
    4cea:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    4cec:	e9 89       	ldd	r30, Y+17	; 0x11
    4cee:	fa 89       	ldd	r31, Y+18	; 0x12
    4cf0:	89 89       	ldd	r24, Y+17	; 0x11
    4cf2:	9a 89       	ldd	r25, Y+18	; 0x12
    4cf4:	93 8b       	std	Z+19, r25	; 0x13
    4cf6:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    4cf8:	e9 89       	ldd	r30, Y+17	; 0x11
    4cfa:	fa 89       	ldd	r31, Y+18	; 0x12
    4cfc:	11 a2       	std	Z+33, r1	; 0x21
    4cfe:	12 a2       	std	Z+34, r1	; 0x22
    4d00:	13 a2       	std	Z+35, r1	; 0x23
    4d02:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4d04:	e9 89       	ldd	r30, Y+17	; 0x11
    4d06:	fa 89       	ldd	r31, Y+18	; 0x12
    4d08:	15 a2       	std	Z+37, r1	; 0x25
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    4d10:	3d 81       	ldd	r19, Y+5	; 0x05
    4d12:	4c 85       	ldd	r20, Y+12	; 0x0c
    4d14:	5d 85       	ldd	r21, Y+13	; 0x0d
    4d16:	b9 01       	movw	r22, r18
    4d18:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <pxPortInitialiseStack>
    4d1c:	e9 89       	ldd	r30, Y+17	; 0x11
    4d1e:	fa 89       	ldd	r31, Y+18	; 0x12
    4d20:	91 83       	std	Z+1, r25	; 0x01
    4d22:	80 83       	st	Z, r24
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    4d24:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d26:	98 89       	ldd	r25, Y+16	; 0x10
    4d28:	00 97       	sbiw	r24, 0x00	; 0
    4d2a:	31 f0       	breq	.+12     	; 0x4d38 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    4d2c:	ef 85       	ldd	r30, Y+15	; 0x0f
    4d2e:	f8 89       	ldd	r31, Y+16	; 0x10
    4d30:	89 89       	ldd	r24, Y+17	; 0x11
    4d32:	9a 89       	ldd	r25, Y+18	; 0x12
    4d34:	91 83       	std	Z+1, r25	; 0x01
    4d36:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    4d38:	64 96       	adiw	r28, 0x14	; 20
    4d3a:	0f b6       	in	r0, 0x3f	; 63
    4d3c:	f8 94       	cli
    4d3e:	de bf       	out	0x3e, r29	; 62
    4d40:	0f be       	out	0x3f, r0	; 63
    4d42:	cd bf       	out	0x3d, r28	; 61
    4d44:	cf 91       	pop	r28
    4d46:	df 91       	pop	r29
    4d48:	1f 91       	pop	r17
    4d4a:	0f 91       	pop	r16
    4d4c:	ef 90       	pop	r14
    4d4e:	df 90       	pop	r13
    4d50:	cf 90       	pop	r12
    4d52:	bf 90       	pop	r11
    4d54:	af 90       	pop	r10
    4d56:	9f 90       	pop	r9
    4d58:	8f 90       	pop	r8
    4d5a:	08 95       	ret

00004d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    4d5c:	df 93       	push	r29
    4d5e:	cf 93       	push	r28
    4d60:	00 d0       	rcall	.+0      	; 0x4d62 <prvAddNewTaskToReadyList+0x6>
    4d62:	cd b7       	in	r28, 0x3d	; 61
    4d64:	de b7       	in	r29, 0x3e	; 62
    4d66:	9a 83       	std	Y+2, r25	; 0x02
    4d68:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	f8 94       	cli
    4d6e:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    4d70:	80 91 9c 06 	lds	r24, 0x069C
    4d74:	8f 5f       	subi	r24, 0xFF	; 255
    4d76:	80 93 9c 06 	sts	0x069C, r24
		if( pxCurrentTCB == NULL )
    4d7a:	80 91 99 06 	lds	r24, 0x0699
    4d7e:	90 91 9a 06 	lds	r25, 0x069A
    4d82:	00 97       	sbiw	r24, 0x00	; 0
    4d84:	69 f4       	brne	.+26     	; 0x4da0 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    4d86:	89 81       	ldd	r24, Y+1	; 0x01
    4d88:	9a 81       	ldd	r25, Y+2	; 0x02
    4d8a:	90 93 9a 06 	sts	0x069A, r25
    4d8e:	80 93 99 06 	sts	0x0699, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    4d92:	80 91 9c 06 	lds	r24, 0x069C
    4d96:	81 30       	cpi	r24, 0x01	; 1
    4d98:	b9 f4       	brne	.+46     	; 0x4dc8 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    4d9a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <prvInitialiseTaskLists>
    4d9e:	14 c0       	rjmp	.+40     	; 0x4dc8 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    4da0:	80 91 a0 06 	lds	r24, 0x06A0
    4da4:	88 23       	and	r24, r24
    4da6:	81 f4       	brne	.+32     	; 0x4dc8 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    4da8:	e0 91 99 06 	lds	r30, 0x0699
    4dac:	f0 91 9a 06 	lds	r31, 0x069A
    4db0:	96 89       	ldd	r25, Z+22	; 0x16
    4db2:	e9 81       	ldd	r30, Y+1	; 0x01
    4db4:	fa 81       	ldd	r31, Y+2	; 0x02
    4db6:	86 89       	ldd	r24, Z+22	; 0x16
    4db8:	89 17       	cp	r24, r25
    4dba:	30 f0       	brcs	.+12     	; 0x4dc8 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    4dbc:	89 81       	ldd	r24, Y+1	; 0x01
    4dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc0:	90 93 9a 06 	sts	0x069A, r25
    4dc4:	80 93 99 06 	sts	0x0699, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    4dc8:	80 91 a4 06 	lds	r24, 0x06A4
    4dcc:	8f 5f       	subi	r24, 0xFF	; 255
    4dce:	80 93 a4 06 	sts	0x06A4, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    4dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    4dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    4dd6:	96 89       	ldd	r25, Z+22	; 0x16
    4dd8:	80 91 9f 06 	lds	r24, 0x069F
    4ddc:	89 17       	cp	r24, r25
    4dde:	28 f4       	brcc	.+10     	; 0x4dea <prvAddNewTaskToReadyList+0x8e>
    4de0:	e9 81       	ldd	r30, Y+1	; 0x01
    4de2:	fa 81       	ldd	r31, Y+2	; 0x02
    4de4:	86 89       	ldd	r24, Z+22	; 0x16
    4de6:	80 93 9f 06 	sts	0x069F, r24
    4dea:	e9 81       	ldd	r30, Y+1	; 0x01
    4dec:	fa 81       	ldd	r31, Y+2	; 0x02
    4dee:	86 89       	ldd	r24, Z+22	; 0x16
    4df0:	28 2f       	mov	r18, r24
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	c9 01       	movw	r24, r18
    4df6:	88 0f       	add	r24, r24
    4df8:	99 1f       	adc	r25, r25
    4dfa:	88 0f       	add	r24, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	88 0f       	add	r24, r24
    4e00:	99 1f       	adc	r25, r25
    4e02:	82 0f       	add	r24, r18
    4e04:	93 1f       	adc	r25, r19
    4e06:	ac 01       	movw	r20, r24
    4e08:	46 55       	subi	r20, 0x56	; 86
    4e0a:	59 4f       	sbci	r21, 0xF9	; 249
    4e0c:	89 81       	ldd	r24, Y+1	; 0x01
    4e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e10:	9c 01       	movw	r18, r24
    4e12:	2e 5f       	subi	r18, 0xFE	; 254
    4e14:	3f 4f       	sbci	r19, 0xFF	; 255
    4e16:	ca 01       	movw	r24, r20
    4e18:	b9 01       	movw	r22, r18
    4e1a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    4e1e:	0f 90       	pop	r0
    4e20:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    4e22:	80 91 a0 06 	lds	r24, 0x06A0
    4e26:	88 23       	and	r24, r24
    4e28:	61 f0       	breq	.+24     	; 0x4e42 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    4e2a:	e0 91 99 06 	lds	r30, 0x0699
    4e2e:	f0 91 9a 06 	lds	r31, 0x069A
    4e32:	96 89       	ldd	r25, Z+22	; 0x16
    4e34:	e9 81       	ldd	r30, Y+1	; 0x01
    4e36:	fa 81       	ldd	r31, Y+2	; 0x02
    4e38:	86 89       	ldd	r24, Z+22	; 0x16
    4e3a:	98 17       	cp	r25, r24
    4e3c:	10 f4       	brcc	.+4      	; 0x4e42 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    4e3e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    4e42:	0f 90       	pop	r0
    4e44:	0f 90       	pop	r0
    4e46:	cf 91       	pop	r28
    4e48:	df 91       	pop	r29
    4e4a:	08 95       	ret

00004e4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    4e4c:	df 93       	push	r29
    4e4e:	cf 93       	push	r28
    4e50:	00 d0       	rcall	.+0      	; 0x4e52 <vTaskDelete+0x6>
    4e52:	00 d0       	rcall	.+0      	; 0x4e54 <vTaskDelete+0x8>
    4e54:	00 d0       	rcall	.+0      	; 0x4e56 <vTaskDelete+0xa>
    4e56:	cd b7       	in	r28, 0x3d	; 61
    4e58:	de b7       	in	r29, 0x3e	; 62
    4e5a:	9c 83       	std	Y+4, r25	; 0x04
    4e5c:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4e5e:	0f b6       	in	r0, 0x3f	; 63
    4e60:	f8 94       	cli
    4e62:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    4e64:	8b 81       	ldd	r24, Y+3	; 0x03
    4e66:	9c 81       	ldd	r25, Y+4	; 0x04
    4e68:	00 97       	sbiw	r24, 0x00	; 0
    4e6a:	39 f4       	brne	.+14     	; 0x4e7a <vTaskDelete+0x2e>
    4e6c:	80 91 99 06 	lds	r24, 0x0699
    4e70:	90 91 9a 06 	lds	r25, 0x069A
    4e74:	9e 83       	std	Y+6, r25	; 0x06
    4e76:	8d 83       	std	Y+5, r24	; 0x05
    4e78:	04 c0       	rjmp	.+8      	; 0x4e82 <vTaskDelete+0x36>
    4e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e7e:	9e 83       	std	Y+6, r25	; 0x06
    4e80:	8d 83       	std	Y+5, r24	; 0x05
    4e82:	8d 81       	ldd	r24, Y+5	; 0x05
    4e84:	9e 81       	ldd	r25, Y+6	; 0x06
    4e86:	9a 83       	std	Y+2, r25	; 0x02
    4e88:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8e:	02 96       	adiw	r24, 0x02	; 2
    4e90:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4e94:	e9 81       	ldd	r30, Y+1	; 0x01
    4e96:	fa 81       	ldd	r31, Y+2	; 0x02
    4e98:	84 89       	ldd	r24, Z+20	; 0x14
    4e9a:	95 89       	ldd	r25, Z+21	; 0x15
    4e9c:	00 97       	sbiw	r24, 0x00	; 0
    4e9e:	29 f0       	breq	.+10     	; 0x4eaa <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4ea0:	89 81       	ldd	r24, Y+1	; 0x01
    4ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea4:	0c 96       	adiw	r24, 0x0c	; 12
    4ea6:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    4eaa:	80 91 a4 06 	lds	r24, 0x06A4
    4eae:	8f 5f       	subi	r24, 0xFF	; 255
    4eb0:	80 93 a4 06 	sts	0x06A4, r24

			if( pxTCB == pxCurrentTCB )
    4eb4:	20 91 99 06 	lds	r18, 0x0699
    4eb8:	30 91 9a 06 	lds	r19, 0x069A
    4ebc:	89 81       	ldd	r24, Y+1	; 0x01
    4ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec0:	82 17       	cp	r24, r18
    4ec2:	93 07       	cpc	r25, r19
    4ec4:	81 f4       	brne	.+32     	; 0x4ee6 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    4ec6:	89 81       	ldd	r24, Y+1	; 0x01
    4ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eca:	9c 01       	movw	r18, r24
    4ecc:	2e 5f       	subi	r18, 0xFE	; 254
    4ece:	3f 4f       	sbci	r19, 0xFF	; 255
    4ed0:	8d ee       	ldi	r24, 0xED	; 237
    4ed2:	96 e0       	ldi	r25, 0x06	; 6
    4ed4:	b9 01       	movw	r22, r18
    4ed6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    4eda:	80 91 9b 06 	lds	r24, 0x069B
    4ede:	8f 5f       	subi	r24, 0xFF	; 255
    4ee0:	80 93 9b 06 	sts	0x069B, r24
    4ee4:	0b c0       	rjmp	.+22     	; 0x4efc <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    4ee6:	80 91 9c 06 	lds	r24, 0x069C
    4eea:	81 50       	subi	r24, 0x01	; 1
    4eec:	80 93 9c 06 	sts	0x069C, r24
				prvDeleteTCB( pxTCB );
    4ef0:	89 81       	ldd	r24, Y+1	; 0x01
    4ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef4:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    4ef8:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4efc:	0f 90       	pop	r0
    4efe:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    4f00:	80 91 a0 06 	lds	r24, 0x06A0
    4f04:	88 23       	and	r24, r24
    4f06:	59 f0       	breq	.+22     	; 0x4f1e <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    4f08:	20 91 99 06 	lds	r18, 0x0699
    4f0c:	30 91 9a 06 	lds	r19, 0x069A
    4f10:	89 81       	ldd	r24, Y+1	; 0x01
    4f12:	9a 81       	ldd	r25, Y+2	; 0x02
    4f14:	82 17       	cp	r24, r18
    4f16:	93 07       	cpc	r25, r19
    4f18:	11 f4       	brne	.+4      	; 0x4f1e <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    4f1a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    4f1e:	26 96       	adiw	r28, 0x06	; 6
    4f20:	0f b6       	in	r0, 0x3f	; 63
    4f22:	f8 94       	cli
    4f24:	de bf       	out	0x3e, r29	; 62
    4f26:	0f be       	out	0x3f, r0	; 63
    4f28:	cd bf       	out	0x3d, r28	; 61
    4f2a:	cf 91       	pop	r28
    4f2c:	df 91       	pop	r29
    4f2e:	08 95       	ret

00004f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    4f30:	df 93       	push	r29
    4f32:	cf 93       	push	r28
    4f34:	00 d0       	rcall	.+0      	; 0x4f36 <vTaskDelay+0x6>
    4f36:	0f 92       	push	r0
    4f38:	cd b7       	in	r28, 0x3d	; 61
    4f3a:	de b7       	in	r29, 0x3e	; 62
    4f3c:	9b 83       	std	Y+3, r25	; 0x03
    4f3e:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    4f40:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    4f42:	8a 81       	ldd	r24, Y+2	; 0x02
    4f44:	9b 81       	ldd	r25, Y+3	; 0x03
    4f46:	00 97       	sbiw	r24, 0x00	; 0
    4f48:	51 f0       	breq	.+20     	; 0x4f5e <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    4f4a:	0e 94 65 29 	call	0x52ca	; 0x52ca <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    4f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f50:	9b 81       	ldd	r25, Y+3	; 0x03
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	0e 94 17 32 	call	0x642e	; 0x642e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4f58:	0e 94 71 29 	call	0x52e2	; 0x52e2 <xTaskResumeAll>
    4f5c:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	88 23       	and	r24, r24
    4f62:	11 f4       	brne	.+4      	; 0x4f68 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    4f64:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4f68:	0f 90       	pop	r0
    4f6a:	0f 90       	pop	r0
    4f6c:	0f 90       	pop	r0
    4f6e:	cf 91       	pop	r28
    4f70:	df 91       	pop	r29
    4f72:	08 95       	ret

00004f74 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    4f74:	df 93       	push	r29
    4f76:	cf 93       	push	r28
    4f78:	00 d0       	rcall	.+0      	; 0x4f7a <vTaskSuspend+0x6>
    4f7a:	00 d0       	rcall	.+0      	; 0x4f7c <vTaskSuspend+0x8>
    4f7c:	00 d0       	rcall	.+0      	; 0x4f7e <vTaskSuspend+0xa>
    4f7e:	cd b7       	in	r28, 0x3d	; 61
    4f80:	de b7       	in	r29, 0x3e	; 62
    4f82:	9c 83       	std	Y+4, r25	; 0x04
    4f84:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4f86:	0f b6       	in	r0, 0x3f	; 63
    4f88:	f8 94       	cli
    4f8a:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f90:	00 97       	sbiw	r24, 0x00	; 0
    4f92:	39 f4       	brne	.+14     	; 0x4fa2 <vTaskSuspend+0x2e>
    4f94:	80 91 99 06 	lds	r24, 0x0699
    4f98:	90 91 9a 06 	lds	r25, 0x069A
    4f9c:	9e 83       	std	Y+6, r25	; 0x06
    4f9e:	8d 83       	std	Y+5, r24	; 0x05
    4fa0:	04 c0       	rjmp	.+8      	; 0x4faa <vTaskSuspend+0x36>
    4fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa6:	9e 83       	std	Y+6, r25	; 0x06
    4fa8:	8d 83       	std	Y+5, r24	; 0x05
    4faa:	8d 81       	ldd	r24, Y+5	; 0x05
    4fac:	9e 81       	ldd	r25, Y+6	; 0x06
    4fae:	9a 83       	std	Y+2, r25	; 0x02
    4fb0:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4fb2:	89 81       	ldd	r24, Y+1	; 0x01
    4fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb6:	02 96       	adiw	r24, 0x02	; 2
    4fb8:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    4fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    4fc0:	84 89       	ldd	r24, Z+20	; 0x14
    4fc2:	95 89       	ldd	r25, Z+21	; 0x15
    4fc4:	00 97       	sbiw	r24, 0x00	; 0
    4fc6:	29 f0       	breq	.+10     	; 0x4fd2 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4fc8:	89 81       	ldd	r24, Y+1	; 0x01
    4fca:	9a 81       	ldd	r25, Y+2	; 0x02
    4fcc:	0c 96       	adiw	r24, 0x0c	; 12
    4fce:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    4fd2:	89 81       	ldd	r24, Y+1	; 0x01
    4fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fd6:	9c 01       	movw	r18, r24
    4fd8:	2e 5f       	subi	r18, 0xFE	; 254
    4fda:	3f 4f       	sbci	r19, 0xFF	; 255
    4fdc:	86 ef       	ldi	r24, 0xF6	; 246
    4fde:	96 e0       	ldi	r25, 0x06	; 6
    4fe0:	b9 01       	movw	r22, r18
    4fe2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    4fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    4fea:	85 a1       	ldd	r24, Z+37	; 0x25
    4fec:	81 30       	cpi	r24, 0x01	; 1
    4fee:	19 f4       	brne	.+6      	; 0x4ff6 <vTaskSuspend+0x82>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    4ff4:	15 a2       	std	Z+37, r1	; 0x25
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    4ff6:	0f 90       	pop	r0
    4ff8:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    4ffa:	80 91 a0 06 	lds	r24, 0x06A0
    4ffe:	88 23       	and	r24, r24
    5000:	39 f0       	breq	.+14     	; 0x5010 <vTaskSuspend+0x9c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    5002:	0f b6       	in	r0, 0x3f	; 63
    5004:	f8 94       	cli
    5006:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    5008:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    500c:	0f 90       	pop	r0
    500e:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    5010:	20 91 99 06 	lds	r18, 0x0699
    5014:	30 91 9a 06 	lds	r19, 0x069A
    5018:	89 81       	ldd	r24, Y+1	; 0x01
    501a:	9a 81       	ldd	r25, Y+2	; 0x02
    501c:	82 17       	cp	r24, r18
    501e:	93 07       	cpc	r25, r19
    5020:	a1 f4       	brne	.+40     	; 0x504a <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
    5022:	80 91 a0 06 	lds	r24, 0x06A0
    5026:	88 23       	and	r24, r24
    5028:	19 f0       	breq	.+6      	; 0x5030 <vTaskSuspend+0xbc>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    502a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
    502e:	0d c0       	rjmp	.+26     	; 0x504a <vTaskSuspend+0xd6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
    5030:	90 91 f6 06 	lds	r25, 0x06F6
    5034:	80 91 9c 06 	lds	r24, 0x069C
    5038:	98 17       	cp	r25, r24
    503a:	29 f4       	brne	.+10     	; 0x5046 <vTaskSuspend+0xd2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    503c:	10 92 9a 06 	sts	0x069A, r1
    5040:	10 92 99 06 	sts	0x0699, r1
    5044:	02 c0       	rjmp	.+4      	; 0x504a <vTaskSuspend+0xd6>
				}
				else
				{
					vTaskSwitchContext();
    5046:	0e 94 46 2b 	call	0x568c	; 0x568c <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    504a:	26 96       	adiw	r28, 0x06	; 6
    504c:	0f b6       	in	r0, 0x3f	; 63
    504e:	f8 94       	cli
    5050:	de bf       	out	0x3e, r29	; 62
    5052:	0f be       	out	0x3f, r0	; 63
    5054:	cd bf       	out	0x3d, r28	; 61
    5056:	cf 91       	pop	r28
    5058:	df 91       	pop	r29
    505a:	08 95       	ret

0000505c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    505c:	df 93       	push	r29
    505e:	cf 93       	push	r28
    5060:	00 d0       	rcall	.+0      	; 0x5062 <prvTaskIsTaskSuspended+0x6>
    5062:	00 d0       	rcall	.+0      	; 0x5064 <prvTaskIsTaskSuspended+0x8>
    5064:	0f 92       	push	r0
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
    506a:	9d 83       	std	Y+5, r25	; 0x05
    506c:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    506e:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = xTask;
    5070:	8c 81       	ldd	r24, Y+4	; 0x04
    5072:	9d 81       	ldd	r25, Y+5	; 0x05
    5074:	9a 83       	std	Y+2, r25	; 0x02
    5076:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    5078:	e9 81       	ldd	r30, Y+1	; 0x01
    507a:	fa 81       	ldd	r31, Y+2	; 0x02
    507c:	82 85       	ldd	r24, Z+10	; 0x0a
    507e:	93 85       	ldd	r25, Z+11	; 0x0b
    5080:	26 e0       	ldi	r18, 0x06	; 6
    5082:	86 3f       	cpi	r24, 0xF6	; 246
    5084:	92 07       	cpc	r25, r18
    5086:	81 f4       	brne	.+32     	; 0x50a8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    5088:	e9 81       	ldd	r30, Y+1	; 0x01
    508a:	fa 81       	ldd	r31, Y+2	; 0x02
    508c:	84 89       	ldd	r24, Z+20	; 0x14
    508e:	95 89       	ldd	r25, Z+21	; 0x15
    5090:	26 e0       	ldi	r18, 0x06	; 6
    5092:	84 3e       	cpi	r24, 0xE4	; 228
    5094:	92 07       	cpc	r25, r18
    5096:	41 f0       	breq	.+16     	; 0x50a8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    5098:	e9 81       	ldd	r30, Y+1	; 0x01
    509a:	fa 81       	ldd	r31, Y+2	; 0x02
    509c:	84 89       	ldd	r24, Z+20	; 0x14
    509e:	95 89       	ldd	r25, Z+21	; 0x15
    50a0:	00 97       	sbiw	r24, 0x00	; 0
    50a2:	11 f4       	brne	.+4      	; 0x50a8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    50a8:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    50aa:	0f 90       	pop	r0
    50ac:	0f 90       	pop	r0
    50ae:	0f 90       	pop	r0
    50b0:	0f 90       	pop	r0
    50b2:	0f 90       	pop	r0
    50b4:	cf 91       	pop	r28
    50b6:	df 91       	pop	r29
    50b8:	08 95       	ret

000050ba <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    50ba:	df 93       	push	r29
    50bc:	cf 93       	push	r28
    50be:	00 d0       	rcall	.+0      	; 0x50c0 <vTaskResume+0x6>
    50c0:	00 d0       	rcall	.+0      	; 0x50c2 <vTaskResume+0x8>
    50c2:	cd b7       	in	r28, 0x3d	; 61
    50c4:	de b7       	in	r29, 0x3e	; 62
    50c6:	9c 83       	std	Y+4, r25	; 0x04
    50c8:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = xTaskToResume;
    50ca:	8b 81       	ldd	r24, Y+3	; 0x03
    50cc:	9c 81       	ldd	r25, Y+4	; 0x04
    50ce:	9a 83       	std	Y+2, r25	; 0x02
    50d0:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
    50d2:	20 91 99 06 	lds	r18, 0x0699
    50d6:	30 91 9a 06 	lds	r19, 0x069A
    50da:	89 81       	ldd	r24, Y+1	; 0x01
    50dc:	9a 81       	ldd	r25, Y+2	; 0x02
    50de:	82 17       	cp	r24, r18
    50e0:	93 07       	cpc	r25, r19
    50e2:	09 f4       	brne	.+2      	; 0x50e6 <vTaskResume+0x2c>
    50e4:	47 c0       	rjmp	.+142    	; 0x5174 <vTaskResume+0xba>
    50e6:	89 81       	ldd	r24, Y+1	; 0x01
    50e8:	9a 81       	ldd	r25, Y+2	; 0x02
    50ea:	00 97       	sbiw	r24, 0x00	; 0
    50ec:	09 f4       	brne	.+2      	; 0x50f0 <vTaskResume+0x36>
    50ee:	42 c0       	rjmp	.+132    	; 0x5174 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    50f6:	89 81       	ldd	r24, Y+1	; 0x01
    50f8:	9a 81       	ldd	r25, Y+2	; 0x02
    50fa:	0e 94 2e 28 	call	0x505c	; 0x505c <prvTaskIsTaskSuspended>
    50fe:	88 23       	and	r24, r24
    5100:	b9 f1       	breq	.+110    	; 0x5170 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    5102:	89 81       	ldd	r24, Y+1	; 0x01
    5104:	9a 81       	ldd	r25, Y+2	; 0x02
    5106:	02 96       	adiw	r24, 0x02	; 2
    5108:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    510c:	e9 81       	ldd	r30, Y+1	; 0x01
    510e:	fa 81       	ldd	r31, Y+2	; 0x02
    5110:	96 89       	ldd	r25, Z+22	; 0x16
    5112:	80 91 9f 06 	lds	r24, 0x069F
    5116:	89 17       	cp	r24, r25
    5118:	28 f4       	brcc	.+10     	; 0x5124 <vTaskResume+0x6a>
    511a:	e9 81       	ldd	r30, Y+1	; 0x01
    511c:	fa 81       	ldd	r31, Y+2	; 0x02
    511e:	86 89       	ldd	r24, Z+22	; 0x16
    5120:	80 93 9f 06 	sts	0x069F, r24
    5124:	e9 81       	ldd	r30, Y+1	; 0x01
    5126:	fa 81       	ldd	r31, Y+2	; 0x02
    5128:	86 89       	ldd	r24, Z+22	; 0x16
    512a:	28 2f       	mov	r18, r24
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	c9 01       	movw	r24, r18
    5130:	88 0f       	add	r24, r24
    5132:	99 1f       	adc	r25, r25
    5134:	88 0f       	add	r24, r24
    5136:	99 1f       	adc	r25, r25
    5138:	88 0f       	add	r24, r24
    513a:	99 1f       	adc	r25, r25
    513c:	82 0f       	add	r24, r18
    513e:	93 1f       	adc	r25, r19
    5140:	ac 01       	movw	r20, r24
    5142:	46 55       	subi	r20, 0x56	; 86
    5144:	59 4f       	sbci	r21, 0xF9	; 249
    5146:	89 81       	ldd	r24, Y+1	; 0x01
    5148:	9a 81       	ldd	r25, Y+2	; 0x02
    514a:	9c 01       	movw	r18, r24
    514c:	2e 5f       	subi	r18, 0xFE	; 254
    514e:	3f 4f       	sbci	r19, 0xFF	; 255
    5150:	ca 01       	movw	r24, r20
    5152:	b9 01       	movw	r22, r18
    5154:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5158:	e9 81       	ldd	r30, Y+1	; 0x01
    515a:	fa 81       	ldd	r31, Y+2	; 0x02
    515c:	96 89       	ldd	r25, Z+22	; 0x16
    515e:	e0 91 99 06 	lds	r30, 0x0699
    5162:	f0 91 9a 06 	lds	r31, 0x069A
    5166:	86 89       	ldd	r24, Z+22	; 0x16
    5168:	98 17       	cp	r25, r24
    516a:	10 f0       	brcs	.+4      	; 0x5170 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    516c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    5170:	0f 90       	pop	r0
    5172:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5174:	0f 90       	pop	r0
    5176:	0f 90       	pop	r0
    5178:	0f 90       	pop	r0
    517a:	0f 90       	pop	r0
    517c:	cf 91       	pop	r28
    517e:	df 91       	pop	r29
    5180:	08 95       	ret

00005182 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    5182:	df 93       	push	r29
    5184:	cf 93       	push	r28
    5186:	00 d0       	rcall	.+0      	; 0x5188 <xTaskResumeFromISR+0x6>
    5188:	00 d0       	rcall	.+0      	; 0x518a <xTaskResumeFromISR+0x8>
    518a:	00 d0       	rcall	.+0      	; 0x518c <xTaskResumeFromISR+0xa>
    518c:	cd b7       	in	r28, 0x3d	; 61
    518e:	de b7       	in	r29, 0x3e	; 62
    5190:	9e 83       	std	Y+6, r25	; 0x06
    5192:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    5194:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = xTaskToResume;
    5196:	8d 81       	ldd	r24, Y+5	; 0x05
    5198:	9e 81       	ldd	r25, Y+6	; 0x06
    519a:	9b 83       	std	Y+3, r25	; 0x03
    519c:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    519e:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    51a0:	8a 81       	ldd	r24, Y+2	; 0x02
    51a2:	9b 81       	ldd	r25, Y+3	; 0x03
    51a4:	0e 94 2e 28 	call	0x505c	; 0x505c <prvTaskIsTaskSuspended>
    51a8:	88 23       	and	r24, r24
    51aa:	09 f4       	brne	.+2      	; 0x51ae <xTaskResumeFromISR+0x2c>
    51ac:	46 c0       	rjmp	.+140    	; 0x523a <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    51ae:	80 91 a9 06 	lds	r24, 0x06A9
    51b2:	88 23       	and	r24, r24
    51b4:	c1 f5       	brne	.+112    	; 0x5226 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    51b6:	ea 81       	ldd	r30, Y+2	; 0x02
    51b8:	fb 81       	ldd	r31, Y+3	; 0x03
    51ba:	96 89       	ldd	r25, Z+22	; 0x16
    51bc:	e0 91 99 06 	lds	r30, 0x0699
    51c0:	f0 91 9a 06 	lds	r31, 0x069A
    51c4:	86 89       	ldd	r24, Z+22	; 0x16
    51c6:	98 17       	cp	r25, r24
    51c8:	10 f0       	brcs	.+4      	; 0x51ce <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    51ca:	81 e0       	ldi	r24, 0x01	; 1
    51cc:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    51ce:	8a 81       	ldd	r24, Y+2	; 0x02
    51d0:	9b 81       	ldd	r25, Y+3	; 0x03
    51d2:	02 96       	adiw	r24, 0x02	; 2
    51d4:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    51d8:	ea 81       	ldd	r30, Y+2	; 0x02
    51da:	fb 81       	ldd	r31, Y+3	; 0x03
    51dc:	96 89       	ldd	r25, Z+22	; 0x16
    51de:	80 91 9f 06 	lds	r24, 0x069F
    51e2:	89 17       	cp	r24, r25
    51e4:	28 f4       	brcc	.+10     	; 0x51f0 <xTaskResumeFromISR+0x6e>
    51e6:	ea 81       	ldd	r30, Y+2	; 0x02
    51e8:	fb 81       	ldd	r31, Y+3	; 0x03
    51ea:	86 89       	ldd	r24, Z+22	; 0x16
    51ec:	80 93 9f 06 	sts	0x069F, r24
    51f0:	ea 81       	ldd	r30, Y+2	; 0x02
    51f2:	fb 81       	ldd	r31, Y+3	; 0x03
    51f4:	86 89       	ldd	r24, Z+22	; 0x16
    51f6:	28 2f       	mov	r18, r24
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	c9 01       	movw	r24, r18
    51fc:	88 0f       	add	r24, r24
    51fe:	99 1f       	adc	r25, r25
    5200:	88 0f       	add	r24, r24
    5202:	99 1f       	adc	r25, r25
    5204:	88 0f       	add	r24, r24
    5206:	99 1f       	adc	r25, r25
    5208:	82 0f       	add	r24, r18
    520a:	93 1f       	adc	r25, r19
    520c:	ac 01       	movw	r20, r24
    520e:	46 55       	subi	r20, 0x56	; 86
    5210:	59 4f       	sbci	r21, 0xF9	; 249
    5212:	8a 81       	ldd	r24, Y+2	; 0x02
    5214:	9b 81       	ldd	r25, Y+3	; 0x03
    5216:	9c 01       	movw	r18, r24
    5218:	2e 5f       	subi	r18, 0xFE	; 254
    521a:	3f 4f       	sbci	r19, 0xFF	; 255
    521c:	ca 01       	movw	r24, r20
    521e:	b9 01       	movw	r22, r18
    5220:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
    5224:	0a c0       	rjmp	.+20     	; 0x523a <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5226:	8a 81       	ldd	r24, Y+2	; 0x02
    5228:	9b 81       	ldd	r25, Y+3	; 0x03
    522a:	9c 01       	movw	r18, r24
    522c:	24 5f       	subi	r18, 0xF4	; 244
    522e:	3f 4f       	sbci	r19, 0xFF	; 255
    5230:	84 ee       	ldi	r24, 0xE4	; 228
    5232:	96 e0       	ldi	r25, 0x06	; 6
    5234:	b9 01       	movw	r22, r18
    5236:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    523a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    523c:	26 96       	adiw	r28, 0x06	; 6
    523e:	0f b6       	in	r0, 0x3f	; 63
    5240:	f8 94       	cli
    5242:	de bf       	out	0x3e, r29	; 62
    5244:	0f be       	out	0x3f, r0	; 63
    5246:	cd bf       	out	0x3d, r28	; 61
    5248:	cf 91       	pop	r28
    524a:	df 91       	pop	r29
    524c:	08 95       	ret

0000524e <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    524e:	ef 92       	push	r14
    5250:	ff 92       	push	r15
    5252:	0f 93       	push	r16
    5254:	df 93       	push	r29
    5256:	cf 93       	push	r28
    5258:	0f 92       	push	r0
    525a:	cd b7       	in	r28, 0x3d	; 61
    525c:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    525e:	8b e7       	ldi	r24, 0x7B	; 123
    5260:	9d e2       	ldi	r25, 0x2D	; 45
    5262:	20 ea       	ldi	r18, 0xA0	; 160
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	e7 ea       	ldi	r30, 0xA7	; 167
    5268:	f6 e0       	ldi	r31, 0x06	; 6
    526a:	b9 01       	movw	r22, r18
    526c:	45 e5       	ldi	r20, 0x55	; 85
    526e:	50 e0       	ldi	r21, 0x00	; 0
    5270:	20 e0       	ldi	r18, 0x00	; 0
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	00 e0       	ldi	r16, 0x00	; 0
    5276:	7f 01       	movw	r14, r30
    5278:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <xTaskCreate>
    527c:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    527e:	89 81       	ldd	r24, Y+1	; 0x01
    5280:	81 30       	cpi	r24, 0x01	; 1
    5282:	81 f4       	brne	.+32     	; 0x52a4 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    5284:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    5286:	8f ef       	ldi	r24, 0xFF	; 255
    5288:	9f ef       	ldi	r25, 0xFF	; 255
    528a:	90 93 a6 06 	sts	0x06A6, r25
    528e:	80 93 a5 06 	sts	0x06A5, r24
		xSchedulerRunning = pdTRUE;
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	80 93 a0 06 	sts	0x06A0, r24
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    5298:	10 92 9e 06 	sts	0x069E, r1
    529c:	10 92 9d 06 	sts	0x069D, r1

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    52a0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    52a4:	0f 90       	pop	r0
    52a6:	cf 91       	pop	r28
    52a8:	df 91       	pop	r29
    52aa:	0f 91       	pop	r16
    52ac:	ff 90       	pop	r15
    52ae:	ef 90       	pop	r14
    52b0:	08 95       	ret

000052b2 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    52b2:	df 93       	push	r29
    52b4:	cf 93       	push	r28
    52b6:	cd b7       	in	r28, 0x3d	; 61
    52b8:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    52ba:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    52bc:	10 92 a0 06 	sts	0x06A0, r1
	vPortEndScheduler();
    52c0:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vPortEndScheduler>
}
    52c4:	cf 91       	pop	r28
    52c6:	df 91       	pop	r29
    52c8:	08 95       	ret

000052ca <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    52ca:	df 93       	push	r29
    52cc:	cf 93       	push	r28
    52ce:	cd b7       	in	r28, 0x3d	; 61
    52d0:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    52d2:	80 91 a9 06 	lds	r24, 0x06A9
    52d6:	8f 5f       	subi	r24, 0xFF	; 255
    52d8:	80 93 a9 06 	sts	0x06A9, r24
}
    52dc:	cf 91       	pop	r28
    52de:	df 91       	pop	r29
    52e0:	08 95       	ret

000052e2 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    52e2:	df 93       	push	r29
    52e4:	cf 93       	push	r28
    52e6:	00 d0       	rcall	.+0      	; 0x52e8 <xTaskResumeAll+0x6>
    52e8:	00 d0       	rcall	.+0      	; 0x52ea <xTaskResumeAll+0x8>
    52ea:	cd b7       	in	r28, 0x3d	; 61
    52ec:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    52ee:	1c 82       	std	Y+4, r1	; 0x04
    52f0:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    52f2:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    52f4:	0f b6       	in	r0, 0x3f	; 63
    52f6:	f8 94       	cli
    52f8:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    52fa:	80 91 a9 06 	lds	r24, 0x06A9
    52fe:	81 50       	subi	r24, 0x01	; 1
    5300:	80 93 a9 06 	sts	0x06A9, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5304:	80 91 a9 06 	lds	r24, 0x06A9
    5308:	88 23       	and	r24, r24
    530a:	09 f0       	breq	.+2      	; 0x530e <xTaskResumeAll+0x2c>
    530c:	73 c0       	rjmp	.+230    	; 0x53f4 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    530e:	80 91 9c 06 	lds	r24, 0x069C
    5312:	88 23       	and	r24, r24
    5314:	09 f4       	brne	.+2      	; 0x5318 <xTaskResumeAll+0x36>
    5316:	6e c0       	rjmp	.+220    	; 0x53f4 <xTaskResumeAll+0x112>
    5318:	45 c0       	rjmp	.+138    	; 0x53a4 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    531a:	e0 91 e9 06 	lds	r30, 0x06E9
    531e:	f0 91 ea 06 	lds	r31, 0x06EA
    5322:	86 81       	ldd	r24, Z+6	; 0x06
    5324:	97 81       	ldd	r25, Z+7	; 0x07
    5326:	9c 83       	std	Y+4, r25	; 0x04
    5328:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    532a:	8b 81       	ldd	r24, Y+3	; 0x03
    532c:	9c 81       	ldd	r25, Y+4	; 0x04
    532e:	0c 96       	adiw	r24, 0x0c	; 12
    5330:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5334:	8b 81       	ldd	r24, Y+3	; 0x03
    5336:	9c 81       	ldd	r25, Y+4	; 0x04
    5338:	02 96       	adiw	r24, 0x02	; 2
    533a:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    533e:	eb 81       	ldd	r30, Y+3	; 0x03
    5340:	fc 81       	ldd	r31, Y+4	; 0x04
    5342:	96 89       	ldd	r25, Z+22	; 0x16
    5344:	80 91 9f 06 	lds	r24, 0x069F
    5348:	89 17       	cp	r24, r25
    534a:	28 f4       	brcc	.+10     	; 0x5356 <xTaskResumeAll+0x74>
    534c:	eb 81       	ldd	r30, Y+3	; 0x03
    534e:	fc 81       	ldd	r31, Y+4	; 0x04
    5350:	86 89       	ldd	r24, Z+22	; 0x16
    5352:	80 93 9f 06 	sts	0x069F, r24
    5356:	eb 81       	ldd	r30, Y+3	; 0x03
    5358:	fc 81       	ldd	r31, Y+4	; 0x04
    535a:	86 89       	ldd	r24, Z+22	; 0x16
    535c:	28 2f       	mov	r18, r24
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	c9 01       	movw	r24, r18
    5362:	88 0f       	add	r24, r24
    5364:	99 1f       	adc	r25, r25
    5366:	88 0f       	add	r24, r24
    5368:	99 1f       	adc	r25, r25
    536a:	88 0f       	add	r24, r24
    536c:	99 1f       	adc	r25, r25
    536e:	82 0f       	add	r24, r18
    5370:	93 1f       	adc	r25, r19
    5372:	ac 01       	movw	r20, r24
    5374:	46 55       	subi	r20, 0x56	; 86
    5376:	59 4f       	sbci	r21, 0xF9	; 249
    5378:	8b 81       	ldd	r24, Y+3	; 0x03
    537a:	9c 81       	ldd	r25, Y+4	; 0x04
    537c:	9c 01       	movw	r18, r24
    537e:	2e 5f       	subi	r18, 0xFE	; 254
    5380:	3f 4f       	sbci	r19, 0xFF	; 255
    5382:	ca 01       	movw	r24, r20
    5384:	b9 01       	movw	r22, r18
    5386:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    538a:	eb 81       	ldd	r30, Y+3	; 0x03
    538c:	fc 81       	ldd	r31, Y+4	; 0x04
    538e:	96 89       	ldd	r25, Z+22	; 0x16
    5390:	e0 91 99 06 	lds	r30, 0x0699
    5394:	f0 91 9a 06 	lds	r31, 0x069A
    5398:	86 89       	ldd	r24, Z+22	; 0x16
    539a:	98 17       	cp	r25, r24
    539c:	18 f0       	brcs	.+6      	; 0x53a4 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	80 93 a2 06 	sts	0x06A2, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    53a4:	80 91 e4 06 	lds	r24, 0x06E4
    53a8:	88 23       	and	r24, r24
    53aa:	09 f0       	breq	.+2      	; 0x53ae <xTaskResumeAll+0xcc>
    53ac:	b6 cf       	rjmp	.-148    	; 0x531a <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    53ae:	8b 81       	ldd	r24, Y+3	; 0x03
    53b0:	9c 81       	ldd	r25, Y+4	; 0x04
    53b2:	00 97       	sbiw	r24, 0x00	; 0
    53b4:	11 f0       	breq	.+4      	; 0x53ba <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    53b6:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    53ba:	80 91 a1 06 	lds	r24, 0x06A1
    53be:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    53c0:	89 81       	ldd	r24, Y+1	; 0x01
    53c2:	88 23       	and	r24, r24
    53c4:	79 f0       	breq	.+30     	; 0x53e4 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    53c6:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <xTaskIncrementTick>
    53ca:	88 23       	and	r24, r24
    53cc:	19 f0       	breq	.+6      	; 0x53d4 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    53ce:	81 e0       	ldi	r24, 0x01	; 1
    53d0:	80 93 a2 06 	sts	0x06A2, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    53d4:	89 81       	ldd	r24, Y+1	; 0x01
    53d6:	81 50       	subi	r24, 0x01	; 1
    53d8:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    53da:	89 81       	ldd	r24, Y+1	; 0x01
    53dc:	88 23       	and	r24, r24
    53de:	99 f7       	brne	.-26     	; 0x53c6 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    53e0:	10 92 a1 06 	sts	0x06A1, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    53e4:	80 91 a2 06 	lds	r24, 0x06A2
    53e8:	88 23       	and	r24, r24
    53ea:	21 f0       	breq	.+8      	; 0x53f4 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    53f0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    53f4:	0f 90       	pop	r0
    53f6:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    53fa:	0f 90       	pop	r0
    53fc:	0f 90       	pop	r0
    53fe:	0f 90       	pop	r0
    5400:	0f 90       	pop	r0
    5402:	cf 91       	pop	r28
    5404:	df 91       	pop	r29
    5406:	08 95       	ret

00005408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    5408:	df 93       	push	r29
    540a:	cf 93       	push	r28
    540c:	00 d0       	rcall	.+0      	; 0x540e <xTaskGetTickCount+0x6>
    540e:	cd b7       	in	r28, 0x3d	; 61
    5410:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	f8 94       	cli
    5416:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    5418:	80 91 9d 06 	lds	r24, 0x069D
    541c:	90 91 9e 06 	lds	r25, 0x069E
    5420:	9a 83       	std	Y+2, r25	; 0x02
    5422:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    5424:	0f 90       	pop	r0
    5426:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    5428:	89 81       	ldd	r24, Y+1	; 0x01
    542a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    542c:	0f 90       	pop	r0
    542e:	0f 90       	pop	r0
    5430:	cf 91       	pop	r28
    5432:	df 91       	pop	r29
    5434:	08 95       	ret

00005436 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    5436:	df 93       	push	r29
    5438:	cf 93       	push	r28
    543a:	00 d0       	rcall	.+0      	; 0x543c <xTaskGetTickCountFromISR+0x6>
    543c:	0f 92       	push	r0
    543e:	cd b7       	in	r28, 0x3d	; 61
    5440:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    5442:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    5444:	80 91 9d 06 	lds	r24, 0x069D
    5448:	90 91 9e 06 	lds	r25, 0x069E
    544c:	9b 83       	std	Y+3, r25	; 0x03
    544e:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5450:	8a 81       	ldd	r24, Y+2	; 0x02
    5452:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5454:	0f 90       	pop	r0
    5456:	0f 90       	pop	r0
    5458:	0f 90       	pop	r0
    545a:	cf 91       	pop	r28
    545c:	df 91       	pop	r29
    545e:	08 95       	ret

00005460 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    5460:	df 93       	push	r29
    5462:	cf 93       	push	r28
    5464:	cd b7       	in	r28, 0x3d	; 61
    5466:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    5468:	80 91 9c 06 	lds	r24, 0x069C
}
    546c:	cf 91       	pop	r28
    546e:	df 91       	pop	r29
    5470:	08 95       	ret

00005472 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    5472:	df 93       	push	r29
    5474:	cf 93       	push	r28
    5476:	00 d0       	rcall	.+0      	; 0x5478 <pcTaskGetName+0x6>
    5478:	00 d0       	rcall	.+0      	; 0x547a <pcTaskGetName+0x8>
    547a:	00 d0       	rcall	.+0      	; 0x547c <pcTaskGetName+0xa>
    547c:	cd b7       	in	r28, 0x3d	; 61
    547e:	de b7       	in	r29, 0x3e	; 62
    5480:	9c 83       	std	Y+4, r25	; 0x04
    5482:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    5484:	8b 81       	ldd	r24, Y+3	; 0x03
    5486:	9c 81       	ldd	r25, Y+4	; 0x04
    5488:	00 97       	sbiw	r24, 0x00	; 0
    548a:	39 f4       	brne	.+14     	; 0x549a <pcTaskGetName+0x28>
    548c:	80 91 99 06 	lds	r24, 0x0699
    5490:	90 91 9a 06 	lds	r25, 0x069A
    5494:	9e 83       	std	Y+6, r25	; 0x06
    5496:	8d 83       	std	Y+5, r24	; 0x05
    5498:	04 c0       	rjmp	.+8      	; 0x54a2 <pcTaskGetName+0x30>
    549a:	8b 81       	ldd	r24, Y+3	; 0x03
    549c:	9c 81       	ldd	r25, Y+4	; 0x04
    549e:	9e 83       	std	Y+6, r25	; 0x06
    54a0:	8d 83       	std	Y+5, r24	; 0x05
    54a2:	8d 81       	ldd	r24, Y+5	; 0x05
    54a4:	9e 81       	ldd	r25, Y+6	; 0x06
    54a6:	9a 83       	std	Y+2, r25	; 0x02
    54a8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    54aa:	89 81       	ldd	r24, Y+1	; 0x01
    54ac:	9a 81       	ldd	r25, Y+2	; 0x02
    54ae:	49 96       	adiw	r24, 0x19	; 25
}
    54b0:	26 96       	adiw	r28, 0x06	; 6
    54b2:	0f b6       	in	r0, 0x3f	; 63
    54b4:	f8 94       	cli
    54b6:	de bf       	out	0x3e, r29	; 62
    54b8:	0f be       	out	0x3f, r0	; 63
    54ba:	cd bf       	out	0x3d, r28	; 61
    54bc:	cf 91       	pop	r28
    54be:	df 91       	pop	r29
    54c0:	08 95       	ret

000054c2 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    54c2:	df 93       	push	r29
    54c4:	cf 93       	push	r28
    54c6:	cd b7       	in	r28, 0x3d	; 61
    54c8:	de b7       	in	r29, 0x3e	; 62
    54ca:	29 97       	sbiw	r28, 0x09	; 9
    54cc:	0f b6       	in	r0, 0x3f	; 63
    54ce:	f8 94       	cli
    54d0:	de bf       	out	0x3e, r29	; 62
    54d2:	0f be       	out	0x3f, r0	; 63
    54d4:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    54d6:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    54d8:	80 91 a9 06 	lds	r24, 0x06A9
    54dc:	88 23       	and	r24, r24
    54de:	09 f0       	breq	.+2      	; 0x54e2 <xTaskIncrementTick+0x20>
    54e0:	c0 c0       	rjmp	.+384    	; 0x5662 <xTaskIncrementTick+0x1a0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    54e2:	80 91 9d 06 	lds	r24, 0x069D
    54e6:	90 91 9e 06 	lds	r25, 0x069E
    54ea:	01 96       	adiw	r24, 0x01	; 1
    54ec:	9c 83       	std	Y+4, r25	; 0x04
    54ee:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    54f0:	8b 81       	ldd	r24, Y+3	; 0x03
    54f2:	9c 81       	ldd	r25, Y+4	; 0x04
    54f4:	90 93 9e 06 	sts	0x069E, r25
    54f8:	80 93 9d 06 	sts	0x069D, r24

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    54fc:	8b 81       	ldd	r24, Y+3	; 0x03
    54fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	d9 f4       	brne	.+54     	; 0x553a <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    5504:	80 91 e0 06 	lds	r24, 0x06E0
    5508:	90 91 e1 06 	lds	r25, 0x06E1
    550c:	9a 83       	std	Y+2, r25	; 0x02
    550e:	89 83       	std	Y+1, r24	; 0x01
    5510:	80 91 e2 06 	lds	r24, 0x06E2
    5514:	90 91 e3 06 	lds	r25, 0x06E3
    5518:	90 93 e1 06 	sts	0x06E1, r25
    551c:	80 93 e0 06 	sts	0x06E0, r24
    5520:	89 81       	ldd	r24, Y+1	; 0x01
    5522:	9a 81       	ldd	r25, Y+2	; 0x02
    5524:	90 93 e3 06 	sts	0x06E3, r25
    5528:	80 93 e2 06 	sts	0x06E2, r24
    552c:	80 91 a3 06 	lds	r24, 0x06A3
    5530:	8f 5f       	subi	r24, 0xFF	; 255
    5532:	80 93 a3 06 	sts	0x06A3, r24
    5536:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    553a:	20 91 a5 06 	lds	r18, 0x06A5
    553e:	30 91 a6 06 	lds	r19, 0x06A6
    5542:	8b 81       	ldd	r24, Y+3	; 0x03
    5544:	9c 81       	ldd	r25, Y+4	; 0x04
    5546:	82 17       	cp	r24, r18
    5548:	93 07       	cpc	r25, r19
    554a:	08 f4       	brcc	.+2      	; 0x554e <xTaskIncrementTick+0x8c>
    554c:	71 c0       	rjmp	.+226    	; 0x5630 <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    554e:	e0 91 e0 06 	lds	r30, 0x06E0
    5552:	f0 91 e1 06 	lds	r31, 0x06E1
    5556:	80 81       	ld	r24, Z
    5558:	88 23       	and	r24, r24
    555a:	39 f4       	brne	.+14     	; 0x556a <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    555c:	8f ef       	ldi	r24, 0xFF	; 255
    555e:	9f ef       	ldi	r25, 0xFF	; 255
    5560:	90 93 a6 06 	sts	0x06A6, r25
    5564:	80 93 a5 06 	sts	0x06A5, r24
    5568:	63 c0       	rjmp	.+198    	; 0x5630 <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    556a:	e0 91 e0 06 	lds	r30, 0x06E0
    556e:	f0 91 e1 06 	lds	r31, 0x06E1
    5572:	05 80       	ldd	r0, Z+5	; 0x05
    5574:	f6 81       	ldd	r31, Z+6	; 0x06
    5576:	e0 2d       	mov	r30, r0
    5578:	86 81       	ldd	r24, Z+6	; 0x06
    557a:	97 81       	ldd	r25, Z+7	; 0x07
    557c:	99 87       	std	Y+9, r25	; 0x09
    557e:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    5580:	e8 85       	ldd	r30, Y+8	; 0x08
    5582:	f9 85       	ldd	r31, Y+9	; 0x09
    5584:	82 81       	ldd	r24, Z+2	; 0x02
    5586:	93 81       	ldd	r25, Z+3	; 0x03
    5588:	9f 83       	std	Y+7, r25	; 0x07
    558a:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    558c:	2b 81       	ldd	r18, Y+3	; 0x03
    558e:	3c 81       	ldd	r19, Y+4	; 0x04
    5590:	8e 81       	ldd	r24, Y+6	; 0x06
    5592:	9f 81       	ldd	r25, Y+7	; 0x07
    5594:	28 17       	cp	r18, r24
    5596:	39 07       	cpc	r19, r25
    5598:	38 f4       	brcc	.+14     	; 0x55a8 <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    559a:	8e 81       	ldd	r24, Y+6	; 0x06
    559c:	9f 81       	ldd	r25, Y+7	; 0x07
    559e:	90 93 a6 06 	sts	0x06A6, r25
    55a2:	80 93 a5 06 	sts	0x06A5, r24
    55a6:	44 c0       	rjmp	.+136    	; 0x5630 <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    55a8:	88 85       	ldd	r24, Y+8	; 0x08
    55aa:	99 85       	ldd	r25, Y+9	; 0x09
    55ac:	02 96       	adiw	r24, 0x02	; 2
    55ae:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    55b2:	e8 85       	ldd	r30, Y+8	; 0x08
    55b4:	f9 85       	ldd	r31, Y+9	; 0x09
    55b6:	84 89       	ldd	r24, Z+20	; 0x14
    55b8:	95 89       	ldd	r25, Z+21	; 0x15
    55ba:	00 97       	sbiw	r24, 0x00	; 0
    55bc:	29 f0       	breq	.+10     	; 0x55c8 <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    55be:	88 85       	ldd	r24, Y+8	; 0x08
    55c0:	99 85       	ldd	r25, Y+9	; 0x09
    55c2:	0c 96       	adiw	r24, 0x0c	; 12
    55c4:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    55c8:	e8 85       	ldd	r30, Y+8	; 0x08
    55ca:	f9 85       	ldd	r31, Y+9	; 0x09
    55cc:	96 89       	ldd	r25, Z+22	; 0x16
    55ce:	80 91 9f 06 	lds	r24, 0x069F
    55d2:	89 17       	cp	r24, r25
    55d4:	28 f4       	brcc	.+10     	; 0x55e0 <xTaskIncrementTick+0x11e>
    55d6:	e8 85       	ldd	r30, Y+8	; 0x08
    55d8:	f9 85       	ldd	r31, Y+9	; 0x09
    55da:	86 89       	ldd	r24, Z+22	; 0x16
    55dc:	80 93 9f 06 	sts	0x069F, r24
    55e0:	e8 85       	ldd	r30, Y+8	; 0x08
    55e2:	f9 85       	ldd	r31, Y+9	; 0x09
    55e4:	86 89       	ldd	r24, Z+22	; 0x16
    55e6:	28 2f       	mov	r18, r24
    55e8:	30 e0       	ldi	r19, 0x00	; 0
    55ea:	c9 01       	movw	r24, r18
    55ec:	88 0f       	add	r24, r24
    55ee:	99 1f       	adc	r25, r25
    55f0:	88 0f       	add	r24, r24
    55f2:	99 1f       	adc	r25, r25
    55f4:	88 0f       	add	r24, r24
    55f6:	99 1f       	adc	r25, r25
    55f8:	82 0f       	add	r24, r18
    55fa:	93 1f       	adc	r25, r19
    55fc:	ac 01       	movw	r20, r24
    55fe:	46 55       	subi	r20, 0x56	; 86
    5600:	59 4f       	sbci	r21, 0xF9	; 249
    5602:	88 85       	ldd	r24, Y+8	; 0x08
    5604:	99 85       	ldd	r25, Y+9	; 0x09
    5606:	9c 01       	movw	r18, r24
    5608:	2e 5f       	subi	r18, 0xFE	; 254
    560a:	3f 4f       	sbci	r19, 0xFF	; 255
    560c:	ca 01       	movw	r24, r20
    560e:	b9 01       	movw	r22, r18
    5610:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5614:	e8 85       	ldd	r30, Y+8	; 0x08
    5616:	f9 85       	ldd	r31, Y+9	; 0x09
    5618:	96 89       	ldd	r25, Z+22	; 0x16
    561a:	e0 91 99 06 	lds	r30, 0x0699
    561e:	f0 91 9a 06 	lds	r31, 0x069A
    5622:	86 89       	ldd	r24, Z+22	; 0x16
    5624:	98 17       	cp	r25, r24
    5626:	08 f4       	brcc	.+2      	; 0x562a <xTaskIncrementTick+0x168>
    5628:	92 cf       	rjmp	.-220    	; 0x554e <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	8d 83       	std	Y+5, r24	; 0x05
    562e:	8f cf       	rjmp	.-226    	; 0x554e <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    5630:	e0 91 99 06 	lds	r30, 0x0699
    5634:	f0 91 9a 06 	lds	r31, 0x069A
    5638:	86 89       	ldd	r24, Z+22	; 0x16
    563a:	28 2f       	mov	r18, r24
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	c9 01       	movw	r24, r18
    5640:	88 0f       	add	r24, r24
    5642:	99 1f       	adc	r25, r25
    5644:	88 0f       	add	r24, r24
    5646:	99 1f       	adc	r25, r25
    5648:	88 0f       	add	r24, r24
    564a:	99 1f       	adc	r25, r25
    564c:	82 0f       	add	r24, r18
    564e:	93 1f       	adc	r25, r19
    5650:	fc 01       	movw	r30, r24
    5652:	e6 55       	subi	r30, 0x56	; 86
    5654:	f9 4f       	sbci	r31, 0xF9	; 249
    5656:	80 81       	ld	r24, Z
    5658:	82 30       	cpi	r24, 0x02	; 2
    565a:	40 f0       	brcs	.+16     	; 0x566c <xTaskIncrementTick+0x1aa>
			{
				xSwitchRequired = pdTRUE;
    565c:	81 e0       	ldi	r24, 0x01	; 1
    565e:	8d 83       	std	Y+5, r24	; 0x05
    5660:	05 c0       	rjmp	.+10     	; 0x566c <xTaskIncrementTick+0x1aa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    5662:	80 91 a1 06 	lds	r24, 0x06A1
    5666:	8f 5f       	subi	r24, 0xFF	; 255
    5668:	80 93 a1 06 	sts	0x06A1, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    566c:	80 91 a2 06 	lds	r24, 0x06A2
    5670:	88 23       	and	r24, r24
    5672:	11 f0       	breq	.+4      	; 0x5678 <xTaskIncrementTick+0x1b6>
		{
			xSwitchRequired = pdTRUE;
    5674:	81 e0       	ldi	r24, 0x01	; 1
    5676:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    5678:	8d 81       	ldd	r24, Y+5	; 0x05
}
    567a:	29 96       	adiw	r28, 0x09	; 9
    567c:	0f b6       	in	r0, 0x3f	; 63
    567e:	f8 94       	cli
    5680:	de bf       	out	0x3e, r29	; 62
    5682:	0f be       	out	0x3f, r0	; 63
    5684:	cd bf       	out	0x3d, r28	; 61
    5686:	cf 91       	pop	r28
    5688:	df 91       	pop	r29
    568a:	08 95       	ret

0000568c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    568c:	df 93       	push	r29
    568e:	cf 93       	push	r28
    5690:	00 d0       	rcall	.+0      	; 0x5692 <vTaskSwitchContext+0x6>
    5692:	0f 92       	push	r0
    5694:	cd b7       	in	r28, 0x3d	; 61
    5696:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    5698:	80 91 a9 06 	lds	r24, 0x06A9
    569c:	88 23       	and	r24, r24
    569e:	21 f0       	breq	.+8      	; 0x56a8 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	80 93 a2 06 	sts	0x06A2, r24
    56a6:	59 c0       	rjmp	.+178    	; 0x575a <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    56a8:	10 92 a2 06 	sts	0x06A2, r1
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    56ac:	80 91 9f 06 	lds	r24, 0x069F
    56b0:	8b 83       	std	Y+3, r24	; 0x03
    56b2:	03 c0       	rjmp	.+6      	; 0x56ba <vTaskSwitchContext+0x2e>
    56b4:	8b 81       	ldd	r24, Y+3	; 0x03
    56b6:	81 50       	subi	r24, 0x01	; 1
    56b8:	8b 83       	std	Y+3, r24	; 0x03
    56ba:	8b 81       	ldd	r24, Y+3	; 0x03
    56bc:	28 2f       	mov	r18, r24
    56be:	30 e0       	ldi	r19, 0x00	; 0
    56c0:	c9 01       	movw	r24, r18
    56c2:	88 0f       	add	r24, r24
    56c4:	99 1f       	adc	r25, r25
    56c6:	88 0f       	add	r24, r24
    56c8:	99 1f       	adc	r25, r25
    56ca:	88 0f       	add	r24, r24
    56cc:	99 1f       	adc	r25, r25
    56ce:	82 0f       	add	r24, r18
    56d0:	93 1f       	adc	r25, r19
    56d2:	fc 01       	movw	r30, r24
    56d4:	e6 55       	subi	r30, 0x56	; 86
    56d6:	f9 4f       	sbci	r31, 0xF9	; 249
    56d8:	80 81       	ld	r24, Z
    56da:	88 23       	and	r24, r24
    56dc:	59 f3       	breq	.-42     	; 0x56b4 <vTaskSwitchContext+0x28>
    56de:	8b 81       	ldd	r24, Y+3	; 0x03
    56e0:	28 2f       	mov	r18, r24
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	c9 01       	movw	r24, r18
    56e6:	88 0f       	add	r24, r24
    56e8:	99 1f       	adc	r25, r25
    56ea:	88 0f       	add	r24, r24
    56ec:	99 1f       	adc	r25, r25
    56ee:	88 0f       	add	r24, r24
    56f0:	99 1f       	adc	r25, r25
    56f2:	82 0f       	add	r24, r18
    56f4:	93 1f       	adc	r25, r19
    56f6:	86 55       	subi	r24, 0x56	; 86
    56f8:	99 4f       	sbci	r25, 0xF9	; 249
    56fa:	9a 83       	std	Y+2, r25	; 0x02
    56fc:	89 83       	std	Y+1, r24	; 0x01
    56fe:	e9 81       	ldd	r30, Y+1	; 0x01
    5700:	fa 81       	ldd	r31, Y+2	; 0x02
    5702:	01 80       	ldd	r0, Z+1	; 0x01
    5704:	f2 81       	ldd	r31, Z+2	; 0x02
    5706:	e0 2d       	mov	r30, r0
    5708:	82 81       	ldd	r24, Z+2	; 0x02
    570a:	93 81       	ldd	r25, Z+3	; 0x03
    570c:	e9 81       	ldd	r30, Y+1	; 0x01
    570e:	fa 81       	ldd	r31, Y+2	; 0x02
    5710:	92 83       	std	Z+2, r25	; 0x02
    5712:	81 83       	std	Z+1, r24	; 0x01
    5714:	e9 81       	ldd	r30, Y+1	; 0x01
    5716:	fa 81       	ldd	r31, Y+2	; 0x02
    5718:	21 81       	ldd	r18, Z+1	; 0x01
    571a:	32 81       	ldd	r19, Z+2	; 0x02
    571c:	89 81       	ldd	r24, Y+1	; 0x01
    571e:	9a 81       	ldd	r25, Y+2	; 0x02
    5720:	03 96       	adiw	r24, 0x03	; 3
    5722:	28 17       	cp	r18, r24
    5724:	39 07       	cpc	r19, r25
    5726:	59 f4       	brne	.+22     	; 0x573e <vTaskSwitchContext+0xb2>
    5728:	e9 81       	ldd	r30, Y+1	; 0x01
    572a:	fa 81       	ldd	r31, Y+2	; 0x02
    572c:	01 80       	ldd	r0, Z+1	; 0x01
    572e:	f2 81       	ldd	r31, Z+2	; 0x02
    5730:	e0 2d       	mov	r30, r0
    5732:	82 81       	ldd	r24, Z+2	; 0x02
    5734:	93 81       	ldd	r25, Z+3	; 0x03
    5736:	e9 81       	ldd	r30, Y+1	; 0x01
    5738:	fa 81       	ldd	r31, Y+2	; 0x02
    573a:	92 83       	std	Z+2, r25	; 0x02
    573c:	81 83       	std	Z+1, r24	; 0x01
    573e:	e9 81       	ldd	r30, Y+1	; 0x01
    5740:	fa 81       	ldd	r31, Y+2	; 0x02
    5742:	01 80       	ldd	r0, Z+1	; 0x01
    5744:	f2 81       	ldd	r31, Z+2	; 0x02
    5746:	e0 2d       	mov	r30, r0
    5748:	86 81       	ldd	r24, Z+6	; 0x06
    574a:	97 81       	ldd	r25, Z+7	; 0x07
    574c:	90 93 9a 06 	sts	0x069A, r25
    5750:	80 93 99 06 	sts	0x0699, r24
    5754:	8b 81       	ldd	r24, Y+3	; 0x03
    5756:	80 93 9f 06 	sts	0x069F, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    575a:	0f 90       	pop	r0
    575c:	0f 90       	pop	r0
    575e:	0f 90       	pop	r0
    5760:	cf 91       	pop	r28
    5762:	df 91       	pop	r29
    5764:	08 95       	ret

00005766 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    5766:	df 93       	push	r29
    5768:	cf 93       	push	r28
    576a:	00 d0       	rcall	.+0      	; 0x576c <vTaskPlaceOnEventList+0x6>
    576c:	00 d0       	rcall	.+0      	; 0x576e <vTaskPlaceOnEventList+0x8>
    576e:	cd b7       	in	r28, 0x3d	; 61
    5770:	de b7       	in	r29, 0x3e	; 62
    5772:	9a 83       	std	Y+2, r25	; 0x02
    5774:	89 83       	std	Y+1, r24	; 0x01
    5776:	7c 83       	std	Y+4, r23	; 0x04
    5778:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    577a:	80 91 99 06 	lds	r24, 0x0699
    577e:	90 91 9a 06 	lds	r25, 0x069A
    5782:	9c 01       	movw	r18, r24
    5784:	24 5f       	subi	r18, 0xF4	; 244
    5786:	3f 4f       	sbci	r19, 0xFF	; 255
    5788:	89 81       	ldd	r24, Y+1	; 0x01
    578a:	9a 81       	ldd	r25, Y+2	; 0x02
    578c:	b9 01       	movw	r22, r18
    578e:	0e 94 a7 11 	call	0x234e	; 0x234e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5792:	8b 81       	ldd	r24, Y+3	; 0x03
    5794:	9c 81       	ldd	r25, Y+4	; 0x04
    5796:	61 e0       	ldi	r22, 0x01	; 1
    5798:	0e 94 17 32 	call	0x642e	; 0x642e <prvAddCurrentTaskToDelayedList>
}
    579c:	0f 90       	pop	r0
    579e:	0f 90       	pop	r0
    57a0:	0f 90       	pop	r0
    57a2:	0f 90       	pop	r0
    57a4:	cf 91       	pop	r28
    57a6:	df 91       	pop	r29
    57a8:	08 95       	ret

000057aa <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    57aa:	df 93       	push	r29
    57ac:	cf 93       	push	r28
    57ae:	00 d0       	rcall	.+0      	; 0x57b0 <vTaskPlaceOnUnorderedEventList+0x6>
    57b0:	00 d0       	rcall	.+0      	; 0x57b2 <vTaskPlaceOnUnorderedEventList+0x8>
    57b2:	00 d0       	rcall	.+0      	; 0x57b4 <vTaskPlaceOnUnorderedEventList+0xa>
    57b4:	cd b7       	in	r28, 0x3d	; 61
    57b6:	de b7       	in	r29, 0x3e	; 62
    57b8:	9a 83       	std	Y+2, r25	; 0x02
    57ba:	89 83       	std	Y+1, r24	; 0x01
    57bc:	7c 83       	std	Y+4, r23	; 0x04
    57be:	6b 83       	std	Y+3, r22	; 0x03
    57c0:	5e 83       	std	Y+6, r21	; 0x06
    57c2:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    57c4:	e0 91 99 06 	lds	r30, 0x0699
    57c8:	f0 91 9a 06 	lds	r31, 0x069A
    57cc:	8b 81       	ldd	r24, Y+3	; 0x03
    57ce:	9c 81       	ldd	r25, Y+4	; 0x04
    57d0:	90 68       	ori	r25, 0x80	; 128
    57d2:	95 87       	std	Z+13, r25	; 0x0d
    57d4:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    57d6:	80 91 99 06 	lds	r24, 0x0699
    57da:	90 91 9a 06 	lds	r25, 0x069A
    57de:	9c 01       	movw	r18, r24
    57e0:	24 5f       	subi	r18, 0xF4	; 244
    57e2:	3f 4f       	sbci	r19, 0xFF	; 255
    57e4:	89 81       	ldd	r24, Y+1	; 0x01
    57e6:	9a 81       	ldd	r25, Y+2	; 0x02
    57e8:	b9 01       	movw	r22, r18
    57ea:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    57ee:	8d 81       	ldd	r24, Y+5	; 0x05
    57f0:	9e 81       	ldd	r25, Y+6	; 0x06
    57f2:	61 e0       	ldi	r22, 0x01	; 1
    57f4:	0e 94 17 32 	call	0x642e	; 0x642e <prvAddCurrentTaskToDelayedList>
}
    57f8:	26 96       	adiw	r28, 0x06	; 6
    57fa:	0f b6       	in	r0, 0x3f	; 63
    57fc:	f8 94       	cli
    57fe:	de bf       	out	0x3e, r29	; 62
    5800:	0f be       	out	0x3f, r0	; 63
    5802:	cd bf       	out	0x3d, r28	; 61
    5804:	cf 91       	pop	r28
    5806:	df 91       	pop	r29
    5808:	08 95       	ret

0000580a <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    580a:	df 93       	push	r29
    580c:	cf 93       	push	r28
    580e:	00 d0       	rcall	.+0      	; 0x5810 <xTaskRemoveFromEventList+0x6>
    5810:	00 d0       	rcall	.+0      	; 0x5812 <xTaskRemoveFromEventList+0x8>
    5812:	0f 92       	push	r0
    5814:	cd b7       	in	r28, 0x3d	; 61
    5816:	de b7       	in	r29, 0x3e	; 62
    5818:	9d 83       	std	Y+5, r25	; 0x05
    581a:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    581c:	ec 81       	ldd	r30, Y+4	; 0x04
    581e:	fd 81       	ldd	r31, Y+5	; 0x05
    5820:	05 80       	ldd	r0, Z+5	; 0x05
    5822:	f6 81       	ldd	r31, Z+6	; 0x06
    5824:	e0 2d       	mov	r30, r0
    5826:	86 81       	ldd	r24, Z+6	; 0x06
    5828:	97 81       	ldd	r25, Z+7	; 0x07
    582a:	9b 83       	std	Y+3, r25	; 0x03
    582c:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    582e:	8a 81       	ldd	r24, Y+2	; 0x02
    5830:	9b 81       	ldd	r25, Y+3	; 0x03
    5832:	0c 96       	adiw	r24, 0x0c	; 12
    5834:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5838:	80 91 a9 06 	lds	r24, 0x06A9
    583c:	88 23       	and	r24, r24
    583e:	61 f5       	brne	.+88     	; 0x5898 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5840:	8a 81       	ldd	r24, Y+2	; 0x02
    5842:	9b 81       	ldd	r25, Y+3	; 0x03
    5844:	02 96       	adiw	r24, 0x02	; 2
    5846:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    584a:	ea 81       	ldd	r30, Y+2	; 0x02
    584c:	fb 81       	ldd	r31, Y+3	; 0x03
    584e:	96 89       	ldd	r25, Z+22	; 0x16
    5850:	80 91 9f 06 	lds	r24, 0x069F
    5854:	89 17       	cp	r24, r25
    5856:	28 f4       	brcc	.+10     	; 0x5862 <xTaskRemoveFromEventList+0x58>
    5858:	ea 81       	ldd	r30, Y+2	; 0x02
    585a:	fb 81       	ldd	r31, Y+3	; 0x03
    585c:	86 89       	ldd	r24, Z+22	; 0x16
    585e:	80 93 9f 06 	sts	0x069F, r24
    5862:	ea 81       	ldd	r30, Y+2	; 0x02
    5864:	fb 81       	ldd	r31, Y+3	; 0x03
    5866:	86 89       	ldd	r24, Z+22	; 0x16
    5868:	28 2f       	mov	r18, r24
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	c9 01       	movw	r24, r18
    586e:	88 0f       	add	r24, r24
    5870:	99 1f       	adc	r25, r25
    5872:	88 0f       	add	r24, r24
    5874:	99 1f       	adc	r25, r25
    5876:	88 0f       	add	r24, r24
    5878:	99 1f       	adc	r25, r25
    587a:	82 0f       	add	r24, r18
    587c:	93 1f       	adc	r25, r19
    587e:	ac 01       	movw	r20, r24
    5880:	46 55       	subi	r20, 0x56	; 86
    5882:	59 4f       	sbci	r21, 0xF9	; 249
    5884:	8a 81       	ldd	r24, Y+2	; 0x02
    5886:	9b 81       	ldd	r25, Y+3	; 0x03
    5888:	9c 01       	movw	r18, r24
    588a:	2e 5f       	subi	r18, 0xFE	; 254
    588c:	3f 4f       	sbci	r19, 0xFF	; 255
    588e:	ca 01       	movw	r24, r20
    5890:	b9 01       	movw	r22, r18
    5892:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
    5896:	0a c0       	rjmp	.+20     	; 0x58ac <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5898:	8a 81       	ldd	r24, Y+2	; 0x02
    589a:	9b 81       	ldd	r25, Y+3	; 0x03
    589c:	9c 01       	movw	r18, r24
    589e:	24 5f       	subi	r18, 0xF4	; 244
    58a0:	3f 4f       	sbci	r19, 0xFF	; 255
    58a2:	84 ee       	ldi	r24, 0xE4	; 228
    58a4:	96 e0       	ldi	r25, 0x06	; 6
    58a6:	b9 01       	movw	r22, r18
    58a8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    58ac:	ea 81       	ldd	r30, Y+2	; 0x02
    58ae:	fb 81       	ldd	r31, Y+3	; 0x03
    58b0:	96 89       	ldd	r25, Z+22	; 0x16
    58b2:	e0 91 99 06 	lds	r30, 0x0699
    58b6:	f0 91 9a 06 	lds	r31, 0x069A
    58ba:	86 89       	ldd	r24, Z+22	; 0x16
    58bc:	89 17       	cp	r24, r25
    58be:	30 f4       	brcc	.+12     	; 0x58cc <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	80 93 a2 06 	sts	0x06A2, r24
    58ca:	01 c0       	rjmp	.+2      	; 0x58ce <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    58cc:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    58ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    58d0:	0f 90       	pop	r0
    58d2:	0f 90       	pop	r0
    58d4:	0f 90       	pop	r0
    58d6:	0f 90       	pop	r0
    58d8:	0f 90       	pop	r0
    58da:	cf 91       	pop	r28
    58dc:	df 91       	pop	r29
    58de:	08 95       	ret

000058e0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    58e0:	df 93       	push	r29
    58e2:	cf 93       	push	r28
    58e4:	00 d0       	rcall	.+0      	; 0x58e6 <vTaskRemoveFromUnorderedEventList+0x6>
    58e6:	00 d0       	rcall	.+0      	; 0x58e8 <vTaskRemoveFromUnorderedEventList+0x8>
    58e8:	00 d0       	rcall	.+0      	; 0x58ea <vTaskRemoveFromUnorderedEventList+0xa>
    58ea:	cd b7       	in	r28, 0x3d	; 61
    58ec:	de b7       	in	r29, 0x3e	; 62
    58ee:	9c 83       	std	Y+4, r25	; 0x04
    58f0:	8b 83       	std	Y+3, r24	; 0x03
    58f2:	7e 83       	std	Y+6, r23	; 0x06
    58f4:	6d 83       	std	Y+5, r22	; 0x05
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    58f6:	8d 81       	ldd	r24, Y+5	; 0x05
    58f8:	9e 81       	ldd	r25, Y+6	; 0x06
    58fa:	90 68       	ori	r25, 0x80	; 128
    58fc:	eb 81       	ldd	r30, Y+3	; 0x03
    58fe:	fc 81       	ldd	r31, Y+4	; 0x04
    5900:	91 83       	std	Z+1, r25	; 0x01
    5902:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5904:	eb 81       	ldd	r30, Y+3	; 0x03
    5906:	fc 81       	ldd	r31, Y+4	; 0x04
    5908:	86 81       	ldd	r24, Z+6	; 0x06
    590a:	97 81       	ldd	r25, Z+7	; 0x07
    590c:	9a 83       	std	Y+2, r25	; 0x02
    590e:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    5910:	8b 81       	ldd	r24, Y+3	; 0x03
    5912:	9c 81       	ldd	r25, Y+4	; 0x04
    5914:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5918:	89 81       	ldd	r24, Y+1	; 0x01
    591a:	9a 81       	ldd	r25, Y+2	; 0x02
    591c:	02 96       	adiw	r24, 0x02	; 2
    591e:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    5922:	e9 81       	ldd	r30, Y+1	; 0x01
    5924:	fa 81       	ldd	r31, Y+2	; 0x02
    5926:	96 89       	ldd	r25, Z+22	; 0x16
    5928:	80 91 9f 06 	lds	r24, 0x069F
    592c:	89 17       	cp	r24, r25
    592e:	28 f4       	brcc	.+10     	; 0x593a <vTaskRemoveFromUnorderedEventList+0x5a>
    5930:	e9 81       	ldd	r30, Y+1	; 0x01
    5932:	fa 81       	ldd	r31, Y+2	; 0x02
    5934:	86 89       	ldd	r24, Z+22	; 0x16
    5936:	80 93 9f 06 	sts	0x069F, r24
    593a:	e9 81       	ldd	r30, Y+1	; 0x01
    593c:	fa 81       	ldd	r31, Y+2	; 0x02
    593e:	86 89       	ldd	r24, Z+22	; 0x16
    5940:	28 2f       	mov	r18, r24
    5942:	30 e0       	ldi	r19, 0x00	; 0
    5944:	c9 01       	movw	r24, r18
    5946:	88 0f       	add	r24, r24
    5948:	99 1f       	adc	r25, r25
    594a:	88 0f       	add	r24, r24
    594c:	99 1f       	adc	r25, r25
    594e:	88 0f       	add	r24, r24
    5950:	99 1f       	adc	r25, r25
    5952:	82 0f       	add	r24, r18
    5954:	93 1f       	adc	r25, r19
    5956:	ac 01       	movw	r20, r24
    5958:	46 55       	subi	r20, 0x56	; 86
    595a:	59 4f       	sbci	r21, 0xF9	; 249
    595c:	89 81       	ldd	r24, Y+1	; 0x01
    595e:	9a 81       	ldd	r25, Y+2	; 0x02
    5960:	9c 01       	movw	r18, r24
    5962:	2e 5f       	subi	r18, 0xFE	; 254
    5964:	3f 4f       	sbci	r19, 0xFF	; 255
    5966:	ca 01       	movw	r24, r20
    5968:	b9 01       	movw	r22, r18
    596a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    596e:	e9 81       	ldd	r30, Y+1	; 0x01
    5970:	fa 81       	ldd	r31, Y+2	; 0x02
    5972:	96 89       	ldd	r25, Z+22	; 0x16
    5974:	e0 91 99 06 	lds	r30, 0x0699
    5978:	f0 91 9a 06 	lds	r31, 0x069A
    597c:	86 89       	ldd	r24, Z+22	; 0x16
    597e:	89 17       	cp	r24, r25
    5980:	18 f4       	brcc	.+6      	; 0x5988 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	80 93 a2 06 	sts	0x06A2, r24
	}
}
    5988:	26 96       	adiw	r28, 0x06	; 6
    598a:	0f b6       	in	r0, 0x3f	; 63
    598c:	f8 94       	cli
    598e:	de bf       	out	0x3e, r29	; 62
    5990:	0f be       	out	0x3f, r0	; 63
    5992:	cd bf       	out	0x3d, r28	; 61
    5994:	cf 91       	pop	r28
    5996:	df 91       	pop	r29
    5998:	08 95       	ret

0000599a <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    599a:	df 93       	push	r29
    599c:	cf 93       	push	r28
    599e:	00 d0       	rcall	.+0      	; 0x59a0 <vTaskSetTimeOutState+0x6>
    59a0:	cd b7       	in	r28, 0x3d	; 61
    59a2:	de b7       	in	r29, 0x3e	; 62
    59a4:	9a 83       	std	Y+2, r25	; 0x02
    59a6:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    59a8:	0f b6       	in	r0, 0x3f	; 63
    59aa:	f8 94       	cli
    59ac:	0f 92       	push	r0
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    59ae:	80 91 a3 06 	lds	r24, 0x06A3
    59b2:	e9 81       	ldd	r30, Y+1	; 0x01
    59b4:	fa 81       	ldd	r31, Y+2	; 0x02
    59b6:	80 83       	st	Z, r24
		pxTimeOut->xTimeOnEntering = xTickCount;
    59b8:	80 91 9d 06 	lds	r24, 0x069D
    59bc:	90 91 9e 06 	lds	r25, 0x069E
    59c0:	e9 81       	ldd	r30, Y+1	; 0x01
    59c2:	fa 81       	ldd	r31, Y+2	; 0x02
    59c4:	92 83       	std	Z+2, r25	; 0x02
    59c6:	81 83       	std	Z+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    59c8:	0f 90       	pop	r0
    59ca:	0f be       	out	0x3f, r0	; 63
}
    59cc:	0f 90       	pop	r0
    59ce:	0f 90       	pop	r0
    59d0:	cf 91       	pop	r28
    59d2:	df 91       	pop	r29
    59d4:	08 95       	ret

000059d6 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    59d6:	df 93       	push	r29
    59d8:	cf 93       	push	r28
    59da:	00 d0       	rcall	.+0      	; 0x59dc <vTaskInternalSetTimeOutState+0x6>
    59dc:	cd b7       	in	r28, 0x3d	; 61
    59de:	de b7       	in	r29, 0x3e	; 62
    59e0:	9a 83       	std	Y+2, r25	; 0x02
    59e2:	89 83       	std	Y+1, r24	; 0x01
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    59e4:	80 91 a3 06 	lds	r24, 0x06A3
    59e8:	e9 81       	ldd	r30, Y+1	; 0x01
    59ea:	fa 81       	ldd	r31, Y+2	; 0x02
    59ec:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    59ee:	80 91 9d 06 	lds	r24, 0x069D
    59f2:	90 91 9e 06 	lds	r25, 0x069E
    59f6:	e9 81       	ldd	r30, Y+1	; 0x01
    59f8:	fa 81       	ldd	r31, Y+2	; 0x02
    59fa:	92 83       	std	Z+2, r25	; 0x02
    59fc:	81 83       	std	Z+1, r24	; 0x01
}
    59fe:	0f 90       	pop	r0
    5a00:	0f 90       	pop	r0
    5a02:	cf 91       	pop	r28
    5a04:	df 91       	pop	r29
    5a06:	08 95       	ret

00005a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    5a08:	df 93       	push	r29
    5a0a:	cf 93       	push	r28
    5a0c:	cd b7       	in	r28, 0x3d	; 61
    5a0e:	de b7       	in	r29, 0x3e	; 62
    5a10:	29 97       	sbiw	r28, 0x09	; 9
    5a12:	0f b6       	in	r0, 0x3f	; 63
    5a14:	f8 94       	cli
    5a16:	de bf       	out	0x3e, r29	; 62
    5a18:	0f be       	out	0x3f, r0	; 63
    5a1a:	cd bf       	out	0x3d, r28	; 61
    5a1c:	9f 83       	std	Y+7, r25	; 0x07
    5a1e:	8e 83       	std	Y+6, r24	; 0x06
    5a20:	79 87       	std	Y+9, r23	; 0x09
    5a22:	68 87       	std	Y+8, r22	; 0x08
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5a24:	0f b6       	in	r0, 0x3f	; 63
    5a26:	f8 94       	cli
    5a28:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    5a2a:	80 91 9d 06 	lds	r24, 0x069D
    5a2e:	90 91 9e 06 	lds	r25, 0x069E
    5a32:	9c 83       	std	Y+4, r25	; 0x04
    5a34:	8b 83       	std	Y+3, r24	; 0x03
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5a36:	ee 81       	ldd	r30, Y+6	; 0x06
    5a38:	ff 81       	ldd	r31, Y+7	; 0x07
    5a3a:	21 81       	ldd	r18, Z+1	; 0x01
    5a3c:	32 81       	ldd	r19, Z+2	; 0x02
    5a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a40:	9c 81       	ldd	r25, Y+4	; 0x04
    5a42:	82 1b       	sub	r24, r18
    5a44:	93 0b       	sbc	r25, r19
    5a46:	9a 83       	std	Y+2, r25	; 0x02
    5a48:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    5a4a:	e8 85       	ldd	r30, Y+8	; 0x08
    5a4c:	f9 85       	ldd	r31, Y+9	; 0x09
    5a4e:	80 81       	ld	r24, Z
    5a50:	91 81       	ldd	r25, Z+1	; 0x01
    5a52:	2f ef       	ldi	r18, 0xFF	; 255
    5a54:	8f 3f       	cpi	r24, 0xFF	; 255
    5a56:	92 07       	cpc	r25, r18
    5a58:	11 f4       	brne	.+4      	; 0x5a5e <xTaskCheckForTimeOut+0x56>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    5a5a:	1d 82       	std	Y+5, r1	; 0x05
    5a5c:	36 c0       	rjmp	.+108    	; 0x5aca <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5a5e:	ee 81       	ldd	r30, Y+6	; 0x06
    5a60:	ff 81       	ldd	r31, Y+7	; 0x07
    5a62:	90 81       	ld	r25, Z
    5a64:	80 91 a3 06 	lds	r24, 0x06A3
    5a68:	98 17       	cp	r25, r24
    5a6a:	61 f0       	breq	.+24     	; 0x5a84 <xTaskCheckForTimeOut+0x7c>
    5a6c:	ee 81       	ldd	r30, Y+6	; 0x06
    5a6e:	ff 81       	ldd	r31, Y+7	; 0x07
    5a70:	21 81       	ldd	r18, Z+1	; 0x01
    5a72:	32 81       	ldd	r19, Z+2	; 0x02
    5a74:	8b 81       	ldd	r24, Y+3	; 0x03
    5a76:	9c 81       	ldd	r25, Y+4	; 0x04
    5a78:	82 17       	cp	r24, r18
    5a7a:	93 07       	cpc	r25, r19
    5a7c:	18 f0       	brcs	.+6      	; 0x5a84 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	8d 83       	std	Y+5, r24	; 0x05
    5a82:	23 c0       	rjmp	.+70     	; 0x5aca <xTaskCheckForTimeOut+0xc2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    5a84:	e8 85       	ldd	r30, Y+8	; 0x08
    5a86:	f9 85       	ldd	r31, Y+9	; 0x09
    5a88:	20 81       	ld	r18, Z
    5a8a:	31 81       	ldd	r19, Z+1	; 0x01
    5a8c:	89 81       	ldd	r24, Y+1	; 0x01
    5a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a90:	82 17       	cp	r24, r18
    5a92:	93 07       	cpc	r25, r19
    5a94:	a0 f4       	brcc	.+40     	; 0x5abe <xTaskCheckForTimeOut+0xb6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    5a96:	e8 85       	ldd	r30, Y+8	; 0x08
    5a98:	f9 85       	ldd	r31, Y+9	; 0x09
    5a9a:	20 81       	ld	r18, Z
    5a9c:	31 81       	ldd	r19, Z+1	; 0x01
    5a9e:	89 81       	ldd	r24, Y+1	; 0x01
    5aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    5aa2:	a9 01       	movw	r20, r18
    5aa4:	48 1b       	sub	r20, r24
    5aa6:	59 0b       	sbc	r21, r25
    5aa8:	ca 01       	movw	r24, r20
    5aaa:	e8 85       	ldd	r30, Y+8	; 0x08
    5aac:	f9 85       	ldd	r31, Y+9	; 0x09
    5aae:	91 83       	std	Z+1, r25	; 0x01
    5ab0:	80 83       	st	Z, r24
			vTaskInternalSetTimeOutState( pxTimeOut );
    5ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    5ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    5ab6:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    5aba:	1d 82       	std	Y+5, r1	; 0x05
    5abc:	06 c0       	rjmp	.+12     	; 0x5aca <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			*pxTicksToWait = 0;
    5abe:	e8 85       	ldd	r30, Y+8	; 0x08
    5ac0:	f9 85       	ldd	r31, Y+9	; 0x09
    5ac2:	11 82       	std	Z+1, r1	; 0x01
    5ac4:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    5ac6:	81 e0       	ldi	r24, 0x01	; 1
    5ac8:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
	taskEXIT_CRITICAL();
    5aca:	0f 90       	pop	r0
    5acc:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    5ace:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5ad0:	29 96       	adiw	r28, 0x09	; 9
    5ad2:	0f b6       	in	r0, 0x3f	; 63
    5ad4:	f8 94       	cli
    5ad6:	de bf       	out	0x3e, r29	; 62
    5ad8:	0f be       	out	0x3f, r0	; 63
    5ada:	cd bf       	out	0x3d, r28	; 61
    5adc:	cf 91       	pop	r28
    5ade:	df 91       	pop	r29
    5ae0:	08 95       	ret

00005ae2 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5ae2:	df 93       	push	r29
    5ae4:	cf 93       	push	r28
    5ae6:	cd b7       	in	r28, 0x3d	; 61
    5ae8:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	80 93 a2 06 	sts	0x06A2, r24
}
    5af0:	cf 91       	pop	r28
    5af2:	df 91       	pop	r29
    5af4:	08 95       	ret

00005af6 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5af6:	df 93       	push	r29
    5af8:	cf 93       	push	r28
    5afa:	00 d0       	rcall	.+0      	; 0x5afc <prvIdleTask+0x6>
    5afc:	cd b7       	in	r28, 0x3d	; 61
    5afe:	de b7       	in	r29, 0x3e	; 62
    5b00:	9a 83       	std	Y+2, r25	; 0x02
    5b02:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    5b04:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <prvCheckTasksWaitingTermination>
    5b08:	fd cf       	rjmp	.-6      	; 0x5b04 <prvIdleTask+0xe>

00005b0a <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    5b0a:	df 93       	push	r29
    5b0c:	cf 93       	push	r28
    5b0e:	0f 92       	push	r0
    5b10:	cd b7       	in	r28, 0x3d	; 61
    5b12:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    5b14:	19 82       	std	Y+1, r1	; 0x01
    5b16:	13 c0       	rjmp	.+38     	; 0x5b3e <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    5b18:	89 81       	ldd	r24, Y+1	; 0x01
    5b1a:	28 2f       	mov	r18, r24
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	c9 01       	movw	r24, r18
    5b20:	88 0f       	add	r24, r24
    5b22:	99 1f       	adc	r25, r25
    5b24:	88 0f       	add	r24, r24
    5b26:	99 1f       	adc	r25, r25
    5b28:	88 0f       	add	r24, r24
    5b2a:	99 1f       	adc	r25, r25
    5b2c:	82 0f       	add	r24, r18
    5b2e:	93 1f       	adc	r25, r19
    5b30:	86 55       	subi	r24, 0x56	; 86
    5b32:	99 4f       	sbci	r25, 0xF9	; 249
    5b34:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    5b38:	89 81       	ldd	r24, Y+1	; 0x01
    5b3a:	8f 5f       	subi	r24, 0xFF	; 255
    5b3c:	89 83       	std	Y+1, r24	; 0x01
    5b3e:	89 81       	ldd	r24, Y+1	; 0x01
    5b40:	84 30       	cpi	r24, 0x04	; 4
    5b42:	50 f3       	brcs	.-44     	; 0x5b18 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    5b44:	8e ec       	ldi	r24, 0xCE	; 206
    5b46:	96 e0       	ldi	r25, 0x06	; 6
    5b48:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    5b4c:	87 ed       	ldi	r24, 0xD7	; 215
    5b4e:	96 e0       	ldi	r25, 0x06	; 6
    5b50:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    5b54:	84 ee       	ldi	r24, 0xE4	; 228
    5b56:	96 e0       	ldi	r25, 0x06	; 6
    5b58:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    5b5c:	8d ee       	ldi	r24, 0xED	; 237
    5b5e:	96 e0       	ldi	r25, 0x06	; 6
    5b60:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    5b64:	86 ef       	ldi	r24, 0xF6	; 246
    5b66:	96 e0       	ldi	r25, 0x06	; 6
    5b68:	0e 94 29 11 	call	0x2252	; 0x2252 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5b6c:	8e ec       	ldi	r24, 0xCE	; 206
    5b6e:	96 e0       	ldi	r25, 0x06	; 6
    5b70:	90 93 e1 06 	sts	0x06E1, r25
    5b74:	80 93 e0 06 	sts	0x06E0, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5b78:	87 ed       	ldi	r24, 0xD7	; 215
    5b7a:	96 e0       	ldi	r25, 0x06	; 6
    5b7c:	90 93 e3 06 	sts	0x06E3, r25
    5b80:	80 93 e2 06 	sts	0x06E2, r24
}
    5b84:	0f 90       	pop	r0
    5b86:	cf 91       	pop	r28
    5b88:	df 91       	pop	r29
    5b8a:	08 95       	ret

00005b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5b8c:	df 93       	push	r29
    5b8e:	cf 93       	push	r28
    5b90:	00 d0       	rcall	.+0      	; 0x5b92 <prvCheckTasksWaitingTermination+0x6>
    5b92:	cd b7       	in	r28, 0x3d	; 61
    5b94:	de b7       	in	r29, 0x3e	; 62
    5b96:	20 c0       	rjmp	.+64     	; 0x5bd8 <prvCheckTasksWaitingTermination+0x4c>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
    5b98:	0f b6       	in	r0, 0x3f	; 63
    5b9a:	f8 94       	cli
    5b9c:	0f 92       	push	r0
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5b9e:	e0 91 f2 06 	lds	r30, 0x06F2
    5ba2:	f0 91 f3 06 	lds	r31, 0x06F3
    5ba6:	86 81       	ldd	r24, Z+6	; 0x06
    5ba8:	97 81       	ldd	r25, Z+7	; 0x07
    5baa:	9a 83       	std	Y+2, r25	; 0x02
    5bac:	89 83       	std	Y+1, r24	; 0x01
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5bae:	89 81       	ldd	r24, Y+1	; 0x01
    5bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    5bb2:	02 96       	adiw	r24, 0x02	; 2
    5bb4:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
				--uxCurrentNumberOfTasks;
    5bb8:	80 91 9c 06 	lds	r24, 0x069C
    5bbc:	81 50       	subi	r24, 0x01	; 1
    5bbe:	80 93 9c 06 	sts	0x069C, r24
				--uxDeletedTasksWaitingCleanUp;
    5bc2:	80 91 9b 06 	lds	r24, 0x069B
    5bc6:	81 50       	subi	r24, 0x01	; 1
    5bc8:	80 93 9b 06 	sts	0x069B, r24
			}
			taskEXIT_CRITICAL();
    5bcc:	0f 90       	pop	r0
    5bce:	0f be       	out	0x3f, r0	; 63

			prvDeleteTCB( pxTCB );
    5bd0:	89 81       	ldd	r24, Y+1	; 0x01
    5bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd4:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5bd8:	80 91 9b 06 	lds	r24, 0x069B
    5bdc:	88 23       	and	r24, r24
    5bde:	e1 f6       	brne	.-72     	; 0x5b98 <prvCheckTasksWaitingTermination+0xc>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    5be0:	0f 90       	pop	r0
    5be2:	0f 90       	pop	r0
    5be4:	cf 91       	pop	r28
    5be6:	df 91       	pop	r29
    5be8:	08 95       	ret

00005bea <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    5bea:	df 93       	push	r29
    5bec:	cf 93       	push	r28
    5bee:	00 d0       	rcall	.+0      	; 0x5bf0 <prvDeleteTCB+0x6>
    5bf0:	cd b7       	in	r28, 0x3d	; 61
    5bf2:	de b7       	in	r29, 0x3e	; 62
    5bf4:	9a 83       	std	Y+2, r25	; 0x02
    5bf6:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    5bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    5bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    5bfc:	87 89       	ldd	r24, Z+23	; 0x17
    5bfe:	90 8d       	ldd	r25, Z+24	; 0x18
    5c00:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
			vPortFree( pxTCB );
    5c04:	89 81       	ldd	r24, Y+1	; 0x01
    5c06:	9a 81       	ldd	r25, Y+2	; 0x02
    5c08:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    5c0c:	0f 90       	pop	r0
    5c0e:	0f 90       	pop	r0
    5c10:	cf 91       	pop	r28
    5c12:	df 91       	pop	r29
    5c14:	08 95       	ret

00005c16 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    5c16:	df 93       	push	r29
    5c18:	cf 93       	push	r28
    5c1a:	00 d0       	rcall	.+0      	; 0x5c1c <prvResetNextTaskUnblockTime+0x6>
    5c1c:	cd b7       	in	r28, 0x3d	; 61
    5c1e:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5c20:	e0 91 e0 06 	lds	r30, 0x06E0
    5c24:	f0 91 e1 06 	lds	r31, 0x06E1
    5c28:	80 81       	ld	r24, Z
    5c2a:	88 23       	and	r24, r24
    5c2c:	39 f4       	brne	.+14     	; 0x5c3c <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    5c2e:	8f ef       	ldi	r24, 0xFF	; 255
    5c30:	9f ef       	ldi	r25, 0xFF	; 255
    5c32:	90 93 a6 06 	sts	0x06A6, r25
    5c36:	80 93 a5 06 	sts	0x06A5, r24
    5c3a:	13 c0       	rjmp	.+38     	; 0x5c62 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5c3c:	e0 91 e0 06 	lds	r30, 0x06E0
    5c40:	f0 91 e1 06 	lds	r31, 0x06E1
    5c44:	05 80       	ldd	r0, Z+5	; 0x05
    5c46:	f6 81       	ldd	r31, Z+6	; 0x06
    5c48:	e0 2d       	mov	r30, r0
    5c4a:	86 81       	ldd	r24, Z+6	; 0x06
    5c4c:	97 81       	ldd	r25, Z+7	; 0x07
    5c4e:	9a 83       	std	Y+2, r25	; 0x02
    5c50:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    5c52:	e9 81       	ldd	r30, Y+1	; 0x01
    5c54:	fa 81       	ldd	r31, Y+2	; 0x02
    5c56:	82 81       	ldd	r24, Z+2	; 0x02
    5c58:	93 81       	ldd	r25, Z+3	; 0x03
    5c5a:	90 93 a6 06 	sts	0x06A6, r25
    5c5e:	80 93 a5 06 	sts	0x06A5, r24
	}
}
    5c62:	0f 90       	pop	r0
    5c64:	0f 90       	pop	r0
    5c66:	cf 91       	pop	r28
    5c68:	df 91       	pop	r29
    5c6a:	08 95       	ret

00005c6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    5c6c:	df 93       	push	r29
    5c6e:	cf 93       	push	r28
    5c70:	00 d0       	rcall	.+0      	; 0x5c72 <xTaskGetCurrentTaskHandle+0x6>
    5c72:	cd b7       	in	r28, 0x3d	; 61
    5c74:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5c76:	80 91 99 06 	lds	r24, 0x0699
    5c7a:	90 91 9a 06 	lds	r25, 0x069A
    5c7e:	9a 83       	std	Y+2, r25	; 0x02
    5c80:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    5c82:	89 81       	ldd	r24, Y+1	; 0x01
    5c84:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    5c86:	0f 90       	pop	r0
    5c88:	0f 90       	pop	r0
    5c8a:	cf 91       	pop	r28
    5c8c:	df 91       	pop	r29
    5c8e:	08 95       	ret

00005c90 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    5c90:	df 93       	push	r29
    5c92:	cf 93       	push	r28
    5c94:	00 d0       	rcall	.+0      	; 0x5c96 <uxTaskResetEventItemValue+0x6>
    5c96:	cd b7       	in	r28, 0x3d	; 61
    5c98:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    5c9a:	e0 91 99 06 	lds	r30, 0x0699
    5c9e:	f0 91 9a 06 	lds	r31, 0x069A
    5ca2:	84 85       	ldd	r24, Z+12	; 0x0c
    5ca4:	95 85       	ldd	r25, Z+13	; 0x0d
    5ca6:	9a 83       	std	Y+2, r25	; 0x02
    5ca8:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5caa:	a0 91 99 06 	lds	r26, 0x0699
    5cae:	b0 91 9a 06 	lds	r27, 0x069A
    5cb2:	e0 91 99 06 	lds	r30, 0x0699
    5cb6:	f0 91 9a 06 	lds	r31, 0x069A
    5cba:	86 89       	ldd	r24, Z+22	; 0x16
    5cbc:	28 2f       	mov	r18, r24
    5cbe:	30 e0       	ldi	r19, 0x00	; 0
    5cc0:	84 e0       	ldi	r24, 0x04	; 4
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	82 1b       	sub	r24, r18
    5cc6:	93 0b       	sbc	r25, r19
    5cc8:	1d 96       	adiw	r26, 0x0d	; 13
    5cca:	9c 93       	st	X, r25
    5ccc:	8e 93       	st	-X, r24
    5cce:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    5cd0:	89 81       	ldd	r24, Y+1	; 0x01
    5cd2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5cd4:	0f 90       	pop	r0
    5cd6:	0f 90       	pop	r0
    5cd8:	cf 91       	pop	r28
    5cda:	df 91       	pop	r29
    5cdc:	08 95       	ret

00005cde <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    5cde:	df 93       	push	r29
    5ce0:	cf 93       	push	r28
    5ce2:	cd b7       	in	r28, 0x3d	; 61
    5ce4:	de b7       	in	r29, 0x3e	; 62
    5ce6:	27 97       	sbiw	r28, 0x07	; 7
    5ce8:	0f b6       	in	r0, 0x3f	; 63
    5cea:	f8 94       	cli
    5cec:	de bf       	out	0x3e, r29	; 62
    5cee:	0f be       	out	0x3f, r0	; 63
    5cf0:	cd bf       	out	0x3d, r28	; 61
    5cf2:	8d 83       	std	Y+5, r24	; 0x05
    5cf4:	7f 83       	std	Y+7, r23	; 0x07
    5cf6:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    5cf8:	0f b6       	in	r0, 0x3f	; 63
    5cfa:	f8 94       	cli
    5cfc:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    5cfe:	e0 91 99 06 	lds	r30, 0x0699
    5d02:	f0 91 9a 06 	lds	r31, 0x069A
    5d06:	81 a1       	ldd	r24, Z+33	; 0x21
    5d08:	92 a1       	ldd	r25, Z+34	; 0x22
    5d0a:	a3 a1       	ldd	r26, Z+35	; 0x23
    5d0c:	b4 a1       	ldd	r27, Z+36	; 0x24
    5d0e:	00 97       	sbiw	r24, 0x00	; 0
    5d10:	a1 05       	cpc	r26, r1
    5d12:	b1 05       	cpc	r27, r1
    5d14:	89 f4       	brne	.+34     	; 0x5d38 <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5d16:	e0 91 99 06 	lds	r30, 0x0699
    5d1a:	f0 91 9a 06 	lds	r31, 0x069A
    5d1e:	81 e0       	ldi	r24, 0x01	; 1
    5d20:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    5d22:	8e 81       	ldd	r24, Y+6	; 0x06
    5d24:	9f 81       	ldd	r25, Y+7	; 0x07
    5d26:	00 97       	sbiw	r24, 0x00	; 0
    5d28:	39 f0       	breq	.+14     	; 0x5d38 <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5d2a:	8e 81       	ldd	r24, Y+6	; 0x06
    5d2c:	9f 81       	ldd	r25, Y+7	; 0x07
    5d2e:	61 e0       	ldi	r22, 0x01	; 1
    5d30:	0e 94 17 32 	call	0x642e	; 0x642e <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    5d34:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    5d38:	0f 90       	pop	r0
    5d3a:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    5d3c:	0f b6       	in	r0, 0x3f	; 63
    5d3e:	f8 94       	cli
    5d40:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    5d42:	e0 91 99 06 	lds	r30, 0x0699
    5d46:	f0 91 9a 06 	lds	r31, 0x069A
    5d4a:	81 a1       	ldd	r24, Z+33	; 0x21
    5d4c:	92 a1       	ldd	r25, Z+34	; 0x22
    5d4e:	a3 a1       	ldd	r26, Z+35	; 0x23
    5d50:	b4 a1       	ldd	r27, Z+36	; 0x24
    5d52:	89 83       	std	Y+1, r24	; 0x01
    5d54:	9a 83       	std	Y+2, r25	; 0x02
    5d56:	ab 83       	std	Y+3, r26	; 0x03
    5d58:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    5d5a:	89 81       	ldd	r24, Y+1	; 0x01
    5d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d5e:	ab 81       	ldd	r26, Y+3	; 0x03
    5d60:	bc 81       	ldd	r27, Y+4	; 0x04
    5d62:	00 97       	sbiw	r24, 0x00	; 0
    5d64:	a1 05       	cpc	r26, r1
    5d66:	b1 05       	cpc	r27, r1
    5d68:	d9 f0       	breq	.+54     	; 0x5da0 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    5d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d6c:	88 23       	and	r24, r24
    5d6e:	49 f0       	breq	.+18     	; 0x5d82 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    5d70:	e0 91 99 06 	lds	r30, 0x0699
    5d74:	f0 91 9a 06 	lds	r31, 0x069A
    5d78:	11 a2       	std	Z+33, r1	; 0x21
    5d7a:	12 a2       	std	Z+34, r1	; 0x22
    5d7c:	13 a2       	std	Z+35, r1	; 0x23
    5d7e:	14 a2       	std	Z+36, r1	; 0x24
    5d80:	0f c0       	rjmp	.+30     	; 0x5da0 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    5d82:	e0 91 99 06 	lds	r30, 0x0699
    5d86:	f0 91 9a 06 	lds	r31, 0x069A
    5d8a:	89 81       	ldd	r24, Y+1	; 0x01
    5d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d8e:	ab 81       	ldd	r26, Y+3	; 0x03
    5d90:	bc 81       	ldd	r27, Y+4	; 0x04
    5d92:	01 97       	sbiw	r24, 0x01	; 1
    5d94:	a1 09       	sbc	r26, r1
    5d96:	b1 09       	sbc	r27, r1
    5d98:	81 a3       	std	Z+33, r24	; 0x21
    5d9a:	92 a3       	std	Z+34, r25	; 0x22
    5d9c:	a3 a3       	std	Z+35, r26	; 0x23
    5d9e:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5da0:	e0 91 99 06 	lds	r30, 0x0699
    5da4:	f0 91 9a 06 	lds	r31, 0x069A
    5da8:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    5daa:	0f 90       	pop	r0
    5dac:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    5dae:	89 81       	ldd	r24, Y+1	; 0x01
    5db0:	9a 81       	ldd	r25, Y+2	; 0x02
    5db2:	ab 81       	ldd	r26, Y+3	; 0x03
    5db4:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    5db6:	bc 01       	movw	r22, r24
    5db8:	cd 01       	movw	r24, r26
    5dba:	27 96       	adiw	r28, 0x07	; 7
    5dbc:	0f b6       	in	r0, 0x3f	; 63
    5dbe:	f8 94       	cli
    5dc0:	de bf       	out	0x3e, r29	; 62
    5dc2:	0f be       	out	0x3f, r0	; 63
    5dc4:	cd bf       	out	0x3d, r28	; 61
    5dc6:	cf 91       	pop	r28
    5dc8:	df 91       	pop	r29
    5dca:	08 95       	ret

00005dcc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    5dcc:	ef 92       	push	r14
    5dce:	ff 92       	push	r15
    5dd0:	0f 93       	push	r16
    5dd2:	1f 93       	push	r17
    5dd4:	df 93       	push	r29
    5dd6:	cf 93       	push	r28
    5dd8:	cd b7       	in	r28, 0x3d	; 61
    5dda:	de b7       	in	r29, 0x3e	; 62
    5ddc:	2d 97       	sbiw	r28, 0x0d	; 13
    5dde:	0f b6       	in	r0, 0x3f	; 63
    5de0:	f8 94       	cli
    5de2:	de bf       	out	0x3e, r29	; 62
    5de4:	0f be       	out	0x3f, r0	; 63
    5de6:	cd bf       	out	0x3d, r28	; 61
    5de8:	6a 83       	std	Y+2, r22	; 0x02
    5dea:	7b 83       	std	Y+3, r23	; 0x03
    5dec:	8c 83       	std	Y+4, r24	; 0x04
    5dee:	9d 83       	std	Y+5, r25	; 0x05
    5df0:	2e 83       	std	Y+6, r18	; 0x06
    5df2:	3f 83       	std	Y+7, r19	; 0x07
    5df4:	48 87       	std	Y+8, r20	; 0x08
    5df6:	59 87       	std	Y+9, r21	; 0x09
    5df8:	1b 87       	std	Y+11, r17	; 0x0b
    5dfa:	0a 87       	std	Y+10, r16	; 0x0a
    5dfc:	fd 86       	std	Y+13, r15	; 0x0d
    5dfe:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    5e00:	0f b6       	in	r0, 0x3f	; 63
    5e02:	f8 94       	cli
    5e04:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    5e06:	e0 91 99 06 	lds	r30, 0x0699
    5e0a:	f0 91 9a 06 	lds	r31, 0x069A
    5e0e:	85 a1       	ldd	r24, Z+37	; 0x25
    5e10:	82 30       	cpi	r24, 0x02	; 2
    5e12:	49 f1       	breq	.+82     	; 0x5e66 <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    5e14:	e0 91 99 06 	lds	r30, 0x0699
    5e18:	f0 91 9a 06 	lds	r31, 0x069A
    5e1c:	21 a1       	ldd	r18, Z+33	; 0x21
    5e1e:	32 a1       	ldd	r19, Z+34	; 0x22
    5e20:	43 a1       	ldd	r20, Z+35	; 0x23
    5e22:	54 a1       	ldd	r21, Z+36	; 0x24
    5e24:	8a 81       	ldd	r24, Y+2	; 0x02
    5e26:	9b 81       	ldd	r25, Y+3	; 0x03
    5e28:	ac 81       	ldd	r26, Y+4	; 0x04
    5e2a:	bd 81       	ldd	r27, Y+5	; 0x05
    5e2c:	80 95       	com	r24
    5e2e:	90 95       	com	r25
    5e30:	a0 95       	com	r26
    5e32:	b0 95       	com	r27
    5e34:	82 23       	and	r24, r18
    5e36:	93 23       	and	r25, r19
    5e38:	a4 23       	and	r26, r20
    5e3a:	b5 23       	and	r27, r21
    5e3c:	81 a3       	std	Z+33, r24	; 0x21
    5e3e:	92 a3       	std	Z+34, r25	; 0x22
    5e40:	a3 a3       	std	Z+35, r26	; 0x23
    5e42:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5e44:	e0 91 99 06 	lds	r30, 0x0699
    5e48:	f0 91 9a 06 	lds	r31, 0x069A
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    5e50:	8c 85       	ldd	r24, Y+12	; 0x0c
    5e52:	9d 85       	ldd	r25, Y+13	; 0x0d
    5e54:	00 97       	sbiw	r24, 0x00	; 0
    5e56:	39 f0       	breq	.+14     	; 0x5e66 <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5e58:	8c 85       	ldd	r24, Y+12	; 0x0c
    5e5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    5e5c:	61 e0       	ldi	r22, 0x01	; 1
    5e5e:	0e 94 17 32 	call	0x642e	; 0x642e <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    5e62:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    5e66:	0f 90       	pop	r0
    5e68:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    5e6a:	0f b6       	in	r0, 0x3f	; 63
    5e6c:	f8 94       	cli
    5e6e:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    5e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e72:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e74:	00 97       	sbiw	r24, 0x00	; 0
    5e76:	71 f0       	breq	.+28     	; 0x5e94 <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    5e78:	e0 91 99 06 	lds	r30, 0x0699
    5e7c:	f0 91 9a 06 	lds	r31, 0x069A
    5e80:	81 a1       	ldd	r24, Z+33	; 0x21
    5e82:	92 a1       	ldd	r25, Z+34	; 0x22
    5e84:	a3 a1       	ldd	r26, Z+35	; 0x23
    5e86:	b4 a1       	ldd	r27, Z+36	; 0x24
    5e88:	ea 85       	ldd	r30, Y+10	; 0x0a
    5e8a:	fb 85       	ldd	r31, Y+11	; 0x0b
    5e8c:	80 83       	st	Z, r24
    5e8e:	91 83       	std	Z+1, r25	; 0x01
    5e90:	a2 83       	std	Z+2, r26	; 0x02
    5e92:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    5e94:	e0 91 99 06 	lds	r30, 0x0699
    5e98:	f0 91 9a 06 	lds	r31, 0x069A
    5e9c:	85 a1       	ldd	r24, Z+37	; 0x25
    5e9e:	82 30       	cpi	r24, 0x02	; 2
    5ea0:	11 f0       	breq	.+4      	; 0x5ea6 <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    5ea2:	19 82       	std	Y+1, r1	; 0x01
    5ea4:	1a c0       	rjmp	.+52     	; 0x5eda <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    5ea6:	e0 91 99 06 	lds	r30, 0x0699
    5eaa:	f0 91 9a 06 	lds	r31, 0x069A
    5eae:	21 a1       	ldd	r18, Z+33	; 0x21
    5eb0:	32 a1       	ldd	r19, Z+34	; 0x22
    5eb2:	43 a1       	ldd	r20, Z+35	; 0x23
    5eb4:	54 a1       	ldd	r21, Z+36	; 0x24
    5eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    5eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    5eba:	a8 85       	ldd	r26, Y+8	; 0x08
    5ebc:	b9 85       	ldd	r27, Y+9	; 0x09
    5ebe:	80 95       	com	r24
    5ec0:	90 95       	com	r25
    5ec2:	a0 95       	com	r26
    5ec4:	b0 95       	com	r27
    5ec6:	82 23       	and	r24, r18
    5ec8:	93 23       	and	r25, r19
    5eca:	a4 23       	and	r26, r20
    5ecc:	b5 23       	and	r27, r21
    5ece:	81 a3       	std	Z+33, r24	; 0x21
    5ed0:	92 a3       	std	Z+34, r25	; 0x22
    5ed2:	a3 a3       	std	Z+35, r26	; 0x23
    5ed4:	b4 a3       	std	Z+36, r27	; 0x24
				xReturn = pdTRUE;
    5ed6:	81 e0       	ldi	r24, 0x01	; 1
    5ed8:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5eda:	e0 91 99 06 	lds	r30, 0x0699
    5ede:	f0 91 9a 06 	lds	r31, 0x069A
    5ee2:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    5ee4:	0f 90       	pop	r0
    5ee6:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5ee8:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5eea:	2d 96       	adiw	r28, 0x0d	; 13
    5eec:	0f b6       	in	r0, 0x3f	; 63
    5eee:	f8 94       	cli
    5ef0:	de bf       	out	0x3e, r29	; 62
    5ef2:	0f be       	out	0x3f, r0	; 63
    5ef4:	cd bf       	out	0x3d, r28	; 61
    5ef6:	cf 91       	pop	r28
    5ef8:	df 91       	pop	r29
    5efa:	1f 91       	pop	r17
    5efc:	0f 91       	pop	r16
    5efe:	ff 90       	pop	r15
    5f00:	ef 90       	pop	r14
    5f02:	08 95       	ret

00005f04 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    5f04:	0f 93       	push	r16
    5f06:	1f 93       	push	r17
    5f08:	df 93       	push	r29
    5f0a:	cf 93       	push	r28
    5f0c:	cd b7       	in	r28, 0x3d	; 61
    5f0e:	de b7       	in	r29, 0x3e	; 62
    5f10:	2f 97       	sbiw	r28, 0x0f	; 15
    5f12:	0f b6       	in	r0, 0x3f	; 63
    5f14:	f8 94       	cli
    5f16:	de bf       	out	0x3e, r29	; 62
    5f18:	0f be       	out	0x3f, r0	; 63
    5f1a:	cd bf       	out	0x3d, r28	; 61
    5f1c:	9e 83       	std	Y+6, r25	; 0x06
    5f1e:	8d 83       	std	Y+5, r24	; 0x05
    5f20:	4f 83       	std	Y+7, r20	; 0x07
    5f22:	58 87       	std	Y+8, r21	; 0x08
    5f24:	69 87       	std	Y+9, r22	; 0x09
    5f26:	7a 87       	std	Y+10, r23	; 0x0a
    5f28:	2b 87       	std	Y+11, r18	; 0x0b
    5f2a:	1d 87       	std	Y+13, r17	; 0x0d
    5f2c:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    5f2e:	81 e0       	ldi	r24, 0x01	; 1
    5f30:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
    5f32:	8d 81       	ldd	r24, Y+5	; 0x05
    5f34:	9e 81       	ldd	r25, Y+6	; 0x06
    5f36:	9c 83       	std	Y+4, r25	; 0x04
    5f38:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    5f3a:	0f b6       	in	r0, 0x3f	; 63
    5f3c:	f8 94       	cli
    5f3e:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    5f40:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f42:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f44:	00 97       	sbiw	r24, 0x00	; 0
    5f46:	61 f0       	breq	.+24     	; 0x5f60 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5f48:	eb 81       	ldd	r30, Y+3	; 0x03
    5f4a:	fc 81       	ldd	r31, Y+4	; 0x04
    5f4c:	81 a1       	ldd	r24, Z+33	; 0x21
    5f4e:	92 a1       	ldd	r25, Z+34	; 0x22
    5f50:	a3 a1       	ldd	r26, Z+35	; 0x23
    5f52:	b4 a1       	ldd	r27, Z+36	; 0x24
    5f54:	ec 85       	ldd	r30, Y+12	; 0x0c
    5f56:	fd 85       	ldd	r31, Y+13	; 0x0d
    5f58:	80 83       	st	Z, r24
    5f5a:	91 83       	std	Z+1, r25	; 0x01
    5f5c:	a2 83       	std	Z+2, r26	; 0x02
    5f5e:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5f60:	eb 81       	ldd	r30, Y+3	; 0x03
    5f62:	fc 81       	ldd	r31, Y+4	; 0x04
    5f64:	85 a1       	ldd	r24, Z+37	; 0x25
    5f66:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5f68:	eb 81       	ldd	r30, Y+3	; 0x03
    5f6a:	fc 81       	ldd	r31, Y+4	; 0x04
    5f6c:	82 e0       	ldi	r24, 0x02	; 2
    5f6e:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    5f70:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f72:	28 2f       	mov	r18, r24
    5f74:	30 e0       	ldi	r19, 0x00	; 0
    5f76:	3f 87       	std	Y+15, r19	; 0x0f
    5f78:	2e 87       	std	Y+14, r18	; 0x0e
    5f7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f7e:	82 30       	cpi	r24, 0x02	; 2
    5f80:	91 05       	cpc	r25, r1
    5f82:	59 f1       	breq	.+86     	; 0x5fda <xTaskGenericNotify+0xd6>
    5f84:	2e 85       	ldd	r18, Y+14	; 0x0e
    5f86:	3f 85       	ldd	r19, Y+15	; 0x0f
    5f88:	23 30       	cpi	r18, 0x03	; 3
    5f8a:	31 05       	cpc	r19, r1
    5f8c:	34 f4       	brge	.+12     	; 0x5f9a <xTaskGenericNotify+0x96>
    5f8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f90:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f92:	81 30       	cpi	r24, 0x01	; 1
    5f94:	91 05       	cpc	r25, r1
    5f96:	61 f0       	breq	.+24     	; 0x5fb0 <xTaskGenericNotify+0xac>
    5f98:	4a c0       	rjmp	.+148    	; 0x602e <xTaskGenericNotify+0x12a>
    5f9a:	2e 85       	ldd	r18, Y+14	; 0x0e
    5f9c:	3f 85       	ldd	r19, Y+15	; 0x0f
    5f9e:	23 30       	cpi	r18, 0x03	; 3
    5fa0:	31 05       	cpc	r19, r1
    5fa2:	59 f1       	breq	.+86     	; 0x5ffa <xTaskGenericNotify+0xf6>
    5fa4:	8e 85       	ldd	r24, Y+14	; 0x0e
    5fa6:	9f 85       	ldd	r25, Y+15	; 0x0f
    5fa8:	84 30       	cpi	r24, 0x04	; 4
    5faa:	91 05       	cpc	r25, r1
    5fac:	89 f1       	breq	.+98     	; 0x6010 <xTaskGenericNotify+0x10c>
    5fae:	3f c0       	rjmp	.+126    	; 0x602e <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5fb0:	eb 81       	ldd	r30, Y+3	; 0x03
    5fb2:	fc 81       	ldd	r31, Y+4	; 0x04
    5fb4:	21 a1       	ldd	r18, Z+33	; 0x21
    5fb6:	32 a1       	ldd	r19, Z+34	; 0x22
    5fb8:	43 a1       	ldd	r20, Z+35	; 0x23
    5fba:	54 a1       	ldd	r21, Z+36	; 0x24
    5fbc:	8f 81       	ldd	r24, Y+7	; 0x07
    5fbe:	98 85       	ldd	r25, Y+8	; 0x08
    5fc0:	a9 85       	ldd	r26, Y+9	; 0x09
    5fc2:	ba 85       	ldd	r27, Y+10	; 0x0a
    5fc4:	82 2b       	or	r24, r18
    5fc6:	93 2b       	or	r25, r19
    5fc8:	a4 2b       	or	r26, r20
    5fca:	b5 2b       	or	r27, r21
    5fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    5fce:	fc 81       	ldd	r31, Y+4	; 0x04
    5fd0:	81 a3       	std	Z+33, r24	; 0x21
    5fd2:	92 a3       	std	Z+34, r25	; 0x22
    5fd4:	a3 a3       	std	Z+35, r26	; 0x23
    5fd6:	b4 a3       	std	Z+36, r27	; 0x24
    5fd8:	2a c0       	rjmp	.+84     	; 0x602e <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    5fda:	eb 81       	ldd	r30, Y+3	; 0x03
    5fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    5fde:	81 a1       	ldd	r24, Z+33	; 0x21
    5fe0:	92 a1       	ldd	r25, Z+34	; 0x22
    5fe2:	a3 a1       	ldd	r26, Z+35	; 0x23
    5fe4:	b4 a1       	ldd	r27, Z+36	; 0x24
    5fe6:	01 96       	adiw	r24, 0x01	; 1
    5fe8:	a1 1d       	adc	r26, r1
    5fea:	b1 1d       	adc	r27, r1
    5fec:	eb 81       	ldd	r30, Y+3	; 0x03
    5fee:	fc 81       	ldd	r31, Y+4	; 0x04
    5ff0:	81 a3       	std	Z+33, r24	; 0x21
    5ff2:	92 a3       	std	Z+34, r25	; 0x22
    5ff4:	a3 a3       	std	Z+35, r26	; 0x23
    5ff6:	b4 a3       	std	Z+36, r27	; 0x24
    5ff8:	1a c0       	rjmp	.+52     	; 0x602e <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    5ffa:	eb 81       	ldd	r30, Y+3	; 0x03
    5ffc:	fc 81       	ldd	r31, Y+4	; 0x04
    5ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    6000:	98 85       	ldd	r25, Y+8	; 0x08
    6002:	a9 85       	ldd	r26, Y+9	; 0x09
    6004:	ba 85       	ldd	r27, Y+10	; 0x0a
    6006:	81 a3       	std	Z+33, r24	; 0x21
    6008:	92 a3       	std	Z+34, r25	; 0x22
    600a:	a3 a3       	std	Z+35, r26	; 0x23
    600c:	b4 a3       	std	Z+36, r27	; 0x24
    600e:	0f c0       	rjmp	.+30     	; 0x602e <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    6010:	89 81       	ldd	r24, Y+1	; 0x01
    6012:	82 30       	cpi	r24, 0x02	; 2
    6014:	59 f0       	breq	.+22     	; 0x602c <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    6016:	eb 81       	ldd	r30, Y+3	; 0x03
    6018:	fc 81       	ldd	r31, Y+4	; 0x04
    601a:	8f 81       	ldd	r24, Y+7	; 0x07
    601c:	98 85       	ldd	r25, Y+8	; 0x08
    601e:	a9 85       	ldd	r26, Y+9	; 0x09
    6020:	ba 85       	ldd	r27, Y+10	; 0x0a
    6022:	81 a3       	std	Z+33, r24	; 0x21
    6024:	92 a3       	std	Z+34, r25	; 0x22
    6026:	a3 a3       	std	Z+35, r26	; 0x23
    6028:	b4 a3       	std	Z+36, r27	; 0x24
    602a:	01 c0       	rjmp	.+2      	; 0x602e <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    602c:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    602e:	89 81       	ldd	r24, Y+1	; 0x01
    6030:	81 30       	cpi	r24, 0x01	; 1
    6032:	b9 f5       	brne	.+110    	; 0x60a2 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6034:	8b 81       	ldd	r24, Y+3	; 0x03
    6036:	9c 81       	ldd	r25, Y+4	; 0x04
    6038:	02 96       	adiw	r24, 0x02	; 2
    603a:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    603e:	eb 81       	ldd	r30, Y+3	; 0x03
    6040:	fc 81       	ldd	r31, Y+4	; 0x04
    6042:	96 89       	ldd	r25, Z+22	; 0x16
    6044:	80 91 9f 06 	lds	r24, 0x069F
    6048:	89 17       	cp	r24, r25
    604a:	28 f4       	brcc	.+10     	; 0x6056 <xTaskGenericNotify+0x152>
    604c:	eb 81       	ldd	r30, Y+3	; 0x03
    604e:	fc 81       	ldd	r31, Y+4	; 0x04
    6050:	86 89       	ldd	r24, Z+22	; 0x16
    6052:	80 93 9f 06 	sts	0x069F, r24
    6056:	eb 81       	ldd	r30, Y+3	; 0x03
    6058:	fc 81       	ldd	r31, Y+4	; 0x04
    605a:	86 89       	ldd	r24, Z+22	; 0x16
    605c:	28 2f       	mov	r18, r24
    605e:	30 e0       	ldi	r19, 0x00	; 0
    6060:	c9 01       	movw	r24, r18
    6062:	88 0f       	add	r24, r24
    6064:	99 1f       	adc	r25, r25
    6066:	88 0f       	add	r24, r24
    6068:	99 1f       	adc	r25, r25
    606a:	88 0f       	add	r24, r24
    606c:	99 1f       	adc	r25, r25
    606e:	82 0f       	add	r24, r18
    6070:	93 1f       	adc	r25, r19
    6072:	ac 01       	movw	r20, r24
    6074:	46 55       	subi	r20, 0x56	; 86
    6076:	59 4f       	sbci	r21, 0xF9	; 249
    6078:	8b 81       	ldd	r24, Y+3	; 0x03
    607a:	9c 81       	ldd	r25, Y+4	; 0x04
    607c:	9c 01       	movw	r18, r24
    607e:	2e 5f       	subi	r18, 0xFE	; 254
    6080:	3f 4f       	sbci	r19, 0xFF	; 255
    6082:	ca 01       	movw	r24, r20
    6084:	b9 01       	movw	r22, r18
    6086:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    608a:	eb 81       	ldd	r30, Y+3	; 0x03
    608c:	fc 81       	ldd	r31, Y+4	; 0x04
    608e:	96 89       	ldd	r25, Z+22	; 0x16
    6090:	e0 91 99 06 	lds	r30, 0x0699
    6094:	f0 91 9a 06 	lds	r31, 0x069A
    6098:	86 89       	ldd	r24, Z+22	; 0x16
    609a:	89 17       	cp	r24, r25
    609c:	10 f4       	brcc	.+4      	; 0x60a2 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    609e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    60a2:	0f 90       	pop	r0
    60a4:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    60a6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    60a8:	2f 96       	adiw	r28, 0x0f	; 15
    60aa:	0f b6       	in	r0, 0x3f	; 63
    60ac:	f8 94       	cli
    60ae:	de bf       	out	0x3e, r29	; 62
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	cd bf       	out	0x3d, r28	; 61
    60b4:	cf 91       	pop	r28
    60b6:	df 91       	pop	r29
    60b8:	1f 91       	pop	r17
    60ba:	0f 91       	pop	r16
    60bc:	08 95       	ret

000060be <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    60be:	ef 92       	push	r14
    60c0:	ff 92       	push	r15
    60c2:	0f 93       	push	r16
    60c4:	1f 93       	push	r17
    60c6:	df 93       	push	r29
    60c8:	cf 93       	push	r28
    60ca:	cd b7       	in	r28, 0x3d	; 61
    60cc:	de b7       	in	r29, 0x3e	; 62
    60ce:	62 97       	sbiw	r28, 0x12	; 18
    60d0:	0f b6       	in	r0, 0x3f	; 63
    60d2:	f8 94       	cli
    60d4:	de bf       	out	0x3e, r29	; 62
    60d6:	0f be       	out	0x3f, r0	; 63
    60d8:	cd bf       	out	0x3d, r28	; 61
    60da:	9f 83       	std	Y+7, r25	; 0x07
    60dc:	8e 83       	std	Y+6, r24	; 0x06
    60de:	48 87       	std	Y+8, r20	; 0x08
    60e0:	59 87       	std	Y+9, r21	; 0x09
    60e2:	6a 87       	std	Y+10, r22	; 0x0a
    60e4:	7b 87       	std	Y+11, r23	; 0x0b
    60e6:	2c 87       	std	Y+12, r18	; 0x0c
    60e8:	1e 87       	std	Y+14, r17	; 0x0e
    60ea:	0d 87       	std	Y+13, r16	; 0x0d
    60ec:	f8 8a       	std	Y+16, r15	; 0x10
    60ee:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    60f0:	81 e0       	ldi	r24, 0x01	; 1
    60f2:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    60f4:	8e 81       	ldd	r24, Y+6	; 0x06
    60f6:	9f 81       	ldd	r25, Y+7	; 0x07
    60f8:	9d 83       	std	Y+5, r25	; 0x05
    60fa:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    60fc:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    60fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    6100:	9e 85       	ldd	r25, Y+14	; 0x0e
    6102:	00 97       	sbiw	r24, 0x00	; 0
    6104:	61 f0       	breq	.+24     	; 0x611e <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    6106:	ec 81       	ldd	r30, Y+4	; 0x04
    6108:	fd 81       	ldd	r31, Y+5	; 0x05
    610a:	81 a1       	ldd	r24, Z+33	; 0x21
    610c:	92 a1       	ldd	r25, Z+34	; 0x22
    610e:	a3 a1       	ldd	r26, Z+35	; 0x23
    6110:	b4 a1       	ldd	r27, Z+36	; 0x24
    6112:	ed 85       	ldd	r30, Y+13	; 0x0d
    6114:	fe 85       	ldd	r31, Y+14	; 0x0e
    6116:	80 83       	st	Z, r24
    6118:	91 83       	std	Z+1, r25	; 0x01
    611a:	a2 83       	std	Z+2, r26	; 0x02
    611c:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    611e:	ec 81       	ldd	r30, Y+4	; 0x04
    6120:	fd 81       	ldd	r31, Y+5	; 0x05
    6122:	85 a1       	ldd	r24, Z+37	; 0x25
    6124:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    6126:	ec 81       	ldd	r30, Y+4	; 0x04
    6128:	fd 81       	ldd	r31, Y+5	; 0x05
    612a:	82 e0       	ldi	r24, 0x02	; 2
    612c:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    612e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6130:	28 2f       	mov	r18, r24
    6132:	30 e0       	ldi	r19, 0x00	; 0
    6134:	3a 8b       	std	Y+18, r19	; 0x12
    6136:	29 8b       	std	Y+17, r18	; 0x11
    6138:	89 89       	ldd	r24, Y+17	; 0x11
    613a:	9a 89       	ldd	r25, Y+18	; 0x12
    613c:	82 30       	cpi	r24, 0x02	; 2
    613e:	91 05       	cpc	r25, r1
    6140:	59 f1       	breq	.+86     	; 0x6198 <xTaskGenericNotifyFromISR+0xda>
    6142:	29 89       	ldd	r18, Y+17	; 0x11
    6144:	3a 89       	ldd	r19, Y+18	; 0x12
    6146:	23 30       	cpi	r18, 0x03	; 3
    6148:	31 05       	cpc	r19, r1
    614a:	34 f4       	brge	.+12     	; 0x6158 <xTaskGenericNotifyFromISR+0x9a>
    614c:	89 89       	ldd	r24, Y+17	; 0x11
    614e:	9a 89       	ldd	r25, Y+18	; 0x12
    6150:	81 30       	cpi	r24, 0x01	; 1
    6152:	91 05       	cpc	r25, r1
    6154:	61 f0       	breq	.+24     	; 0x616e <xTaskGenericNotifyFromISR+0xb0>
    6156:	4a c0       	rjmp	.+148    	; 0x61ec <xTaskGenericNotifyFromISR+0x12e>
    6158:	29 89       	ldd	r18, Y+17	; 0x11
    615a:	3a 89       	ldd	r19, Y+18	; 0x12
    615c:	23 30       	cpi	r18, 0x03	; 3
    615e:	31 05       	cpc	r19, r1
    6160:	59 f1       	breq	.+86     	; 0x61b8 <xTaskGenericNotifyFromISR+0xfa>
    6162:	89 89       	ldd	r24, Y+17	; 0x11
    6164:	9a 89       	ldd	r25, Y+18	; 0x12
    6166:	84 30       	cpi	r24, 0x04	; 4
    6168:	91 05       	cpc	r25, r1
    616a:	89 f1       	breq	.+98     	; 0x61ce <xTaskGenericNotifyFromISR+0x110>
    616c:	3f c0       	rjmp	.+126    	; 0x61ec <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    616e:	ec 81       	ldd	r30, Y+4	; 0x04
    6170:	fd 81       	ldd	r31, Y+5	; 0x05
    6172:	21 a1       	ldd	r18, Z+33	; 0x21
    6174:	32 a1       	ldd	r19, Z+34	; 0x22
    6176:	43 a1       	ldd	r20, Z+35	; 0x23
    6178:	54 a1       	ldd	r21, Z+36	; 0x24
    617a:	88 85       	ldd	r24, Y+8	; 0x08
    617c:	99 85       	ldd	r25, Y+9	; 0x09
    617e:	aa 85       	ldd	r26, Y+10	; 0x0a
    6180:	bb 85       	ldd	r27, Y+11	; 0x0b
    6182:	82 2b       	or	r24, r18
    6184:	93 2b       	or	r25, r19
    6186:	a4 2b       	or	r26, r20
    6188:	b5 2b       	or	r27, r21
    618a:	ec 81       	ldd	r30, Y+4	; 0x04
    618c:	fd 81       	ldd	r31, Y+5	; 0x05
    618e:	81 a3       	std	Z+33, r24	; 0x21
    6190:	92 a3       	std	Z+34, r25	; 0x22
    6192:	a3 a3       	std	Z+35, r26	; 0x23
    6194:	b4 a3       	std	Z+36, r27	; 0x24
    6196:	2a c0       	rjmp	.+84     	; 0x61ec <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    6198:	ec 81       	ldd	r30, Y+4	; 0x04
    619a:	fd 81       	ldd	r31, Y+5	; 0x05
    619c:	81 a1       	ldd	r24, Z+33	; 0x21
    619e:	92 a1       	ldd	r25, Z+34	; 0x22
    61a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    61a2:	b4 a1       	ldd	r27, Z+36	; 0x24
    61a4:	01 96       	adiw	r24, 0x01	; 1
    61a6:	a1 1d       	adc	r26, r1
    61a8:	b1 1d       	adc	r27, r1
    61aa:	ec 81       	ldd	r30, Y+4	; 0x04
    61ac:	fd 81       	ldd	r31, Y+5	; 0x05
    61ae:	81 a3       	std	Z+33, r24	; 0x21
    61b0:	92 a3       	std	Z+34, r25	; 0x22
    61b2:	a3 a3       	std	Z+35, r26	; 0x23
    61b4:	b4 a3       	std	Z+36, r27	; 0x24
    61b6:	1a c0       	rjmp	.+52     	; 0x61ec <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    61b8:	ec 81       	ldd	r30, Y+4	; 0x04
    61ba:	fd 81       	ldd	r31, Y+5	; 0x05
    61bc:	88 85       	ldd	r24, Y+8	; 0x08
    61be:	99 85       	ldd	r25, Y+9	; 0x09
    61c0:	aa 85       	ldd	r26, Y+10	; 0x0a
    61c2:	bb 85       	ldd	r27, Y+11	; 0x0b
    61c4:	81 a3       	std	Z+33, r24	; 0x21
    61c6:	92 a3       	std	Z+34, r25	; 0x22
    61c8:	a3 a3       	std	Z+35, r26	; 0x23
    61ca:	b4 a3       	std	Z+36, r27	; 0x24
    61cc:	0f c0       	rjmp	.+30     	; 0x61ec <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    61ce:	8b 81       	ldd	r24, Y+3	; 0x03
    61d0:	82 30       	cpi	r24, 0x02	; 2
    61d2:	59 f0       	breq	.+22     	; 0x61ea <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    61d4:	ec 81       	ldd	r30, Y+4	; 0x04
    61d6:	fd 81       	ldd	r31, Y+5	; 0x05
    61d8:	88 85       	ldd	r24, Y+8	; 0x08
    61da:	99 85       	ldd	r25, Y+9	; 0x09
    61dc:	aa 85       	ldd	r26, Y+10	; 0x0a
    61de:	bb 85       	ldd	r27, Y+11	; 0x0b
    61e0:	81 a3       	std	Z+33, r24	; 0x21
    61e2:	92 a3       	std	Z+34, r25	; 0x22
    61e4:	a3 a3       	std	Z+35, r26	; 0x23
    61e6:	b4 a3       	std	Z+36, r27	; 0x24
    61e8:	01 c0       	rjmp	.+2      	; 0x61ec <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    61ea:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    61ec:	8b 81       	ldd	r24, Y+3	; 0x03
    61ee:	81 30       	cpi	r24, 0x01	; 1
    61f0:	09 f0       	breq	.+2      	; 0x61f4 <xTaskGenericNotifyFromISR+0x136>
    61f2:	4f c0       	rjmp	.+158    	; 0x6292 <xTaskGenericNotifyFromISR+0x1d4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    61f4:	80 91 a9 06 	lds	r24, 0x06A9
    61f8:	88 23       	and	r24, r24
    61fa:	61 f5       	brne	.+88     	; 0x6254 <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    61fc:	8c 81       	ldd	r24, Y+4	; 0x04
    61fe:	9d 81       	ldd	r25, Y+5	; 0x05
    6200:	02 96       	adiw	r24, 0x02	; 2
    6202:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    6206:	ec 81       	ldd	r30, Y+4	; 0x04
    6208:	fd 81       	ldd	r31, Y+5	; 0x05
    620a:	96 89       	ldd	r25, Z+22	; 0x16
    620c:	80 91 9f 06 	lds	r24, 0x069F
    6210:	89 17       	cp	r24, r25
    6212:	28 f4       	brcc	.+10     	; 0x621e <xTaskGenericNotifyFromISR+0x160>
    6214:	ec 81       	ldd	r30, Y+4	; 0x04
    6216:	fd 81       	ldd	r31, Y+5	; 0x05
    6218:	86 89       	ldd	r24, Z+22	; 0x16
    621a:	80 93 9f 06 	sts	0x069F, r24
    621e:	ec 81       	ldd	r30, Y+4	; 0x04
    6220:	fd 81       	ldd	r31, Y+5	; 0x05
    6222:	86 89       	ldd	r24, Z+22	; 0x16
    6224:	28 2f       	mov	r18, r24
    6226:	30 e0       	ldi	r19, 0x00	; 0
    6228:	c9 01       	movw	r24, r18
    622a:	88 0f       	add	r24, r24
    622c:	99 1f       	adc	r25, r25
    622e:	88 0f       	add	r24, r24
    6230:	99 1f       	adc	r25, r25
    6232:	88 0f       	add	r24, r24
    6234:	99 1f       	adc	r25, r25
    6236:	82 0f       	add	r24, r18
    6238:	93 1f       	adc	r25, r19
    623a:	ac 01       	movw	r20, r24
    623c:	46 55       	subi	r20, 0x56	; 86
    623e:	59 4f       	sbci	r21, 0xF9	; 249
    6240:	8c 81       	ldd	r24, Y+4	; 0x04
    6242:	9d 81       	ldd	r25, Y+5	; 0x05
    6244:	9c 01       	movw	r18, r24
    6246:	2e 5f       	subi	r18, 0xFE	; 254
    6248:	3f 4f       	sbci	r19, 0xFF	; 255
    624a:	ca 01       	movw	r24, r20
    624c:	b9 01       	movw	r22, r18
    624e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
    6252:	0a c0       	rjmp	.+20     	; 0x6268 <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    6254:	8c 81       	ldd	r24, Y+4	; 0x04
    6256:	9d 81       	ldd	r25, Y+5	; 0x05
    6258:	9c 01       	movw	r18, r24
    625a:	24 5f       	subi	r18, 0xF4	; 244
    625c:	3f 4f       	sbci	r19, 0xFF	; 255
    625e:	84 ee       	ldi	r24, 0xE4	; 228
    6260:	96 e0       	ldi	r25, 0x06	; 6
    6262:	b9 01       	movw	r22, r18
    6264:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    6268:	ec 81       	ldd	r30, Y+4	; 0x04
    626a:	fd 81       	ldd	r31, Y+5	; 0x05
    626c:	96 89       	ldd	r25, Z+22	; 0x16
    626e:	e0 91 99 06 	lds	r30, 0x0699
    6272:	f0 91 9a 06 	lds	r31, 0x069A
    6276:	86 89       	ldd	r24, Z+22	; 0x16
    6278:	89 17       	cp	r24, r25
    627a:	58 f4       	brcc	.+22     	; 0x6292 <xTaskGenericNotifyFromISR+0x1d4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    627c:	8f 85       	ldd	r24, Y+15	; 0x0f
    627e:	98 89       	ldd	r25, Y+16	; 0x10
    6280:	00 97       	sbiw	r24, 0x00	; 0
    6282:	21 f0       	breq	.+8      	; 0x628c <xTaskGenericNotifyFromISR+0x1ce>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    6284:	ef 85       	ldd	r30, Y+15	; 0x0f
    6286:	f8 89       	ldd	r31, Y+16	; 0x10
    6288:	81 e0       	ldi	r24, 0x01	; 1
    628a:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	80 93 a2 06 	sts	0x06A2, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    6292:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    6294:	62 96       	adiw	r28, 0x12	; 18
    6296:	0f b6       	in	r0, 0x3f	; 63
    6298:	f8 94       	cli
    629a:	de bf       	out	0x3e, r29	; 62
    629c:	0f be       	out	0x3f, r0	; 63
    629e:	cd bf       	out	0x3d, r28	; 61
    62a0:	cf 91       	pop	r28
    62a2:	df 91       	pop	r29
    62a4:	1f 91       	pop	r17
    62a6:	0f 91       	pop	r16
    62a8:	ff 90       	pop	r15
    62aa:	ef 90       	pop	r14
    62ac:	08 95       	ret

000062ae <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    62ae:	df 93       	push	r29
    62b0:	cf 93       	push	r28
    62b2:	cd b7       	in	r28, 0x3d	; 61
    62b4:	de b7       	in	r29, 0x3e	; 62
    62b6:	28 97       	sbiw	r28, 0x08	; 8
    62b8:	0f b6       	in	r0, 0x3f	; 63
    62ba:	f8 94       	cli
    62bc:	de bf       	out	0x3e, r29	; 62
    62be:	0f be       	out	0x3f, r0	; 63
    62c0:	cd bf       	out	0x3d, r28	; 61
    62c2:	9e 83       	std	Y+6, r25	; 0x06
    62c4:	8d 83       	std	Y+5, r24	; 0x05
    62c6:	78 87       	std	Y+8, r23	; 0x08
    62c8:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    62ca:	8d 81       	ldd	r24, Y+5	; 0x05
    62cc:	9e 81       	ldd	r25, Y+6	; 0x06
    62ce:	9c 83       	std	Y+4, r25	; 0x04
    62d0:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    62d2:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    62d4:	eb 81       	ldd	r30, Y+3	; 0x03
    62d6:	fc 81       	ldd	r31, Y+4	; 0x04
    62d8:	85 a1       	ldd	r24, Z+37	; 0x25
    62da:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    62dc:	eb 81       	ldd	r30, Y+3	; 0x03
    62de:	fc 81       	ldd	r31, Y+4	; 0x04
    62e0:	82 e0       	ldi	r24, 0x02	; 2
    62e2:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    62e4:	eb 81       	ldd	r30, Y+3	; 0x03
    62e6:	fc 81       	ldd	r31, Y+4	; 0x04
    62e8:	81 a1       	ldd	r24, Z+33	; 0x21
    62ea:	92 a1       	ldd	r25, Z+34	; 0x22
    62ec:	a3 a1       	ldd	r26, Z+35	; 0x23
    62ee:	b4 a1       	ldd	r27, Z+36	; 0x24
    62f0:	01 96       	adiw	r24, 0x01	; 1
    62f2:	a1 1d       	adc	r26, r1
    62f4:	b1 1d       	adc	r27, r1
    62f6:	eb 81       	ldd	r30, Y+3	; 0x03
    62f8:	fc 81       	ldd	r31, Y+4	; 0x04
    62fa:	81 a3       	std	Z+33, r24	; 0x21
    62fc:	92 a3       	std	Z+34, r25	; 0x22
    62fe:	a3 a3       	std	Z+35, r26	; 0x23
    6300:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    6302:	8a 81       	ldd	r24, Y+2	; 0x02
    6304:	81 30       	cpi	r24, 0x01	; 1
    6306:	09 f0       	breq	.+2      	; 0x630a <vTaskNotifyGiveFromISR+0x5c>
    6308:	4f c0       	rjmp	.+158    	; 0x63a8 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    630a:	80 91 a9 06 	lds	r24, 0x06A9
    630e:	88 23       	and	r24, r24
    6310:	61 f5       	brne	.+88     	; 0x636a <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6312:	8b 81       	ldd	r24, Y+3	; 0x03
    6314:	9c 81       	ldd	r25, Y+4	; 0x04
    6316:	02 96       	adiw	r24, 0x02	; 2
    6318:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    631c:	eb 81       	ldd	r30, Y+3	; 0x03
    631e:	fc 81       	ldd	r31, Y+4	; 0x04
    6320:	96 89       	ldd	r25, Z+22	; 0x16
    6322:	80 91 9f 06 	lds	r24, 0x069F
    6326:	89 17       	cp	r24, r25
    6328:	28 f4       	brcc	.+10     	; 0x6334 <vTaskNotifyGiveFromISR+0x86>
    632a:	eb 81       	ldd	r30, Y+3	; 0x03
    632c:	fc 81       	ldd	r31, Y+4	; 0x04
    632e:	86 89       	ldd	r24, Z+22	; 0x16
    6330:	80 93 9f 06 	sts	0x069F, r24
    6334:	eb 81       	ldd	r30, Y+3	; 0x03
    6336:	fc 81       	ldd	r31, Y+4	; 0x04
    6338:	86 89       	ldd	r24, Z+22	; 0x16
    633a:	28 2f       	mov	r18, r24
    633c:	30 e0       	ldi	r19, 0x00	; 0
    633e:	c9 01       	movw	r24, r18
    6340:	88 0f       	add	r24, r24
    6342:	99 1f       	adc	r25, r25
    6344:	88 0f       	add	r24, r24
    6346:	99 1f       	adc	r25, r25
    6348:	88 0f       	add	r24, r24
    634a:	99 1f       	adc	r25, r25
    634c:	82 0f       	add	r24, r18
    634e:	93 1f       	adc	r25, r19
    6350:	ac 01       	movw	r20, r24
    6352:	46 55       	subi	r20, 0x56	; 86
    6354:	59 4f       	sbci	r21, 0xF9	; 249
    6356:	8b 81       	ldd	r24, Y+3	; 0x03
    6358:	9c 81       	ldd	r25, Y+4	; 0x04
    635a:	9c 01       	movw	r18, r24
    635c:	2e 5f       	subi	r18, 0xFE	; 254
    635e:	3f 4f       	sbci	r19, 0xFF	; 255
    6360:	ca 01       	movw	r24, r20
    6362:	b9 01       	movw	r22, r18
    6364:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
    6368:	0a c0       	rjmp	.+20     	; 0x637e <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    636a:	8b 81       	ldd	r24, Y+3	; 0x03
    636c:	9c 81       	ldd	r25, Y+4	; 0x04
    636e:	9c 01       	movw	r18, r24
    6370:	24 5f       	subi	r18, 0xF4	; 244
    6372:	3f 4f       	sbci	r19, 0xFF	; 255
    6374:	84 ee       	ldi	r24, 0xE4	; 228
    6376:	96 e0       	ldi	r25, 0x06	; 6
    6378:	b9 01       	movw	r22, r18
    637a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    637e:	eb 81       	ldd	r30, Y+3	; 0x03
    6380:	fc 81       	ldd	r31, Y+4	; 0x04
    6382:	96 89       	ldd	r25, Z+22	; 0x16
    6384:	e0 91 99 06 	lds	r30, 0x0699
    6388:	f0 91 9a 06 	lds	r31, 0x069A
    638c:	86 89       	ldd	r24, Z+22	; 0x16
    638e:	89 17       	cp	r24, r25
    6390:	58 f4       	brcc	.+22     	; 0x63a8 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    6392:	8f 81       	ldd	r24, Y+7	; 0x07
    6394:	98 85       	ldd	r25, Y+8	; 0x08
    6396:	00 97       	sbiw	r24, 0x00	; 0
    6398:	21 f0       	breq	.+8      	; 0x63a2 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    639a:	ef 81       	ldd	r30, Y+7	; 0x07
    639c:	f8 85       	ldd	r31, Y+8	; 0x08
    639e:	81 e0       	ldi	r24, 0x01	; 1
    63a0:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	80 93 a2 06 	sts	0x06A2, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    63a8:	28 96       	adiw	r28, 0x08	; 8
    63aa:	0f b6       	in	r0, 0x3f	; 63
    63ac:	f8 94       	cli
    63ae:	de bf       	out	0x3e, r29	; 62
    63b0:	0f be       	out	0x3f, r0	; 63
    63b2:	cd bf       	out	0x3d, r28	; 61
    63b4:	cf 91       	pop	r28
    63b6:	df 91       	pop	r29
    63b8:	08 95       	ret

000063ba <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    63ba:	df 93       	push	r29
    63bc:	cf 93       	push	r28
    63be:	cd b7       	in	r28, 0x3d	; 61
    63c0:	de b7       	in	r29, 0x3e	; 62
    63c2:	27 97       	sbiw	r28, 0x07	; 7
    63c4:	0f b6       	in	r0, 0x3f	; 63
    63c6:	f8 94       	cli
    63c8:	de bf       	out	0x3e, r29	; 62
    63ca:	0f be       	out	0x3f, r0	; 63
    63cc:	cd bf       	out	0x3d, r28	; 61
    63ce:	9d 83       	std	Y+5, r25	; 0x05
    63d0:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    63d2:	8c 81       	ldd	r24, Y+4	; 0x04
    63d4:	9d 81       	ldd	r25, Y+5	; 0x05
    63d6:	00 97       	sbiw	r24, 0x00	; 0
    63d8:	39 f4       	brne	.+14     	; 0x63e8 <xTaskNotifyStateClear+0x2e>
    63da:	80 91 99 06 	lds	r24, 0x0699
    63de:	90 91 9a 06 	lds	r25, 0x069A
    63e2:	9f 83       	std	Y+7, r25	; 0x07
    63e4:	8e 83       	std	Y+6, r24	; 0x06
    63e6:	04 c0       	rjmp	.+8      	; 0x63f0 <xTaskNotifyStateClear+0x36>
    63e8:	8c 81       	ldd	r24, Y+4	; 0x04
    63ea:	9d 81       	ldd	r25, Y+5	; 0x05
    63ec:	9f 83       	std	Y+7, r25	; 0x07
    63ee:	8e 83       	std	Y+6, r24	; 0x06
    63f0:	8e 81       	ldd	r24, Y+6	; 0x06
    63f2:	9f 81       	ldd	r25, Y+7	; 0x07
    63f4:	9b 83       	std	Y+3, r25	; 0x03
    63f6:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    63f8:	0f b6       	in	r0, 0x3f	; 63
    63fa:	f8 94       	cli
    63fc:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    63fe:	ea 81       	ldd	r30, Y+2	; 0x02
    6400:	fb 81       	ldd	r31, Y+3	; 0x03
    6402:	85 a1       	ldd	r24, Z+37	; 0x25
    6404:	82 30       	cpi	r24, 0x02	; 2
    6406:	31 f4       	brne	.+12     	; 0x6414 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    6408:	ea 81       	ldd	r30, Y+2	; 0x02
    640a:	fb 81       	ldd	r31, Y+3	; 0x03
    640c:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    640e:	81 e0       	ldi	r24, 0x01	; 1
    6410:	89 83       	std	Y+1, r24	; 0x01
    6412:	01 c0       	rjmp	.+2      	; 0x6416 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    6414:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    6416:	0f 90       	pop	r0
    6418:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    641a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    641c:	27 96       	adiw	r28, 0x07	; 7
    641e:	0f b6       	in	r0, 0x3f	; 63
    6420:	f8 94       	cli
    6422:	de bf       	out	0x3e, r29	; 62
    6424:	0f be       	out	0x3f, r0	; 63
    6426:	cd bf       	out	0x3d, r28	; 61
    6428:	cf 91       	pop	r28
    642a:	df 91       	pop	r29
    642c:	08 95       	ret

0000642e <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    642e:	df 93       	push	r29
    6430:	cf 93       	push	r28
    6432:	cd b7       	in	r28, 0x3d	; 61
    6434:	de b7       	in	r29, 0x3e	; 62
    6436:	27 97       	sbiw	r28, 0x07	; 7
    6438:	0f b6       	in	r0, 0x3f	; 63
    643a:	f8 94       	cli
    643c:	de bf       	out	0x3e, r29	; 62
    643e:	0f be       	out	0x3f, r0	; 63
    6440:	cd bf       	out	0x3d, r28	; 61
    6442:	9e 83       	std	Y+6, r25	; 0x06
    6444:	8d 83       	std	Y+5, r24	; 0x05
    6446:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    6448:	80 91 9d 06 	lds	r24, 0x069D
    644c:	90 91 9e 06 	lds	r25, 0x069E
    6450:	9a 83       	std	Y+2, r25	; 0x02
    6452:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6454:	80 91 99 06 	lds	r24, 0x0699
    6458:	90 91 9a 06 	lds	r25, 0x069A
    645c:	02 96       	adiw	r24, 0x02	; 2
    645e:	0e 94 13 12 	call	0x2426	; 0x2426 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    6462:	8d 81       	ldd	r24, Y+5	; 0x05
    6464:	9e 81       	ldd	r25, Y+6	; 0x06
    6466:	2f ef       	ldi	r18, 0xFF	; 255
    6468:	8f 3f       	cpi	r24, 0xFF	; 255
    646a:	92 07       	cpc	r25, r18
    646c:	81 f4       	brne	.+32     	; 0x648e <prvAddCurrentTaskToDelayedList+0x60>
    646e:	8f 81       	ldd	r24, Y+7	; 0x07
    6470:	88 23       	and	r24, r24
    6472:	69 f0       	breq	.+26     	; 0x648e <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6474:	80 91 99 06 	lds	r24, 0x0699
    6478:	90 91 9a 06 	lds	r25, 0x069A
    647c:	9c 01       	movw	r18, r24
    647e:	2e 5f       	subi	r18, 0xFE	; 254
    6480:	3f 4f       	sbci	r19, 0xFF	; 255
    6482:	86 ef       	ldi	r24, 0xF6	; 246
    6484:	96 e0       	ldi	r25, 0x06	; 6
    6486:	b9 01       	movw	r22, r18
    6488:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vListInsertEnd>
    648c:	43 c0       	rjmp	.+134    	; 0x6514 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    648e:	29 81       	ldd	r18, Y+1	; 0x01
    6490:	3a 81       	ldd	r19, Y+2	; 0x02
    6492:	8d 81       	ldd	r24, Y+5	; 0x05
    6494:	9e 81       	ldd	r25, Y+6	; 0x06
    6496:	82 0f       	add	r24, r18
    6498:	93 1f       	adc	r25, r19
    649a:	9c 83       	std	Y+4, r25	; 0x04
    649c:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    649e:	e0 91 99 06 	lds	r30, 0x0699
    64a2:	f0 91 9a 06 	lds	r31, 0x069A
    64a6:	8b 81       	ldd	r24, Y+3	; 0x03
    64a8:	9c 81       	ldd	r25, Y+4	; 0x04
    64aa:	93 83       	std	Z+3, r25	; 0x03
    64ac:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    64ae:	2b 81       	ldd	r18, Y+3	; 0x03
    64b0:	3c 81       	ldd	r19, Y+4	; 0x04
    64b2:	89 81       	ldd	r24, Y+1	; 0x01
    64b4:	9a 81       	ldd	r25, Y+2	; 0x02
    64b6:	28 17       	cp	r18, r24
    64b8:	39 07       	cpc	r19, r25
    64ba:	70 f4       	brcc	.+28     	; 0x64d8 <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    64bc:	80 91 e2 06 	lds	r24, 0x06E2
    64c0:	90 91 e3 06 	lds	r25, 0x06E3
    64c4:	20 91 99 06 	lds	r18, 0x0699
    64c8:	30 91 9a 06 	lds	r19, 0x069A
    64cc:	2e 5f       	subi	r18, 0xFE	; 254
    64ce:	3f 4f       	sbci	r19, 0xFF	; 255
    64d0:	b9 01       	movw	r22, r18
    64d2:	0e 94 a7 11 	call	0x234e	; 0x234e <vListInsert>
    64d6:	1e c0       	rjmp	.+60     	; 0x6514 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    64d8:	40 91 e0 06 	lds	r20, 0x06E0
    64dc:	50 91 e1 06 	lds	r21, 0x06E1
    64e0:	80 91 99 06 	lds	r24, 0x0699
    64e4:	90 91 9a 06 	lds	r25, 0x069A
    64e8:	9c 01       	movw	r18, r24
    64ea:	2e 5f       	subi	r18, 0xFE	; 254
    64ec:	3f 4f       	sbci	r19, 0xFF	; 255
    64ee:	ca 01       	movw	r24, r20
    64f0:	b9 01       	movw	r22, r18
    64f2:	0e 94 a7 11 	call	0x234e	; 0x234e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    64f6:	20 91 a5 06 	lds	r18, 0x06A5
    64fa:	30 91 a6 06 	lds	r19, 0x06A6
    64fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6500:	9c 81       	ldd	r25, Y+4	; 0x04
    6502:	82 17       	cp	r24, r18
    6504:	93 07       	cpc	r25, r19
    6506:	30 f4       	brcc	.+12     	; 0x6514 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    6508:	8b 81       	ldd	r24, Y+3	; 0x03
    650a:	9c 81       	ldd	r25, Y+4	; 0x04
    650c:	90 93 a6 06 	sts	0x06A6, r25
    6510:	80 93 a5 06 	sts	0x06A5, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    6514:	27 96       	adiw	r28, 0x07	; 7
    6516:	0f b6       	in	r0, 0x3f	; 63
    6518:	f8 94       	cli
    651a:	de bf       	out	0x3e, r29	; 62
    651c:	0f be       	out	0x3f, r0	; 63
    651e:	cd bf       	out	0x3d, r28	; 61
    6520:	cf 91       	pop	r28
    6522:	df 91       	pop	r29
    6524:	08 95       	ret

00006526 <__prologue_saves__>:
    6526:	2f 92       	push	r2
    6528:	3f 92       	push	r3
    652a:	4f 92       	push	r4
    652c:	5f 92       	push	r5
    652e:	6f 92       	push	r6
    6530:	7f 92       	push	r7
    6532:	8f 92       	push	r8
    6534:	9f 92       	push	r9
    6536:	af 92       	push	r10
    6538:	bf 92       	push	r11
    653a:	cf 92       	push	r12
    653c:	df 92       	push	r13
    653e:	ef 92       	push	r14
    6540:	ff 92       	push	r15
    6542:	0f 93       	push	r16
    6544:	1f 93       	push	r17
    6546:	cf 93       	push	r28
    6548:	df 93       	push	r29
    654a:	cd b7       	in	r28, 0x3d	; 61
    654c:	de b7       	in	r29, 0x3e	; 62
    654e:	ca 1b       	sub	r28, r26
    6550:	db 0b       	sbc	r29, r27
    6552:	0f b6       	in	r0, 0x3f	; 63
    6554:	f8 94       	cli
    6556:	de bf       	out	0x3e, r29	; 62
    6558:	0f be       	out	0x3f, r0	; 63
    655a:	cd bf       	out	0x3d, r28	; 61
    655c:	09 94       	ijmp

0000655e <__epilogue_restores__>:
    655e:	2a 88       	ldd	r2, Y+18	; 0x12
    6560:	39 88       	ldd	r3, Y+17	; 0x11
    6562:	48 88       	ldd	r4, Y+16	; 0x10
    6564:	5f 84       	ldd	r5, Y+15	; 0x0f
    6566:	6e 84       	ldd	r6, Y+14	; 0x0e
    6568:	7d 84       	ldd	r7, Y+13	; 0x0d
    656a:	8c 84       	ldd	r8, Y+12	; 0x0c
    656c:	9b 84       	ldd	r9, Y+11	; 0x0b
    656e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6570:	b9 84       	ldd	r11, Y+9	; 0x09
    6572:	c8 84       	ldd	r12, Y+8	; 0x08
    6574:	df 80       	ldd	r13, Y+7	; 0x07
    6576:	ee 80       	ldd	r14, Y+6	; 0x06
    6578:	fd 80       	ldd	r15, Y+5	; 0x05
    657a:	0c 81       	ldd	r16, Y+4	; 0x04
    657c:	1b 81       	ldd	r17, Y+3	; 0x03
    657e:	aa 81       	ldd	r26, Y+2	; 0x02
    6580:	b9 81       	ldd	r27, Y+1	; 0x01
    6582:	ce 0f       	add	r28, r30
    6584:	d1 1d       	adc	r29, r1
    6586:	0f b6       	in	r0, 0x3f	; 63
    6588:	f8 94       	cli
    658a:	de bf       	out	0x3e, r29	; 62
    658c:	0f be       	out	0x3f, r0	; 63
    658e:	cd bf       	out	0x3d, r28	; 61
    6590:	ed 01       	movw	r28, r26
    6592:	08 95       	ret

00006594 <memcpy>:
    6594:	fb 01       	movw	r30, r22
    6596:	dc 01       	movw	r26, r24
    6598:	02 c0       	rjmp	.+4      	; 0x659e <memcpy+0xa>
    659a:	01 90       	ld	r0, Z+
    659c:	0d 92       	st	X+, r0
    659e:	41 50       	subi	r20, 0x01	; 1
    65a0:	50 40       	sbci	r21, 0x00	; 0
    65a2:	d8 f7       	brcc	.-10     	; 0x659a <memcpy+0x6>
    65a4:	08 95       	ret

000065a6 <memset>:
    65a6:	dc 01       	movw	r26, r24
    65a8:	01 c0       	rjmp	.+2      	; 0x65ac <memset+0x6>
    65aa:	6d 93       	st	X+, r22
    65ac:	41 50       	subi	r20, 0x01	; 1
    65ae:	50 40       	sbci	r21, 0x00	; 0
    65b0:	e0 f7       	brcc	.-8      	; 0x65aa <memset+0x4>
    65b2:	08 95       	ret

000065b4 <itoa>:
    65b4:	fb 01       	movw	r30, r22
    65b6:	9f 01       	movw	r18, r30
    65b8:	e8 94       	clt
    65ba:	42 30       	cpi	r20, 0x02	; 2
    65bc:	c4 f0       	brlt	.+48     	; 0x65ee <itoa+0x3a>
    65be:	45 32       	cpi	r20, 0x25	; 37
    65c0:	b4 f4       	brge	.+44     	; 0x65ee <itoa+0x3a>
    65c2:	4a 30       	cpi	r20, 0x0A	; 10
    65c4:	29 f4       	brne	.+10     	; 0x65d0 <itoa+0x1c>
    65c6:	97 fb       	bst	r25, 7
    65c8:	1e f4       	brtc	.+6      	; 0x65d0 <itoa+0x1c>
    65ca:	90 95       	com	r25
    65cc:	81 95       	neg	r24
    65ce:	9f 4f       	sbci	r25, 0xFF	; 255
    65d0:	64 2f       	mov	r22, r20
    65d2:	77 27       	eor	r23, r23
    65d4:	0e 94 0b 33 	call	0x6616	; 0x6616 <__udivmodhi4>
    65d8:	80 5d       	subi	r24, 0xD0	; 208
    65da:	8a 33       	cpi	r24, 0x3A	; 58
    65dc:	0c f0       	brlt	.+2      	; 0x65e0 <itoa+0x2c>
    65de:	89 5d       	subi	r24, 0xD9	; 217
    65e0:	81 93       	st	Z+, r24
    65e2:	cb 01       	movw	r24, r22
    65e4:	00 97       	sbiw	r24, 0x00	; 0
    65e6:	a1 f7       	brne	.-24     	; 0x65d0 <itoa+0x1c>
    65e8:	16 f4       	brtc	.+4      	; 0x65ee <itoa+0x3a>
    65ea:	5d e2       	ldi	r21, 0x2D	; 45
    65ec:	51 93       	st	Z+, r21
    65ee:	10 82       	st	Z, r1
    65f0:	c9 01       	movw	r24, r18
    65f2:	0c 94 fb 32 	jmp	0x65f6	; 0x65f6 <strrev>

000065f6 <strrev>:
    65f6:	dc 01       	movw	r26, r24
    65f8:	fc 01       	movw	r30, r24
    65fa:	67 2f       	mov	r22, r23
    65fc:	71 91       	ld	r23, Z+
    65fe:	77 23       	and	r23, r23
    6600:	e1 f7       	brne	.-8      	; 0x65fa <strrev+0x4>
    6602:	32 97       	sbiw	r30, 0x02	; 2
    6604:	04 c0       	rjmp	.+8      	; 0x660e <strrev+0x18>
    6606:	7c 91       	ld	r23, X
    6608:	6d 93       	st	X+, r22
    660a:	70 83       	st	Z, r23
    660c:	62 91       	ld	r22, -Z
    660e:	ae 17       	cp	r26, r30
    6610:	bf 07       	cpc	r27, r31
    6612:	c8 f3       	brcs	.-14     	; 0x6606 <strrev+0x10>
    6614:	08 95       	ret

00006616 <__udivmodhi4>:
    6616:	aa 1b       	sub	r26, r26
    6618:	bb 1b       	sub	r27, r27
    661a:	51 e1       	ldi	r21, 0x11	; 17
    661c:	07 c0       	rjmp	.+14     	; 0x662c <__udivmodhi4_ep>

0000661e <__udivmodhi4_loop>:
    661e:	aa 1f       	adc	r26, r26
    6620:	bb 1f       	adc	r27, r27
    6622:	a6 17       	cp	r26, r22
    6624:	b7 07       	cpc	r27, r23
    6626:	10 f0       	brcs	.+4      	; 0x662c <__udivmodhi4_ep>
    6628:	a6 1b       	sub	r26, r22
    662a:	b7 0b       	sbc	r27, r23

0000662c <__udivmodhi4_ep>:
    662c:	88 1f       	adc	r24, r24
    662e:	99 1f       	adc	r25, r25
    6630:	5a 95       	dec	r21
    6632:	a9 f7       	brne	.-22     	; 0x661e <__udivmodhi4_loop>
    6634:	80 95       	com	r24
    6636:	90 95       	com	r25
    6638:	bc 01       	movw	r22, r24
    663a:	cd 01       	movw	r24, r26
    663c:	08 95       	ret

0000663e <_exit>:
    663e:	f8 94       	cli

00006640 <__stop_program>:
    6640:	ff cf       	rjmp	.-2      	; 0x6640 <__stop_program>
